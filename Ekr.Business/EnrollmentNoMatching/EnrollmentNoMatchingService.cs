using Ekr.Business.Contracts.EnrollmentNoMatching;
using Ekr.Core.Configuration;
using Ekr.Core.Constant;
using Ekr.Core.Entities;
using Ekr.Core.Entities.Auth;
using Ekr.Core.Entities.DataEnrollment.Entity;
using Ekr.Core.Entities.DataEnrollment.ViewModel;
using Ekr.Core.Entities.DataKTP;
using Ekr.Core.Entities.DataMaster.AlatReader;
using Ekr.Core.Entities.DataMaster.DataReader.Entity;
using Ekr.Core.Entities.Enrollment;
using Ekr.Core.Entities.Logging;
using Ekr.Core.Entities.Recognition;
using Ekr.Core.Entities.SettingThreshold;
using Ekr.Core.Entities.ThirdParty;
using Ekr.Core.Enums;
using Ekr.Core.Helper;
using Ekr.Core.Securities.Symmetric;
using Ekr.Core.Services;
using Ekr.Repository.Contracts.DataKTP;
using Ekr.Repository.Contracts.DataMaster.AlatReader;
using Ekr.Repository.Contracts.DataMaster.DataReader;
using Ekr.Repository.Contracts.DataMaster.SystemParameters;
using Ekr.Repository.Contracts.DataMaster.Utility;
using Ekr.Repository.Contracts.EnrollmentNoMatching;
using Ekr.Repository.Contracts.Logging;
using Ekr.Services.Contracts.Account;
using Ekr.Services.Contracts.IKD;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Options;
using Newtonsoft.Json;
using NPOI.POIFS.Crypt.Dsig;
using NPOI.SS.Formula.Functions;
using Org.BouncyCastle.Ocsp;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Net.Http;
using System.Security.Claims;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

namespace Ekr.Business.EnrollmentNoMatching
{
    public class EnrollmentNoMatchingService : IEnrollmentNoMatchingService
    {
        private readonly IProfileRepository _profileRepository;
        private readonly ICIFService _cifService;
        private readonly IIKDServices _ikdService;
        private readonly IEnrollmentNoMatchingRepository _enrollmentKTPRepository;
        private readonly ISysParameterRepository _sysParameterRepository;
        private readonly IDataReaderRepository _dataReaderRepository;
        private readonly SftpConfig _sftpConfig;
        private readonly ErrorMessageConfig _ErrorMessageConfig;
        private readonly successMessageConfig _SuccessMessageConfig;
        private readonly IAlatReaderRepository _alatReaderRepository;
        private readonly IUtility1Repository _logrepo;
        private readonly IHttpRequestService _httpRequestService;
        private readonly IErrorLogRepository _errorLogRepository;
        private readonly IConfiguration _configuration;


        public EnrollmentNoMatchingService(IProfileRepository profileRepository, ICIFService cifService, IIKDServices ikdservice,
            IEnrollmentNoMatchingRepository enrollmentKTPRepository,
            ISysParameterRepository sysParameterRepository,
            IDataReaderRepository dataReaderRepository,
            IOptions<SftpConfig> options,
            IOptions<ErrorMessageConfig> options2,
            IOptions<successMessageConfig> options3,
            IAlatReaderRepository alatReaderRepository, IHttpRequestService httpRequestService, IUtility1Repository logrepo, IErrorLogRepository errorLogRepository, IConfiguration configuration
            )
        {
            _profileRepository = profileRepository;
            _cifService = cifService;
            _ikdService = ikdservice;
            _enrollmentKTPRepository = enrollmentKTPRepository;
            _sysParameterRepository = sysParameterRepository;
            _dataReaderRepository = dataReaderRepository;
            _sftpConfig = options.Value;
            _ErrorMessageConfig = options2.Value;
            _SuccessMessageConfig = options3.Value;
            _alatReaderRepository = alatReaderRepository;
            _httpRequestService = httpRequestService;
            _logrepo = logrepo;
            _errorLogRepository = errorLogRepository;
            _configuration = configuration;
        }

        public async Task<(string msg, int code, string cif)> ReSubmitEnrollment(bool isHitSOA, ApiSOA ReqSoa, EnrollKTP enroll, int Id, string npp,
            string unitCode, int unitId)
        {
            #region check data is employee or not
            bool isEmployee = false;
            var _empData = await _enrollmentKTPRepository.IsEmployee(enroll.KtpNIK);
            if (_empData != null)
            {
                isEmployee = true;
            }
            #endregion

            #region check UID
            var dataReader = await _dataReaderRepository.GetDatareaderUid(enroll.UID).ConfigureAwait(false);

            var dataReaderLog = new Tbl_MasterAlatReaderLog();
            var dataReaderActivityLog = new Tbl_MasterAlatReaderLogActvity();

            if (dataReader != null)
            {
                dataReaderLog = new Tbl_MasterAlatReaderLog
                {
                    CreatedBy_Id = Id,
                    CreatedTime = DateTime.Now,
                    IsActive = true,
                    IsDeleted = false,
                    Nik = enroll.KtpNIK,
                    PegawaiId = Id,
                    Serial_Number = dataReader.SN_Unit,
                    Type = "Updates Enroll",
                    Uid = enroll.UID
                };

                dataReaderActivityLog = new Tbl_MasterAlatReaderLogActvity
                {
                    CreatedBy_Id = Id,
                    IsActive = true,
                    IsDeleted = false,
                    KodeUnit = unitCode,
                    LastIP = enroll.IpAddress,
                    NIK = enroll.KtpNIK,
                    CreatedTime = DateTime.Now,
                    NppPegawai = npp,
                    PegawaiId = Id,
                    Type = "Updates Enroll",
                    UID = enroll.UID,
                    UnitId = unitId
                };
            }
            #endregion

            string JamServer = DateTime.Now.ToString("ddMMyyyyHHmmss");

            if (enroll.KtpTanggalLahir != null)
            {
                enroll.KtpTanggalLahir = enroll.KtpTanggalLahir.Replace(".", "");
                if (enroll.KtpTanggalLahir.Contains("/"))
                {
                    enroll.KtpTanggalLahir = enroll.KtpTanggalLahir.Replace("/", "-");
                }
                string[] arrayTanggl = enroll.KtpTanggalLahir.Split("-");
                string hari = "";
                string bulan = "";
                string tahun = "";

                if (arrayTanggl != null)
                {
                    if (arrayTanggl[0] != null)
                    {
                        if (arrayTanggl[0].Length != 2)
                        {
                            hari = "0" + arrayTanggl[0];

                        }
                        else
                        {
                            hari = arrayTanggl[0];

                        }
                    }

                    if (arrayTanggl[1] != null)
                    {
                        if (arrayTanggl[1].Length != 2)
                        {
                            bulan = "0" + arrayTanggl[1];

                        }
                        else
                        {
                            bulan = arrayTanggl[1];

                        }
                    }

                    if (arrayTanggl[2] != null)
                    {
                        tahun = arrayTanggl[2];
                    }
                }

                enroll.KtpTanggalLahir = hari + "-" + bulan + "-" + tahun;
            }

            var cekKTP = await _profileRepository.GetDataDemografis(enroll.KtpNIK)
                .ConfigureAwait(false);

            var dataNpp = new Tbl_Mapping_Pegawai_KTP();

            #region update data ktp
            if (cekKTP != null)
            {
                #region update demografi
                var logDemografi = new Tbl_DataKTP_Demografis_Log
                {
                    Agama = cekKTP.Agama,
                    Alamat = cekKTP.Alamat,
                    AlamatGoogle = cekKTP.AlamatGoogle,
                    AlamatLengkap = cekKTP.AlamatLengkap,
                    CreatedById = cekKTP.CreatedById,
                    CreatedByUID = cekKTP.CreatedByUID,
                    CreatedByUnitId = cekKTP.CreatedByUnitId,
                    CreatedTime = cekKTP.CreatedTime,
                    Desa = cekKTP.Desa,
                    GolonganDarah = cekKTP.GolonganDarah,
                    JenisKelamin = cekKTP.JenisKelamin,
                    Kecamatan = cekKTP.Kecamatan,
                    Kelurahan = cekKTP.Kelurahan,
                    Kewarganegaraan = cekKTP.Kewarganegaraan,
                    KodePos = cekKTP.KodePos,
                    Kota = cekKTP.Kota,
                    Latitude = cekKTP.Latitude,
                    Longitude = cekKTP.Longitude,
                    MasaBerlaku = cekKTP.MasaBerlaku,
                    Nama = cekKTP.Nama,
                    NIK = cekKTP.NIK,
                    Pekerjaan = cekKTP.Pekerjaan,
                    Provinsi = cekKTP.Provinsi,
                    RT = cekKTP.RT,
                    RW = cekKTP.RW,
                    StatusPerkawinan = cekKTP.StatusPerkawinan,
                    TanggalLahir = cekKTP.TanggalLahir,
                    TempatLahir = cekKTP.TempatLahir,
                    CIF = cekKTP.CIF,
                    CreatedByNpp = cekKTP.CreatedByNpp
                };

                var stringPerubahan = "";

                if (cekKTP.Nama != enroll.KtpNama)
                {
                    stringPerubahan = stringPerubahan + "NAMA : " + cekKTP.Nama + " -> " + enroll.KtpNama + " <br/>";
                    cekKTP.Nama = enroll.KtpNama;
                }

                if (cekKTP.TempatLahir != enroll.KtpTempatLahir)
                {
                    stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTP.TempatLahir + " -> " + enroll.KtpTempatLahir + " <br/>";
                    cekKTP.TempatLahir = enroll.KtpTempatLahir;
                }

                if (enroll.KtpTanggalLahir != null)
                {
                    if (cekKTP.TempatLahir != enroll.KtpTempatLahir)
                    {
                        stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTP.TanggalLahir + " -> " + enroll.KtpTanggalLahir + " <br/>";
                        cekKTP.TanggalLahir = DateTime.ParseExact(enroll.KtpTanggalLahir, "dd-MM-yyyy", CultureInfo.InvariantCulture);
                    }
                }

                if (cekKTP.JenisKelamin != enroll.KtpJanisKelamin)
                {
                    stringPerubahan = stringPerubahan + "JENIS KELAMIN : " + cekKTP.JenisKelamin + " -> " + enroll.KtpJanisKelamin + " <br/>";
                    cekKTP.JenisKelamin = enroll.KtpJanisKelamin;
                }

                if (cekKTP.GolonganDarah != enroll.KtpGolonganDarah)
                {
                    stringPerubahan = stringPerubahan + "GOLONGAN DARAH : " + cekKTP.GolonganDarah + " -> " + enroll.KtpGolonganDarah + " <br/>";
                    cekKTP.GolonganDarah = enroll.KtpGolonganDarah;
                }

                if (cekKTP.Alamat != enroll.KtpAlamat)
                {
                    stringPerubahan = stringPerubahan + "ALAMAT : " + cekKTP.Alamat + " -> " + enroll.KtpAlamat + " <br/>";
                    cekKTP.Alamat = enroll.KtpAlamat;
                }

                if (cekKTP.RT != enroll.KtpRT)
                {
                    stringPerubahan = stringPerubahan + "RT : " + cekKTP.RT + " -> " + enroll.KtpRT + " <br/>";
                    cekKTP.RT = enroll.KtpRT;
                }

                if (cekKTP.RW != enroll.KtpRW)
                {
                    stringPerubahan = stringPerubahan + "RW : " + cekKTP.RW + " -> " + enroll.KtpRW + " <br/>";
                    cekKTP.RW = enroll.KtpRW;
                }

                if (cekKTP.Kelurahan != enroll.KtpKelurahan)
                {
                    stringPerubahan = stringPerubahan + "KELURAHAN : " + cekKTP.Kelurahan + " -> " + enroll.KtpKelurahan + " <br/>";
                    cekKTP.Kelurahan = enroll.KtpKelurahan;
                }

                if (cekKTP.Kecamatan != enroll.KtpKecamatan)
                {
                    stringPerubahan = stringPerubahan + "KECAMATAN : " + cekKTP.Kecamatan + " -> " + enroll.KtpKecamatan + " <br/>";
                    cekKTP.Kecamatan = enroll.KtpKecamatan;
                }

                if (cekKTP.Kota != enroll.KtpKota)
                {
                    stringPerubahan = stringPerubahan + "KOTA/KABUPATEN : " + cekKTP.Kota + " -> " + enroll.KtpKota + " <br/>";
                    cekKTP.Kota = enroll.KtpKota;
                }

                if (cekKTP.Provinsi != enroll.KtpProvinsi)
                {
                    stringPerubahan = stringPerubahan + "PROVINSI  : " + cekKTP.Provinsi + " -> " + enroll.KtpProvinsi + " <br/>";
                    cekKTP.Provinsi = enroll.KtpProvinsi;
                }

                if (cekKTP.Agama != enroll.KtpAgama)
                {
                    stringPerubahan = stringPerubahan + "AGAMA  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTP.Agama = enroll.KtpAgama;
                }

                if (cekKTP.StatusPerkawinan != enroll.KtpStatusPerkawinan)
                {
                    stringPerubahan = stringPerubahan + "STATUS PERKAWINAN  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTP.StatusPerkawinan = enroll.KtpStatusPerkawinan;
                }

                if (cekKTP.Pekerjaan != enroll.KtpPekerjaan)
                {
                    stringPerubahan = stringPerubahan + "PEKERJAAN  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTP.Pekerjaan = enroll.KtpPekerjaan;
                }

                if (cekKTP.Kewarganegaraan != enroll.KtpKewarganegaraan)
                {
                    stringPerubahan = stringPerubahan + "KEWARGANEGARAAN  : " + cekKTP.Kewarganegaraan + " -> " + enroll.KtpKewarganegaraan + " <br/>";
                    cekKTP.Kewarganegaraan = enroll.KtpKewarganegaraan;
                }
                if (cekKTP.MasaBerlaku != enroll.KtpMasaBerlaku)
                {
                    stringPerubahan = stringPerubahan + "MASA BERLAKU  : " + cekKTP.MasaBerlaku + " -> " + enroll.KtpMasaBerlaku + " <br/>";
                    cekKTP.MasaBerlaku = enroll.KtpMasaBerlaku;
                }

                cekKTP.UpdatedTime = DateTime.Now;
                cekKTP.UpdatedById = Id;
                cekKTP.UpdatedByUID = enroll.UID;
                cekKTP.UpdatedByUnitCode = unitCode;
                cekKTP.UpdatedByUnitId = unitId;
                cekKTP.UpdatedByNpp = npp;

                if (string.IsNullOrWhiteSpace(stringPerubahan))
                {
                    stringPerubahan = stringPerubahan + "Data Demografi tidak ada perubahan" + " <br/>";
                }

                if (isEmployee)
                {
                    dataNpp = new Tbl_Mapping_Pegawai_KTP
                    {
                        CreatedById = Id,
                        NIK = enroll.KtpNIK,
                        Npp = _empData.Npp,
                        CreatedByNpp = npp,
                        CreatedByUID = enroll.UID,
                        CreatedTime = DateTime.Now
                    };
                }
                #endregion

                var sysPathFolder = await _sysParameterRepository.GetPathFolder("PathFolderData");
                string pathFolder = sysPathFolder.Value;

                var photoKtpLog = new Tbl_DataKTP_Photo_Log();
                var photoKTPData = await _profileRepository.GetPhotoKtp(enroll.KtpNIK)
                        .ConfigureAwait(false);
                var exPhotoKtp = photoKTPData;

                #region update Photo KTP
                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoKTP) && photoKTPData != null)
                {
                    string imageEncrypted = enroll.KtpPhotoKTP.Encrypt(Phrase.FileEncryption);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderPhoto")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderFoto = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "Foto_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderFoto, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderFoto))
                        {
                            Directory.CreateDirectory(subPathFolderFoto);
                        }

                        filePath = subPathFolderFoto + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    photoKtpLog.CreatedById = photoKTPData.CreatedById;
                    photoKtpLog.CreatedByNpp = photoKTPData.CreatedByNpp;
                    photoKtpLog.CreatedByUid = photoKTPData.CreatedByUid;
                    photoKtpLog.CreatedByUnit = photoKTPData.CreatedByUnit;
                    photoKtpLog.CreatedTime = photoKTPData.CreatedTime;
                    photoKtpLog.FileName = photoKTPData.FileName;
                    photoKtpLog.Nik = photoKTPData.Nik;
                    photoKtpLog.PathFile = photoKTPData.PathFile;

                    photoKTPData.PathFile = filePath;
                    photoKTPData.Nik = enroll.KtpNIK;
                    photoKTPData.FileName = fileName;
                    photoKTPData.IsActive = true;
                    photoKTPData.IsDeleted = false;
                    photoKTPData.UpdatedById = Id;
                    photoKTPData.UpdatedByNpp = npp;
                    photoKTPData.UpdatedByUid = enroll.UID;
                    photoKTPData.UpdatedTime = DateTime.Now;
                }
                else
                {
                    stringPerubahan = stringPerubahan + "Data Photo Tidak Ditemukan" + " <br/>";
                }
                #endregion

                var photoSignatureLog = new Tbl_DataKTP_Signature_Log();

                var photoSignatureData = await _profileRepository.GetPhotoSignature(enroll.KtpNIK)
                        .ConfigureAwait(false);
                var exphotoSignatureData = photoSignatureData;

                #region update signature
                if (!string.IsNullOrWhiteSpace(enroll.KtpSignature) && photoSignatureData != null)
                {
                    string imageEncrypted = enroll.KtpSignature.Encrypt(Phrase.FileEncryption);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderSignature")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderSignature = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "Signature_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderSignature, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderSignature))
                        {
                            Directory.CreateDirectory(subPathFolderSignature);
                        }

                        filePath = subPathFolderSignature + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    if (photoSignatureData != null)
                    {
                        photoSignatureLog.CreatedById = photoSignatureData.CreatedById;
                        photoSignatureLog.CreatedByNpp = photoSignatureData.CreatedByNpp;
                        photoSignatureLog.CreatedByUid = photoSignatureData.CreatedByUid;
                        photoSignatureLog.CreatedByUnit = photoSignatureData.CreatedByUnit;
                        photoSignatureLog.CreatedTime = photoSignatureData.CreatedTime;
                        photoSignatureLog.FileName = photoSignatureData.FileName;
                        photoSignatureLog.Nik = photoSignatureData.Nik;
                        photoSignatureLog.PathFile = photoSignatureData.PathFile;
                    }

                    photoSignatureData.UpdatedById = Id;
                    photoSignatureData.UpdatedByNpp = npp;
                    photoSignatureData.UpdatedByUid = enroll.UID;
                    photoSignatureData.UpdatedTime = DateTime.Now;
                    photoSignatureData.IsActive = true;
                    photoSignatureData.IsDeleted = false;
                    photoSignatureData.Nik = enroll.KtpNIK;
                    photoSignatureData.FileName = fileName;
                    photoSignatureData.PathFile = filePath;
                }
                else
                {
                    stringPerubahan = stringPerubahan + "Data Signature Tidak Ditemukan" + " <br/>";
                }
                #endregion

                var photoCamLog = new Tbl_DataKTP_PhotoCam_Log();
                var photoCamData = await _profileRepository.GetPhotoCam(enroll.KtpNIK)
                        .ConfigureAwait(false);
                var exphotoCamData = photoCamData;

                #region update photo cam
                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoCam) && photoCamData != null)
                {
                    string imageEncrypted = enroll.KtpPhotoCam.Encrypt(Phrase.FileEncryption);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderWebcam")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string SubPathFolderPhotoCam = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "PhotoCam_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(SubPathFolderPhotoCam, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(SubPathFolderPhotoCam))
                        {
                            Directory.CreateDirectory(SubPathFolderPhotoCam);
                        }

                        filePath = SubPathFolderPhotoCam + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }
                    photoCamLog.CreatedById = photoCamData.CreatedById;
                    photoCamLog.CreatedByNpp = photoCamData.CreatedByNpp;
                    photoCamLog.CreatedByUid = photoCamData.CreatedByUid;
                    photoCamLog.CreatedByUnit = photoCamData.CreatedByUnit;
                    photoCamLog.CreatedTime = photoCamData.CreatedTime;
                    photoCamLog.FileName = photoCamData.FileName;
                    photoCamLog.Nik = photoCamData.Nik;
                    photoCamLog.PathFile = photoCamData.PathFile;

                    photoCamData.PathFile = filePath;
                    photoCamData.Nik = enroll.KtpNIK;
                    photoCamData.FileName = fileName;
                    photoCamData.IsActive = true;
                    photoCamData.IsDeleted = false;
                    photoCamData.UpdatedById = Id;
                    photoCamData.UpdatedByNpp = npp;
                    photoCamData.UpdatedByUid = enroll.UID;
                    photoCamData.UpdatedTime = DateTime.Now;
                }
                #endregion

                var exPhotoFinger = new List<Tbl_DataKTP_Finger>();
                var exPhotoFingerEmployee = new List<Tbl_DataKTP_Finger_Employee>();
                var photoFingerLogs = new List<Tbl_DataKTP_Finger_Log>();
                var photoFingers = new List<Tbl_DataKTP_Finger>();
                var photoFingersEmployee = new List<Tbl_DataKTP_Finger_Employee>();
                var photoFingersEmployeeLogs = new List<Tbl_DataKTP_Finger_Employee_Log>();

                #region finger
                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKanan))
                {
                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);

                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                    }

                    string imageEncrypted = enroll.KtpFingerKanan.Encrypt(Phrase.FileEncryption);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKanan.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    if (photoFingerData != null)
                    {
                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUid,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            //FileJari = photoFingerData.FileJari,
                            FileName = photoFingerData.FileName,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            TypeFinger = photoFingerData.TypeFinger
                        });

                        exPhotoFinger.Add(photoFingerData);

                        photoFingers.Add(new Tbl_DataKTP_Finger
                        {
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUid,
                            CreatedTime = photoFingerData.CreatedTime,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUid = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            //FileJari = photoFingerData.FileJari,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            TypeFinger = enroll.KtpTypeJariKanan
                        });
                    }

                    if (isEmployee)
                    {
                        if (photoFingerDataEmployee == null)
                        {
                            photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                //FileJari = photoFingerDataEmployee.FileJari,
                                FileName = photoFingerDataEmployee.FileName,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                TypeFinger = photoFingerDataEmployee.TypeFinger
                            });
                        };

                        exPhotoFingerEmployee.Add(photoFingerDataEmployee);

                        photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee
                        {
                            CreatedById = photoFingerDataEmployee.CreatedById,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                            CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                            CreatedTime = photoFingerDataEmployee.CreatedTime,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUid = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                            CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                            //FileJari = photoFingerDataEmployee.FileJari,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            TypeFinger = enroll.KtpTypeJariKanan
                        });
                    }
                }

                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKiri))
                {
                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);

                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                    }

                    string imageEncrypted = enroll.KtpFingerKiri.Encrypt(Phrase.FileEncryption);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKiri.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    if (photoFingerData != null)
                    {
                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUid,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            //FileJari = photoFingerData.FileJari,
                            FileName = photoFingerData.FileName,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            TypeFinger = photoFingerData.TypeFinger
                        });

                        exPhotoFinger.Add(photoFingerData);

                        photoFingers.Add(new Tbl_DataKTP_Finger
                        {
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUid,
                            CreatedTime = photoFingerData.CreatedTime,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUid = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            //FileJari = photoFingerData.FileJari,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            TypeFinger = enroll.KtpTypeJariKiri
                        });
                    }

                    if (isEmployee)
                    {
                        if (photoFingerDataEmployee == null)
                        {
                            photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                //FileJari = photoFingerDataEmployee.FileJari,
                                FileName = photoFingerDataEmployee.FileName,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                TypeFinger = photoFingerDataEmployee.TypeFinger
                            });
                        };

                        exPhotoFingerEmployee.Add(photoFingerDataEmployee);

                        photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee
                        {
                            CreatedById = photoFingerDataEmployee.CreatedById,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                            CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                            CreatedTime = photoFingerDataEmployee.CreatedTime,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUid = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                            CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                            //FileJari = photoFingerDataEmployee.FileJari,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            TypeFinger = enroll.KtpTypeJariKanan
                        });
                    }
                }
                #endregion

                var (status, msg) = await _enrollmentKTPRepository.InsertEnrollFlow2(cekKTP, logDemografi, photoKTPData, photoKtpLog, photoSignatureData,
                    photoSignatureLog, photoCamData, photoCamLog, photoFingers, photoFingersEmployee, photoFingerLogs, photoFingersEmployeeLogs, exPhotoKtp, exphotoSignatureData, exphotoCamData, exPhotoFinger, exPhotoFingerEmployee, dataReaderLog, dataNpp);

                #region Logging Reader Activity
                _ = _alatReaderRepository.CreateLogActivity2(dataReaderActivityLog);
                _ = _alatReaderRepository.CreateAlatReaderLog(dataReaderLog);
                #endregion

                if (status)
                {
                    return (_SuccessMessageConfig.NasabahSuksesUpdate, (int)ServiceResponseStatus.SUKSES, cekKTP.CIF);
                }
                else
                {
                    return (_ErrorMessageConfig.NasabahGagalEnroll, (int)ServiceResponseStatus.ERROR, "");
                }
            }
            else
            {
                #region Logging Reader Activity
                _ = _alatReaderRepository.CreateLogActivity2(dataReaderActivityLog);
                _ = _alatReaderRepository.CreateAlatReaderLog(dataReaderLog);
                #endregion

                return (_ErrorMessageConfig.DemografiTidakDitemukan, (int)ServiceResponseStatus.Data_Empty, "");
            }
            #endregion
        }

        public async Task<(string msg, int code, string cif)> UpdatesPhotoCam(EnrollKTP enroll, int Id, string npp,
            string unitCode, int unitId)
        {
            var cekKTP = await _profileRepository.GetDataDemografis(enroll.KtpNIK)
                .ConfigureAwait(false);

            string JamServer = DateTime.Now.ToString("ddMMyyyyHHmmss");
            var sysPathFolder = await _sysParameterRepository.GetPathFolder("PathFolderData");
            string pathFolder = sysPathFolder.Value;

            #region check UID
            var dataReader = await _dataReaderRepository.GetDatareaderUid(enroll.UID).ConfigureAwait(false);

            var dataReaderLog = new Tbl_MasterAlatReaderLog();
            var dataReaderActivityLog = new Tbl_MasterAlatReaderLogActvity();

            if (dataReader != null)
            {
                dataReaderLog = new Tbl_MasterAlatReaderLog
                {
                    CreatedBy_Id = Id,
                    CreatedTime = DateTime.Now,
                    IsActive = true,
                    IsDeleted = false,
                    Nik = enroll.KtpNIK,
                    PegawaiId = Id,
                    Serial_Number = dataReader.SN_Unit,
                    Type = "Updates Enroll",
                    Uid = enroll.UID
                };

                dataReaderActivityLog = new Tbl_MasterAlatReaderLogActvity
                {
                    CreatedBy_Id = Id,
                    IsActive = true,
                    IsDeleted = false,
                    KodeUnit = unitCode,
                    LastIP = enroll.IpAddress,
                    NIK = enroll.KtpNIK,
                    CreatedTime = DateTime.Now,
                    NppPegawai = npp,
                    PegawaiId = Id,
                    Type = "Updates Enroll",
                    UID = enroll.UID,
                    UnitId = unitId
                };
            }
            #endregion

            #region update data ktp
            if (cekKTP != null)
            {
                var photoCamLog = new Tbl_DataKTP_PhotoCam_Log();
                var photoCamData = await _profileRepository.GetPhotoCam(enroll.KtpNIK)
                        .ConfigureAwait(false);

                #region update photo cam
                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoCam) && photoCamData != null)
                {
                    string imageEncrypted = enroll.KtpPhotoCam.Encrypt(Phrase.FileEncryption);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderWebcam")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string SubPathFolderPhotoCam = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "PhotoCam_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(SubPathFolderPhotoCam, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(SubPathFolderPhotoCam))
                        {
                            Directory.CreateDirectory(SubPathFolderPhotoCam);
                        }

                        filePath = SubPathFolderPhotoCam + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }
                    photoCamLog.CreatedById = photoCamData.CreatedById;
                    photoCamLog.CreatedByNpp = photoCamData.CreatedByNpp;
                    photoCamLog.CreatedByUid = photoCamData.CreatedByUid;
                    photoCamLog.CreatedByUnit = photoCamData.CreatedByUnit;
                    photoCamLog.CreatedTime = photoCamData.CreatedTime;
                    photoCamLog.FileName = photoCamData.FileName;
                    photoCamLog.Nik = photoCamData.Nik;
                    photoCamLog.PathFile = photoCamData.PathFile;

                    photoCamData.PathFile = filePath;
                    photoCamData.Nik = enroll.KtpNIK;
                    photoCamData.FileName = fileName;
                    photoCamData.IsActive = true;
                    photoCamData.IsDeleted = false;
                    photoCamData.UpdatedById = Id;
                    photoCamData.UpdatedByNpp = npp;
                    photoCamData.UpdatedByUid = enroll.UID;
                    photoCamData.UpdatedTime = DateTime.Now;
                }
                #endregion

                _enrollmentKTPRepository.UpdatesPhotoCam(photoCamData, photoCamLog, dataReaderActivityLog, dataReaderLog);

                #region Logging Reader Activity
                _ = _alatReaderRepository.CreateLogActivity2(dataReaderActivityLog);
                _ = _alatReaderRepository.CreateAlatReaderLog(dataReaderLog);
                #endregion

                return (_SuccessMessageConfig.NasabahSuksesUpdate, (int)ServiceResponseStatus.SUKSES, cekKTP.CIF);
            }
            else
            {
                #region Logging Reader Activity
                _ = _alatReaderRepository.CreateLogActivity2(dataReaderActivityLog);
                _ = _alatReaderRepository.CreateAlatReaderLog(dataReaderLog);
                #endregion

                return (_ErrorMessageConfig.DemografiTidakDitemukan, (int)ServiceResponseStatus.Data_Empty, "");
            }
            #endregion

        }

        public async Task<(string msg, int code, string cif)> SubmitEnrollment(bool isHitSOA, ApiSOA ReqSoa, EnrollKTP enroll, int Id, string npp,
            string unitCode, int unitId)
        {
            bool isEmployee = false;
            var _empData = await _enrollmentKTPRepository.IsEmployee(enroll.KtpNIK);
            if (_empData != null)
            {
                isEmployee = true;
            }

            if (enroll.KtpTanggalLahir != null)
            {
                enroll.KtpTanggalLahir = enroll.KtpTanggalLahir.Replace(".", "");
                if (enroll.KtpTanggalLahir.Contains("/"))
                {
                    enroll.KtpTanggalLahir = enroll.KtpTanggalLahir.Replace("/", "-");
                }
                string[] arrayTanggl = enroll.KtpTanggalLahir.Split("-");
                string hari = "";
                string bulan = "";
                string tahun = "";

                if (arrayTanggl != null)
                {
                    if (arrayTanggl[0] != null)
                    {
                        if (arrayTanggl[0].Length != 2)
                        {
                            hari = "0" + arrayTanggl[0];

                        }
                        else
                        {
                            hari = arrayTanggl[0];

                        }
                    }

                    if (arrayTanggl[1] != null)
                    {
                        if (arrayTanggl[1].Length != 2)
                        {
                            bulan = "0" + arrayTanggl[1];

                        }
                        else
                        {
                            bulan = arrayTanggl[1];

                        }
                    }

                    if (arrayTanggl[2] != null)
                    {
                        tahun = arrayTanggl[2];
                    }
                }

                enroll.KtpTanggalLahir = hari + "-" + bulan + "-" + tahun;
            }

            const bool IsNewEnroll = true;
            string JamServer = DateTime.Now.ToString("ddMMyyyyHHmmss");
            bool IsNasabah = false;

            var cekKTP = await _profileRepository.GetDataDemografis(enroll.KtpNIK)
                .ConfigureAwait(false);

            if (cekKTP != null)
            {
                var logDemografi = new Tbl_DataKTP_Demografis_Log
                {
                    Agama = cekKTP.Agama,
                    Alamat = cekKTP.Alamat,
                    AlamatGoogle = cekKTP.AlamatGoogle,
                    AlamatLengkap = cekKTP.AlamatLengkap,
                    CreatedById = cekKTP.CreatedById,
                    CreatedByUID = cekKTP.CreatedByUID,
                    CreatedByUnitId = cekKTP.CreatedByUnitId,
                    CreatedTime = cekKTP.CreatedTime,
                    Desa = cekKTP.Desa,
                    GolonganDarah = cekKTP.GolonganDarah,
                    JenisKelamin = cekKTP.JenisKelamin,
                    Kecamatan = cekKTP.Kecamatan,
                    Kelurahan = cekKTP.Kelurahan,
                    Kewarganegaraan = cekKTP.Kewarganegaraan,
                    KodePos = cekKTP.KodePos,
                    Kota = cekKTP.Kota,
                    Latitude = cekKTP.Latitude,
                    Longitude = cekKTP.Longitude,
                    MasaBerlaku = cekKTP.MasaBerlaku,
                    Nama = cekKTP.Nama,
                    NIK = cekKTP.NIK,
                    Pekerjaan = cekKTP.Pekerjaan,
                    Provinsi = cekKTP.Provinsi,
                    RT = cekKTP.RT,
                    RW = cekKTP.RW,
                    StatusPerkawinan = cekKTP.StatusPerkawinan,
                    TanggalLahir = cekKTP.TanggalLahir,
                    TempatLahir = cekKTP.TempatLahir,
                    CIF = cekKTP.CIF,
                    CreatedByNpp = cekKTP.CreatedByNpp
                };

                var stringPerubahan = "";

                if (cekKTP.Nama != enroll.KtpNama)
                {
                    stringPerubahan = stringPerubahan + "NAMA : " + cekKTP.Nama + " -> " + enroll.KtpNama + " <br/>";
                    cekKTP.Nama = enroll.KtpNama;
                }

                if (cekKTP.TempatLahir != enroll.KtpTempatLahir)
                {
                    stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTP.TempatLahir + " -> " + enroll.KtpTempatLahir + " <br/>";
                    cekKTP.TempatLahir = enroll.KtpTempatLahir;
                }

                if (enroll.KtpTanggalLahir != null)
                {

                    if (cekKTP.TempatLahir != enroll.KtpTempatLahir)
                    {
                        stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTP.TanggalLahir + " -> " + enroll.KtpTanggalLahir + " <br/>";
                        cekKTP.TanggalLahir = DateTime.ParseExact(enroll.KtpTanggalLahir, "dd-MM-yyyy", CultureInfo.InvariantCulture);
                    }

                }

                if (cekKTP.JenisKelamin != enroll.KtpJanisKelamin)
                {
                    stringPerubahan = stringPerubahan + "JENIS KELAMIN : " + cekKTP.JenisKelamin + " -> " + enroll.KtpJanisKelamin + " <br/>";
                    cekKTP.JenisKelamin = enroll.KtpJanisKelamin;
                }

                if (cekKTP.GolonganDarah != enroll.KtpGolonganDarah)
                {
                    stringPerubahan = stringPerubahan + "GOLONGAN DARAH : " + cekKTP.GolonganDarah + " -> " + enroll.KtpGolonganDarah + " <br/>";
                    cekKTP.GolonganDarah = enroll.KtpGolonganDarah;
                }

                if (cekKTP.Alamat != enroll.KtpAlamat)
                {
                    stringPerubahan = stringPerubahan + "ALAMAT : " + cekKTP.Alamat + " -> " + enroll.KtpAlamat + " <br/>";
                    cekKTP.Alamat = enroll.KtpAlamat;
                }

                if (cekKTP.RT != enroll.KtpRT)
                {
                    stringPerubahan = stringPerubahan + "RT : " + cekKTP.RT + " -> " + enroll.KtpRT + " <br/>";
                    cekKTP.RT = enroll.KtpRT;
                }

                if (cekKTP.RW != enroll.KtpRW)
                {
                    stringPerubahan = stringPerubahan + "RW : " + cekKTP.RW + " -> " + enroll.KtpRW + " <br/>";
                    cekKTP.RW = enroll.KtpRW;
                }

                if (cekKTP.Kelurahan != enroll.KtpKelurahan)
                {
                    stringPerubahan = stringPerubahan + "KELURAHAN : " + cekKTP.Kelurahan + " -> " + enroll.KtpKelurahan + " <br/>";
                    cekKTP.Kelurahan = enroll.KtpKelurahan;
                }

                if (cekKTP.Kecamatan != enroll.KtpKecamatan)
                {
                    stringPerubahan = stringPerubahan + "KECAMATAN : " + cekKTP.Kecamatan + " -> " + enroll.KtpKecamatan + " <br/>";
                    cekKTP.Kecamatan = enroll.KtpKecamatan;
                }

                if (cekKTP.Kota != enroll.KtpKota)
                {
                    stringPerubahan = stringPerubahan + "KOTA/KABUPATEN : " + cekKTP.Kota + " -> " + enroll.KtpKota + " <br/>";
                    cekKTP.Kota = enroll.KtpKota;
                }

                if (cekKTP.Provinsi != enroll.KtpProvinsi)
                {
                    stringPerubahan = stringPerubahan + "PROVINSI  : " + cekKTP.Provinsi + " -> " + enroll.KtpProvinsi + " <br/>";
                    cekKTP.Provinsi = enroll.KtpProvinsi;
                }

                if (cekKTP.Agama != enroll.KtpAgama)
                {
                    stringPerubahan = stringPerubahan + "AGAMA  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTP.Agama = enroll.KtpAgama;
                }

                if (cekKTP.StatusPerkawinan != enroll.KtpStatusPerkawinan)
                {
                    stringPerubahan = stringPerubahan + "STATUS PERKAWINAN  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTP.StatusPerkawinan = enroll.KtpStatusPerkawinan;
                }

                if (cekKTP.Pekerjaan != enroll.KtpPekerjaan)
                {
                    stringPerubahan = stringPerubahan + "PEKERJAAN  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTP.Pekerjaan = enroll.KtpPekerjaan;
                }

                if (cekKTP.Kewarganegaraan != enroll.KtpKewarganegaraan)
                {
                    stringPerubahan = stringPerubahan + "KEWARGANEGARAAN  : " + cekKTP.Kewarganegaraan + " -> " + enroll.KtpKewarganegaraan + " <br/>";
                    cekKTP.Kewarganegaraan = enroll.KtpKewarganegaraan;
                }
                if (cekKTP.MasaBerlaku != enroll.KtpMasaBerlaku)
                {
                    stringPerubahan = stringPerubahan + "MASA BERLAKU  : " + cekKTP.MasaBerlaku + " -> " + enroll.KtpMasaBerlaku + " <br/>";
                    cekKTP.MasaBerlaku = enroll.KtpMasaBerlaku;
                }

                cekKTP.UpdatedTime = DateTime.Now;
                cekKTP.UpdatedById = Id;
                cekKTP.UpdatedByUID = enroll.UID;
                cekKTP.UpdatedByUnitCode = unitCode;
                cekKTP.UpdatedByUnitId = unitId;

                await _profileRepository.UpdateDataDemografis(cekKTP)
                    .ConfigureAwait(false);

                if (string.IsNullOrWhiteSpace(stringPerubahan))
                {
                    return (_ErrorMessageConfig.NasabahPernahEnroll, (int)EnrollStatus.Sudah_di_enroll_sebelumnya, "");
                }

                _profileRepository.InsertDemografiLog(logDemografi);

                return (stringPerubahan, (int)EnrollStatus.Berhasil_mengubah_beberapa_perubahan, "");
            }

            if (IsNewEnroll)
            {
                if (enroll?.KtpNIK == null) return (_ErrorMessageConfig.InputTidakLengkap, (int)EnrollStatus.Inputan_tidak_lengkap, "");

                #region hit soa and logging it
                var cifData = new ApiSOAResponse();

                if (isHitSOA == true)
                {
                    cifData = await _cifService.GetSOAByCif(ReqSoa)
                    .ConfigureAwait(false);

                    var status = 0;
                    if (cifData.cif != null)
                    {
                        status = 1;
                    }

                    var _log = new Tbl_ThirdPartyLog
                    {
                        FeatureName = "SubmitEnrollment",
                        HostUrl = ReqSoa.host,
                        Request = Newtonsoft.Json.JsonConvert.SerializeObject(ReqSoa),
                        Status = status,
                        Response = Newtonsoft.Json.JsonConvert.SerializeObject(cifData),
                        CreatedDate = System.DateTime.Now,
                        CreatedBy = npp
                    };

                    _ = _enrollmentKTPRepository.CreateThirdPartyLog(_log);
                }
                else
                {
                    var res = await _cifService.GetCIF(
                        new NikDto { Nik = enroll.KtpNIK },
                        new NikDtoUrl { baseUrl = ReqSoa.baseUrlNonSoa, endpoint = ReqSoa.UrlEndPointNonSoa });
                    if (res.Data == null)
                    {
                        cifData.cif = null;
                    }
                    else
                    {
                        cifData.cif = res.Data.Cif;
                    };
                }
                #endregion

                if (cifData.cif != null)
                {
                    IsNasabah = true;
                    var str = cifData.cif.Trim();
                    cifData.cif = str;
                }

                var sysPathFolder = await _sysParameterRepository.GetPathFolder("PathFolderData");
                string pathFolder = sysPathFolder.Value;

                var dataDemografis = new Tbl_DataKTP_Demografis();

                var dataDemografisLog = new Tbl_DataKTP_Demografis_Log();

                var dataNpp = new Tbl_Mapping_Pegawai_KTP();

                if (cekKTP != null)
                {
                    dataDemografisLog = new Tbl_DataKTP_Demografis_Log
                    {
                        Agama = cekKTP.Agama,
                        Alamat = cekKTP.Alamat,
                        AlamatGoogle = cekKTP.AlamatGoogle,
                        AlamatLengkap = cekKTP.AlamatLengkap,
                        CreatedById = cekKTP.CreatedById,
                        CreatedByUID = cekKTP.CreatedByUID,
                        CreatedByUnitId = cekKTP.CreatedByUnitId,
                        CreatedTime = cekKTP.CreatedTime,
                        Desa = cekKTP.Desa,
                        GolonganDarah = cekKTP.GolonganDarah,
                        JenisKelamin = cekKTP.JenisKelamin,
                        Kecamatan = cekKTP.Kecamatan,
                        Kelurahan = cekKTP.Kelurahan,
                        Kewarganegaraan = cekKTP.Kewarganegaraan,
                        KodePos = cekKTP.KodePos,
                        Kota = cekKTP.Kota,
                        Latitude = cekKTP.Latitude,
                        Longitude = cekKTP.Longitude,
                        MasaBerlaku = cekKTP.MasaBerlaku,
                        Nama = cekKTP.Nama,
                        NIK = cekKTP.NIK,
                        Pekerjaan = cekKTP.Pekerjaan,
                        Provinsi = cekKTP.Provinsi,
                        RT = cekKTP.RT,
                        RW = cekKTP.RW,
                        StatusPerkawinan = cekKTP.StatusPerkawinan,
                        TanggalLahir = cekKTP.TanggalLahir,
                        TempatLahir = cekKTP.TempatLahir
                    };

                    cekKTP.Agama = enroll.KtpAgama;
                    cekKTP.Alamat = enroll.KtpAlamat;
                    cekKTP.AlamatGoogle = enroll.KtpAlamatConvertLatlong;
                    cekKTP.AlamatLengkap = enroll.KtpAlamatConvertLengkap;
                    if (string.IsNullOrWhiteSpace(cifData.cif))
                    {
                        cekKTP.CIF = cifData.cif;
                    }
                    cekKTP.GolonganDarah = enroll.KtpGolonganDarah;
                    cekKTP.JenisKelamin = enroll.KtpJanisKelamin;
                    cekKTP.Kecamatan = enroll.KtpKecamatan;
                    cekKTP.Kelurahan = enroll.KtpKelurahan;
                    cekKTP.Kewarganegaraan = enroll.KtpKewarganegaraan;
                    cekKTP.KodePos = enroll.KtpKodePos;
                    cekKTP.Kota = enroll.KtpKota;
                    cekKTP.Latitude = enroll.KtpLatitude;
                    cekKTP.Longitude = enroll.KtpLongitude;
                    cekKTP.MasaBerlaku = enroll.KtpMasaBerlaku;
                    cekKTP.Nama = enroll.KtpNama;
                    cekKTP.NIK = enroll.KtpNIK;
                    cekKTP.Pekerjaan = enroll.KtpPekerjaan;
                    cekKTP.Provinsi = enroll.KtpProvinsi;
                    cekKTP.RT = enroll.KtpRT;
                    cekKTP.RW = enroll.KtpRW;
                    cekKTP.StatusPerkawinan = enroll.KtpStatusPerkawinan;
                    cekKTP.TanggalLahir = string.IsNullOrWhiteSpace(enroll.KtpTanggalLahir) ? null : DateTime.ParseExact(enroll.KtpTanggalLahir, "dd-MM-yyyy", CultureInfo.InvariantCulture);
                    cekKTP.TempatLahir = enroll.KtpTempatLahir;
                    cekKTP.UpdatedById = Id;
                    cekKTP.UpdatedByNpp = npp;
                    cekKTP.UpdatedByUID = enroll.UID;
                    cekKTP.UpdatedTime = DateTime.Now;
                    cekKTP.UpdatedByUnitCode = unitCode;
                    cekKTP.UpdatedByUnitId = unitId;
                }
                else
                {
                    dataDemografis = new Tbl_DataKTP_Demografis
                    {
                        Agama = enroll.KtpAgama,
                        Alamat = enroll.KtpAlamat,
                        AlamatGoogle = enroll.KtpAlamatConvertLatlong,
                        AlamatLengkap = enroll.KtpAlamatConvertLengkap,
                        CIF = (cifData.cif),
                        NIK = enroll.KtpNIK,
                        CreatedById = Id,
                        IsActive = true,
                        IsDeleted = false,
                        JenisKelamin = enroll.KtpJanisKelamin,
                        Kecamatan = enroll.KtpKecamatan,
                        Kelurahan = enroll.KtpKelurahan,
                        CreatedByUID = enroll.UID,
                        CreatedTime = DateTime.Now,
                        GolonganDarah = enroll.KtpGolonganDarah,
                        Kewarganegaraan = enroll.KtpKewarganegaraan,
                        KodePos = enroll.KtpKodePos,
                        Kota = enroll.KtpKota,
                        Latitude = enroll.KtpLatitude,
                        Longitude = enroll.KtpLongitude,
                        MasaBerlaku = enroll.KtpMasaBerlaku,
                        Nama = enroll.KtpNama,
                        Pekerjaan = enroll.KtpPekerjaan,
                        Provinsi = enroll.KtpProvinsi,
                        RT = enroll.KtpRT,
                        RW = enroll.KtpRW,
                        StatusPerkawinan = enroll.KtpStatusPerkawinan,
                        TanggalLahir = string.IsNullOrWhiteSpace(enroll.KtpTanggalLahir) ? null : DateTime.ParseExact(enroll.KtpTanggalLahir, "dd-MM-yyyy", CultureInfo.InvariantCulture),
                        TempatLahir = enroll.KtpTempatLahir,
                        CreatedByNpp = npp,
                        CreatedByUnitCode = unitCode,
                        CreatedByUnitId = unitId,
                        IsVerified = false,
                        IsNasabahTemp = string.IsNullOrWhiteSpace(cifData.cif)
                    };

                    if (isEmployee)
                    {
                        dataNpp = new Tbl_Mapping_Pegawai_KTP
                        {
                            CreatedById = Id,
                            NIK = enroll.KtpNIK,
                            Npp = _empData.Npp,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now
                        };
                    }
                }

                var exPhotoKtp = new Tbl_DataKTP_Photo();

                var photoKtpLog = new Tbl_DataKTP_Photo_Log();

                var photoKtp = new Tbl_DataKTP_Photo();

                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoKTP))
                {
                    var photoKTPData = await _profileRepository.GetPhotoKtp(enroll.KtpNIK)
                        .ConfigureAwait(false);

                    string imageEncrypted = enroll.KtpPhotoKTP.Encrypt(Phrase.FileEncryption);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderPhoto")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderFoto = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "Foto_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderFoto, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {

                        if (!Directory.Exists(subPathFolderFoto))
                        {
                            Directory.CreateDirectory(subPathFolderFoto);
                        }

                        filePath = subPathFolderFoto + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    if (photoKTPData != null)
                    {
                        photoKtpLog.CreatedById = photoKTPData.CreatedById;
                        photoKtpLog.CreatedByNpp = photoKTPData.CreatedByNpp;
                        photoKtpLog.CreatedByUid = photoKTPData.CreatedByUid;
                        photoKtpLog.CreatedByUnit = photoKTPData.CreatedByUnit;
                        photoKtpLog.CreatedTime = photoKTPData.CreatedTime;
                        photoKtpLog.FileName = photoKTPData.FileName;
                        photoKtpLog.Nik = photoKTPData.Nik;
                        photoKtpLog.PathFile = photoKTPData.PathFile;

                        exPhotoKtp = photoKTPData;
                    }

                    photoKtp = new Tbl_DataKTP_Photo
                    {
                        PathFile = filePath,
                        Nik = enroll.KtpNIK,
                        FileName = fileName,
                        IsActive = true,
                        IsDeleted = false,
                        CreatedById = Id,
                        CreatedByNpp = npp,
                        CreatedByUid = enroll.UID,
                        CreatedTime = DateTime.Now
                    };
                }

                var exPhotoSignature = new Tbl_DataKTP_Signature();

                var photoSignatureLog = new Tbl_DataKTP_Signature_Log();

                var photoSignature = new Tbl_DataKTP_Signature();

                if (!string.IsNullOrWhiteSpace(enroll.KtpSignature))
                {
                    var photoSignatureData = await _profileRepository.GetPhotoSignature(enroll.KtpNIK)
                        .ConfigureAwait(false);

                    string imageEncrypted = enroll.KtpSignature.Encrypt(Phrase.FileEncryption);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderSignature")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderSignature = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "Signature_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderSignature, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderSignature))
                        {
                            Directory.CreateDirectory(subPathFolderSignature);
                        }

                        filePath = subPathFolderSignature + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    if (photoSignatureData != null)
                    {
                        photoSignatureLog.CreatedById = photoSignatureData.CreatedById;
                        photoSignatureLog.CreatedByNpp = photoSignatureData.CreatedByNpp;
                        photoSignatureLog.CreatedByUid = photoSignatureData.CreatedByUid;
                        photoSignatureLog.CreatedByUnit = photoSignatureData.CreatedByUnit;
                        photoSignatureLog.CreatedTime = photoSignatureData.CreatedTime;
                        photoSignatureLog.FileName = photoSignatureData.FileName;
                        photoSignatureLog.Nik = photoSignatureData.Nik;
                        photoSignatureLog.PathFile = photoSignatureData.PathFile;

                        exPhotoSignature = photoSignatureData;
                    }

                    photoSignature = new Tbl_DataKTP_Signature
                    {
                        CreatedById = Id,
                        CreatedByNpp = npp,
                        IsActive = true,
                        IsDeleted = false,
                        Nik = enroll.KtpNIK,
                        FileName = fileName,
                        CreatedByUid = enroll.UID,
                        CreatedTime = DateTime.Now,
                        PathFile = filePath
                    };
                }

                var exPhotoCam = new Tbl_DataKTP_PhotoCam();

                var photoCamLog = new Tbl_DataKTP_PhotoCam_Log();

                var photoCam = new Tbl_DataKTP_PhotoCam();

                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoCam))
                {
                    var photoCamData = await _profileRepository.GetPhotoCam(enroll.KtpNIK)
                        .ConfigureAwait(false);

                    string imageEncrypted = enroll.KtpPhotoCam.Encrypt(Phrase.FileEncryption);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderWebcam")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string SubPathFolderPhotoCam = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "PhotoCam_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(SubPathFolderPhotoCam, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(SubPathFolderPhotoCam))
                        {
                            Directory.CreateDirectory(SubPathFolderPhotoCam);
                        }

                        filePath = SubPathFolderPhotoCam + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    if (photoCamData != null)
                    {
                        photoCamLog.CreatedById = photoCamData.CreatedById;
                        photoCamLog.CreatedByNpp = photoCamData.CreatedByNpp;
                        photoCamLog.CreatedByUid = photoCamData.CreatedByUid;
                        photoCamLog.CreatedByUnit = photoCamData.CreatedByUnit;
                        photoCamLog.CreatedTime = photoCamData.CreatedTime;
                        photoCamLog.FileName = photoCamData.FileName;
                        photoCamLog.Nik = photoCamData.Nik;
                        photoCamLog.PathFile = photoCamData.PathFile;

                        exPhotoCam = photoCamData;
                    }

                    photoCam = new Tbl_DataKTP_PhotoCam
                    {
                        PathFile = filePath,//
                        Nik = enroll.KtpNIK,
                        FileName = fileName,//
                        CreatedTime = DateTime.Now,
                        CreatedById = Id,
                        IsActive = true,
                        IsDeleted = false,
                        CreatedByNpp = npp,
                        CreatedByUid = enroll.UID
                    };
                }

                var exPhotoFinger = new List<Tbl_DataKTP_Finger>();

                var exPhotoFingerEmployee = new List<Tbl_DataKTP_Finger_Employee>();

                var photoFingerLogs = new List<Tbl_DataKTP_Finger_Log>();

                var photoFingers = new List<Tbl_DataKTP_Finger>();

                var photoFingersEmployee = new List<Tbl_DataKTP_Finger_Employee>();

                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKanan))
                {
                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                            .ConfigureAwait(false);
                    }

                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);

                    string imageEncrypted = enroll.KtpFingerKanan.Encrypt(Phrase.FileEncryption);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKanan.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    if (photoFingerData != null)
                    {
                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUid,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            //FileJari = photoFingerData.FileJari,
                            FileName = photoFingerData.FileName,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            TypeFinger = photoFingerData.TypeFinger
                        });

                        exPhotoFinger.Add(photoFingerData);
                    }

                    photoFingers.Add(new Tbl_DataKTP_Finger
                    {
                        CreatedById = Id,
                        IsActive = true,
                        IsDeleted = false,
                        Nik = enroll.KtpNIK,
                        PathFile = filePath,//
                        CreatedByNpp = npp,
                        CreatedByUid = enroll.UID,
                        CreatedTime = DateTime.Now,
                        FileName = fileName,//
                        TypeFinger = enroll.KtpTypeJariKanan
                    });

                    if (isEmployee)
                    {
                        photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,//
                            CreatedByNpp = npp,
                            CreatedByUid = enroll.UID,
                            CreatedTime = DateTime.Now,
                            FileName = fileName,//
                            TypeFinger = enroll.KtpTypeJariKanan
                        });
                    }
                }

                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKiri))
                {
                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                            .ConfigureAwait(false);
                    }

                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);

                    string imageEncrypted = enroll.KtpFingerKiri.Encrypt(Phrase.FileEncryption);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKiri.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    if (photoFingerData != null)
                    {
                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUid,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            //FileJari = photoFingerData.FileJari,
                            FileName = photoFingerData.FileName,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            TypeFinger = photoFingerData.TypeFinger
                        });

                        exPhotoFinger.Add(photoFingerData);
                    }

                    photoFingers.Add(new Tbl_DataKTP_Finger
                    {
                        CreatedById = Id,
                        IsActive = true,
                        IsDeleted = false,
                        Nik = enroll.KtpNIK,
                        PathFile = filePath,//
                        CreatedByNpp = npp,
                        CreatedByUid = enroll.UID,
                        CreatedTime = DateTime.Now,
                        FileName = fileName,//
                        TypeFinger = enroll.KtpTypeJariKiri
                    });

                    if (isEmployee)
                    {
                        photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,//
                            CreatedByNpp = npp,
                            CreatedByUid = enroll.UID,
                            CreatedTime = DateTime.Now,
                            FileName = fileName,//
                            TypeFinger = enroll.KtpTypeJariKiri
                        });
                    }
                }

                // to do: alat reader log
                var dataReader = await _dataReaderRepository.GetDatareaderUid(enroll.UID).ConfigureAwait(false);

                var dataReaderLog = new Tbl_MasterAlatReaderLog();

                if (dataReader != null)
                {
                    dataReaderLog = new Tbl_MasterAlatReaderLog
                    {
                        CreatedBy_Id = Id,
                        CreatedTime = DateTime.Now,
                        IsActive = true,
                        IsDeleted = false,
                        Nik = enroll.KtpNIK,
                        PegawaiId = Id,
                        Serial_Number = dataReader.SN_Unit,
                        Type = "Enroll",
                        Uid = enroll.UID
                    };
                }

                _enrollmentKTPRepository.InsertEnrollFlow(dataDemografis, dataDemografisLog, photoKtp, photoKtpLog, photoSignature, photoSignatureLog,
                    photoCam, photoCamLog, photoFingers, photoFingerLogs, exPhotoKtp, exPhotoSignature, exPhotoCam, exPhotoFinger, dataNpp, dataReaderLog, photoFingersEmployee, exPhotoFingerEmployee);

                await _alatReaderRepository.CreateLogActivity2(new Tbl_MasterAlatReaderLogActvity
                {
                    CreatedBy_Id = Id,
                    IsActive = true,
                    IsDeleted = false,
                    KodeUnit = unitCode,
                    LastIP = enroll.IpAddress,
                    NIK = enroll.KtpNIK,
                    CreatedTime = DateTime.Now,
                    NppPegawai = npp,
                    PegawaiId = Id,
                    Type = "Enroll",
                    UID = enroll.UID,
                    UnitId = unitId
                });
            }

            if (IsNasabah)
            {
                return (_SuccessMessageConfig.NasabahSuksesEnrollNasabah, (int)EnrollStatus.Nasabah_Berhasil_di_enroll, cekKTP.CIF);
            }
            else
            {
                return (_SuccessMessageConfig.NasabahSuksesEnrollNonNasabah, (int)EnrollStatus.Nasabah_Berhasil_di_enroll, cekKTP.CIF);
            }
        }

        public async Task<(string msg, int code, string cif)> SubmitEnrollmentFingerEncryptedOnly(bool isHitSOA, ApiSOA ReqSoa, EnrollKTP enroll, int Id, string npp,
            string unitCode, int unitId)
        {
            bool isEmployee = false;
            var _empData = await _enrollmentKTPRepository.IsEmployee(enroll.KtpNIK);
            if (_empData != null)
            {
                isEmployee = true;
            }

            if (enroll.KtpTanggalLahir != null)
            {
                enroll.KtpTanggalLahir = enroll.KtpTanggalLahir.Replace(".", "");
                if (enroll.KtpTanggalLahir.Contains("/"))
                {
                    enroll.KtpTanggalLahir = enroll.KtpTanggalLahir.Replace("/", "-");
                }
                string[] arrayTanggl = enroll.KtpTanggalLahir.Split("-");
                string hari = "";
                string bulan = "";
                string tahun = "";

                if (arrayTanggl != null)
                {
                    if (arrayTanggl[0] != null)
                    {
                        if (arrayTanggl[0].Length != 2)
                        {
                            hari = "0" + arrayTanggl[0];

                        }
                        else
                        {
                            hari = arrayTanggl[0];

                        }
                    }

                    if (arrayTanggl[1] != null)
                    {
                        if (arrayTanggl[1].Length != 2)
                        {
                            bulan = "0" + arrayTanggl[1];

                        }
                        else
                        {
                            bulan = arrayTanggl[1];

                        }
                    }

                    if (arrayTanggl[2] != null)
                    {
                        tahun = arrayTanggl[2];
                    }
                }

                enroll.KtpTanggalLahir = hari + "-" + bulan + "-" + tahun;
            }

            const bool IsNewEnroll = true;
            string JamServer = DateTime.Now.ToString("ddMMyyyyHHmmss");
            bool IsNasabah = false;

            var cekKTP = await _profileRepository.GetDataDemografis(enroll.KtpNIK)
                .ConfigureAwait(false);

            if (cekKTP != null)
            {
                var logDemografi = new Tbl_DataKTP_Demografis_Log
                {
                    Agama = cekKTP.Agama,
                    Alamat = cekKTP.Alamat,
                    AlamatGoogle = cekKTP.AlamatGoogle,
                    AlamatLengkap = cekKTP.AlamatLengkap,
                    CreatedById = cekKTP.CreatedById,
                    CreatedByUID = cekKTP.CreatedByUID,
                    CreatedByUnitId = cekKTP.CreatedByUnitId,
                    CreatedTime = cekKTP.CreatedTime,
                    Desa = cekKTP.Desa,
                    GolonganDarah = cekKTP.GolonganDarah,
                    JenisKelamin = cekKTP.JenisKelamin,
                    Kecamatan = cekKTP.Kecamatan,
                    Kelurahan = cekKTP.Kelurahan,
                    Kewarganegaraan = cekKTP.Kewarganegaraan,
                    KodePos = cekKTP.KodePos,
                    Kota = cekKTP.Kota,
                    Latitude = cekKTP.Latitude,
                    Longitude = cekKTP.Longitude,
                    MasaBerlaku = cekKTP.MasaBerlaku,
                    Nama = cekKTP.Nama,
                    NIK = cekKTP.NIK,
                    Pekerjaan = cekKTP.Pekerjaan,
                    Provinsi = cekKTP.Provinsi,
                    RT = cekKTP.RT,
                    RW = cekKTP.RW,
                    StatusPerkawinan = cekKTP.StatusPerkawinan,
                    TanggalLahir = cekKTP.TanggalLahir,
                    TempatLahir = cekKTP.TempatLahir,
                    CIF = cekKTP.CIF,
                    CreatedByNpp = cekKTP.CreatedByNpp
                };

                var stringPerubahan = "";

                if (cekKTP.Nama != enroll.KtpNama)
                {
                    stringPerubahan = stringPerubahan + "NAMA : " + cekKTP.Nama + " -> " + enroll.KtpNama + " <br/>";
                    cekKTP.Nama = enroll.KtpNama;
                }

                if (cekKTP.TempatLahir != enroll.KtpTempatLahir)
                {
                    stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTP.TempatLahir + " -> " + enroll.KtpTempatLahir + " <br/>";
                    cekKTP.TempatLahir = enroll.KtpTempatLahir;
                }

                if (enroll.KtpTanggalLahir != null)
                {

                    if (cekKTP.TempatLahir != enroll.KtpTempatLahir)
                    {
                        stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTP.TanggalLahir + " -> " + enroll.KtpTanggalLahir + " <br/>";
                        cekKTP.TanggalLahir = DateTime.ParseExact(enroll.KtpTanggalLahir, "dd-MM-yyyy", CultureInfo.InvariantCulture);
                    }

                }

                if (cekKTP.JenisKelamin != enroll.KtpJanisKelamin)
                {
                    stringPerubahan = stringPerubahan + "JENIS KELAMIN : " + cekKTP.JenisKelamin + " -> " + enroll.KtpJanisKelamin + " <br/>";
                    cekKTP.JenisKelamin = enroll.KtpJanisKelamin;
                }

                if (cekKTP.GolonganDarah != enroll.KtpGolonganDarah)
                {
                    stringPerubahan = stringPerubahan + "GOLONGAN DARAH : " + cekKTP.GolonganDarah + " -> " + enroll.KtpGolonganDarah + " <br/>";
                    cekKTP.GolonganDarah = enroll.KtpGolonganDarah;
                }

                if (cekKTP.Alamat != enroll.KtpAlamat)
                {
                    stringPerubahan = stringPerubahan + "ALAMAT : " + cekKTP.Alamat + " -> " + enroll.KtpAlamat + " <br/>";
                    cekKTP.Alamat = enroll.KtpAlamat;
                }

                if (cekKTP.RT != enroll.KtpRT)
                {
                    stringPerubahan = stringPerubahan + "RT : " + cekKTP.RT + " -> " + enroll.KtpRT + " <br/>";
                    cekKTP.RT = enroll.KtpRT;
                }

                if (cekKTP.RW != enroll.KtpRW)
                {
                    stringPerubahan = stringPerubahan + "RW : " + cekKTP.RW + " -> " + enroll.KtpRW + " <br/>";
                    cekKTP.RW = enroll.KtpRW;
                }

                if (cekKTP.Kelurahan != enroll.KtpKelurahan)
                {
                    stringPerubahan = stringPerubahan + "KELURAHAN : " + cekKTP.Kelurahan + " -> " + enroll.KtpKelurahan + " <br/>";
                    cekKTP.Kelurahan = enroll.KtpKelurahan;
                }

                if (cekKTP.Kecamatan != enroll.KtpKecamatan)
                {
                    stringPerubahan = stringPerubahan + "KECAMATAN : " + cekKTP.Kecamatan + " -> " + enroll.KtpKecamatan + " <br/>";
                    cekKTP.Kecamatan = enroll.KtpKecamatan;
                }

                if (cekKTP.Kota != enroll.KtpKota)
                {
                    stringPerubahan = stringPerubahan + "KOTA/KABUPATEN : " + cekKTP.Kota + " -> " + enroll.KtpKota + " <br/>";
                    cekKTP.Kota = enroll.KtpKota;
                }

                if (cekKTP.Provinsi != enroll.KtpProvinsi)
                {
                    stringPerubahan = stringPerubahan + "PROVINSI  : " + cekKTP.Provinsi + " -> " + enroll.KtpProvinsi + " <br/>";
                    cekKTP.Provinsi = enroll.KtpProvinsi;
                }

                if (cekKTP.Agama != enroll.KtpAgama)
                {
                    stringPerubahan = stringPerubahan + "AGAMA  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTP.Agama = enroll.KtpAgama;
                }

                if (cekKTP.StatusPerkawinan != enroll.KtpStatusPerkawinan)
                {
                    stringPerubahan = stringPerubahan + "STATUS PERKAWINAN  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTP.StatusPerkawinan = enroll.KtpStatusPerkawinan;
                }

                if (cekKTP.Pekerjaan != enroll.KtpPekerjaan)
                {
                    stringPerubahan = stringPerubahan + "PEKERJAAN  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTP.Pekerjaan = enroll.KtpPekerjaan;
                }

                if (cekKTP.Kewarganegaraan != enroll.KtpKewarganegaraan)
                {
                    stringPerubahan = stringPerubahan + "KEWARGANEGARAAN  : " + cekKTP.Kewarganegaraan + " -> " + enroll.KtpKewarganegaraan + " <br/>";
                    cekKTP.Kewarganegaraan = enroll.KtpKewarganegaraan;
                }
                if (cekKTP.MasaBerlaku != enroll.KtpMasaBerlaku)
                {
                    stringPerubahan = stringPerubahan + "MASA BERLAKU  : " + cekKTP.MasaBerlaku + " -> " + enroll.KtpMasaBerlaku + " <br/>";
                    cekKTP.MasaBerlaku = enroll.KtpMasaBerlaku;
                }

                cekKTP.UpdatedTime = DateTime.Now;
                cekKTP.UpdatedById = Id;
                cekKTP.UpdatedByUID = enroll.UID;
                cekKTP.UpdatedByUnitCode = unitCode;
                cekKTP.UpdatedByUnitId = unitId;

                await _profileRepository.UpdateDataDemografis(cekKTP)
                    .ConfigureAwait(false);

                if (string.IsNullOrWhiteSpace(stringPerubahan))
                {
                    return (_ErrorMessageConfig.NasabahPernahEnroll, (int)EnrollStatus.Sudah_di_enroll_sebelumnya, "");
                }

                _profileRepository.InsertDemografiLog(logDemografi);

                return (stringPerubahan, (int)EnrollStatus.Berhasil_mengubah_beberapa_perubahan, "");
            }

            if (IsNewEnroll)
            {
                if (enroll?.KtpNIK == null) return (_ErrorMessageConfig.InputTidakLengkap, (int)EnrollStatus.Inputan_tidak_lengkap, "");

                var cifData = new ApiSOAResponse();
                #region Hit SOA And Loggging it
                if (isHitSOA == true)
                {
                    cifData = await _cifService.GetSOAByCif(ReqSoa)
                    .ConfigureAwait(false);

                    var status = 0;
                    if (cifData.cif != null)
                    {
                        status = 1;
                    }

                    var _log = new Tbl_ThirdPartyLog
                    {
                        FeatureName = "SubmitEnrollmentFingerEncryptedOnly",
                        HostUrl = ReqSoa.host,
                        Request = Newtonsoft.Json.JsonConvert.SerializeObject(ReqSoa),
                        Status = status,
                        Response = Newtonsoft.Json.JsonConvert.SerializeObject(cifData),
                        CreatedDate = System.DateTime.Now,
                        CreatedBy = npp
                    };

                    _ = _enrollmentKTPRepository.CreateThirdPartyLog(_log);
                }
                else
                {
                    try
                    {
                        var res = await _cifService.GetCIF(new NikDto { Nik = enroll.KtpNIK },
                        new NikDtoUrl { baseUrl = ReqSoa.baseUrlNonSoa, endpoint = ReqSoa.UrlEndPointNonSoa });
                        if (res.Data == null)
                        {
                            cifData.cif = null;
                        }
                        else
                        {
                            cifData.cif = res.Data.Cif;
                        };
                    }
                    catch (Exception ex)
                    {
                        cifData.cif = null;
                    }


                }
                #endregion

                if (!String.IsNullOrEmpty(cifData.cif))
                {
                    IsNasabah = true;
                    cifData.cif = cifData.cif.Trim();
                }

                var sysPathFolder = await _sysParameterRepository.GetPathFolder("PathFolderData");
                string pathFolder = sysPathFolder.Value;

                var dataDemografis = new Tbl_DataKTP_Demografis();

                var dataDemografisLog = new Tbl_DataKTP_Demografis_Log();

                var dataNpp = new Tbl_Mapping_Pegawai_KTP();

                if (cekKTP != null)
                {
                    dataDemografisLog = new Tbl_DataKTP_Demografis_Log
                    {
                        Agama = cekKTP.Agama,
                        Alamat = cekKTP.Alamat,
                        AlamatGoogle = cekKTP.AlamatGoogle,
                        AlamatLengkap = cekKTP.AlamatLengkap,
                        CreatedById = cekKTP.CreatedById,
                        CreatedByUID = cekKTP.CreatedByUID,
                        CreatedByUnitId = cekKTP.CreatedByUnitId,
                        CreatedTime = cekKTP.CreatedTime,
                        Desa = cekKTP.Desa,
                        GolonganDarah = cekKTP.GolonganDarah,
                        JenisKelamin = cekKTP.JenisKelamin,
                        Kecamatan = cekKTP.Kecamatan,
                        Kelurahan = cekKTP.Kelurahan,
                        Kewarganegaraan = cekKTP.Kewarganegaraan,
                        KodePos = cekKTP.KodePos,
                        Kota = cekKTP.Kota,
                        Latitude = cekKTP.Latitude,
                        Longitude = cekKTP.Longitude,
                        MasaBerlaku = cekKTP.MasaBerlaku,
                        Nama = cekKTP.Nama,
                        NIK = cekKTP.NIK,
                        Pekerjaan = cekKTP.Pekerjaan,
                        Provinsi = cekKTP.Provinsi,
                        RT = cekKTP.RT,
                        RW = cekKTP.RW,
                        StatusPerkawinan = cekKTP.StatusPerkawinan,
                        TanggalLahir = cekKTP.TanggalLahir,
                        TempatLahir = cekKTP.TempatLahir
                    };

                    cekKTP.Agama = enroll.KtpAgama;
                    cekKTP.Alamat = enroll.KtpAlamat;
                    cekKTP.AlamatGoogle = enroll.KtpAlamatConvertLatlong;
                    cekKTP.AlamatLengkap = enroll.KtpAlamatConvertLengkap;
                    if (string.IsNullOrWhiteSpace(cifData.cif))
                    {
                        cekKTP.CIF = cifData.cif;
                    }
                    cekKTP.GolonganDarah = enroll.KtpGolonganDarah;
                    cekKTP.JenisKelamin = enroll.KtpJanisKelamin;
                    cekKTP.Kecamatan = enroll.KtpKecamatan;
                    cekKTP.Kelurahan = enroll.KtpKelurahan;
                    cekKTP.Kewarganegaraan = enroll.KtpKewarganegaraan;
                    cekKTP.KodePos = enroll.KtpKodePos;
                    cekKTP.Kota = enroll.KtpKota;
                    cekKTP.Latitude = enroll.KtpLatitude;
                    cekKTP.Longitude = enroll.KtpLongitude;
                    cekKTP.MasaBerlaku = enroll.KtpMasaBerlaku;
                    cekKTP.Nama = enroll.KtpNama;
                    cekKTP.NIK = enroll.KtpNIK;
                    cekKTP.Pekerjaan = enroll.KtpPekerjaan;
                    cekKTP.Provinsi = enroll.KtpProvinsi;
                    cekKTP.RT = enroll.KtpRT;
                    cekKTP.RW = enroll.KtpRW;
                    cekKTP.StatusPerkawinan = enroll.KtpStatusPerkawinan;
                    cekKTP.TanggalLahir = string.IsNullOrWhiteSpace(enroll.KtpTanggalLahir) ? null : DateTime.ParseExact(enroll.KtpTanggalLahir, "dd-MM-yyyy", CultureInfo.InvariantCulture);
                    cekKTP.TempatLahir = enroll.KtpTempatLahir;
                    cekKTP.UpdatedById = Id;
                    cekKTP.UpdatedByNpp = npp;
                    cekKTP.UpdatedByUID = enroll.UID;
                    cekKTP.UpdatedTime = DateTime.Now;
                    cekKTP.UpdatedByUnitCode = unitCode;
                    cekKTP.UpdatedByUnitId = unitId;
                }
                else
                {
                    dataDemografis = new Tbl_DataKTP_Demografis
                    {
                        Agama = enroll.KtpAgama,
                        Alamat = enroll.KtpAlamat,
                        AlamatGoogle = enroll.KtpAlamatConvertLatlong,
                        AlamatLengkap = enroll.KtpAlamatConvertLengkap,
                        CIF = (cifData.cif),
                        NIK = enroll.KtpNIK,
                        CreatedById = Id,
                        IsActive = true,
                        IsDeleted = false,
                        JenisKelamin = enroll.KtpJanisKelamin,
                        Kecamatan = enroll.KtpKecamatan,
                        Kelurahan = enroll.KtpKelurahan,
                        CreatedByUID = enroll.UID,
                        CreatedTime = DateTime.Now,
                        GolonganDarah = enroll.KtpGolonganDarah,
                        Kewarganegaraan = enroll.KtpKewarganegaraan,
                        KodePos = enroll.KtpKodePos,
                        Kota = enroll.KtpKota,
                        Latitude = enroll.KtpLatitude,
                        Longitude = enroll.KtpLongitude,
                        MasaBerlaku = enroll.KtpMasaBerlaku,
                        Nama = enroll.KtpNama,
                        Pekerjaan = enroll.KtpPekerjaan,
                        Provinsi = enroll.KtpProvinsi,
                        RT = enroll.KtpRT,
                        RW = enroll.KtpRW,
                        StatusPerkawinan = enroll.KtpStatusPerkawinan,
                        TanggalLahir = string.IsNullOrWhiteSpace(enroll.KtpTanggalLahir) ? null : DateTime.ParseExact(enroll.KtpTanggalLahir, "dd-MM-yyyy", CultureInfo.InvariantCulture),
                        TempatLahir = enroll.KtpTempatLahir,
                        CreatedByNpp = npp,
                        CreatedByUnitCode = unitCode,
                        CreatedByUnitId = unitId,
                        IsVerified = false,
                        IsNasabahTemp = string.IsNullOrWhiteSpace(cifData.cif)
                    };

                    if (isEmployee)
                    {
                        dataNpp = new Tbl_Mapping_Pegawai_KTP
                        {
                            CreatedById = Id,
                            NIK = enroll.KtpNIK,
                            Npp = _empData.Npp,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now
                        };
                    }
                }

                var exPhotoKtp = new Tbl_DataKTP_Photo();

                var photoKtpLog = new Tbl_DataKTP_Photo_Log();

                var photoKtp = new Tbl_DataKTP_Photo();

                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoKTP))
                {
                    var photoKTPData = await _profileRepository.GetPhotoKtp(enroll.KtpNIK)
                        .ConfigureAwait(false);

                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpPhotoKTP);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderPhoto")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderFoto = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "Foto_" + enroll.KtpNIK + "_" + JamServer + ".jpg";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderFoto, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {

                        if (!Directory.Exists(subPathFolderFoto))
                        {
                            Directory.CreateDirectory(subPathFolderFoto);
                        }

                        filePath = subPathFolderFoto + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoKTPData != null)
                    {
                        photoKtpLog.CreatedById = photoKTPData.CreatedById;
                        photoKtpLog.CreatedByNpp = photoKTPData.CreatedByNpp;
                        photoKtpLog.CreatedByUid = photoKTPData.CreatedByUid;
                        photoKtpLog.CreatedByUnit = photoKTPData.CreatedByUnit;
                        photoKtpLog.CreatedTime = photoKTPData.CreatedTime;
                        photoKtpLog.FileName = photoKTPData.FileName;
                        photoKtpLog.Nik = photoKTPData.Nik;
                        photoKtpLog.PathFile = photoKTPData.PathFile;

                        exPhotoKtp = photoKTPData;
                    }

                    photoKtp = new Tbl_DataKTP_Photo
                    {
                        PathFile = filePath,
                        Nik = enroll.KtpNIK,
                        FileName = fileName,
                        IsActive = true,
                        IsDeleted = false,
                        CreatedById = Id,
                        CreatedByNpp = npp,
                        CreatedByUid = enroll.UID,
                        CreatedTime = DateTime.Now
                    };
                }

                var exPhotoSignature = new Tbl_DataKTP_Signature();

                var photoSignatureLog = new Tbl_DataKTP_Signature_Log();

                var photoSignature = new Tbl_DataKTP_Signature();

                if (!string.IsNullOrWhiteSpace(enroll.KtpSignature))
                {
                    var photoSignatureData = await _profileRepository.GetPhotoSignature(enroll.KtpNIK)
                        .ConfigureAwait(false);

                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpSignature);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderSignature")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderSignature = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";
                    //string subPathFolderSignature = pathFolder + pathFolderFoto + enroll.KtpNIK;

                    string fileName = "Signature_" + enroll.KtpNIK + "_" + JamServer + ".jpg";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderSignature, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderSignature))
                        {
                            Directory.CreateDirectory(subPathFolderSignature);
                        }

                        filePath = subPathFolderSignature + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoSignatureData != null)
                    {
                        photoSignatureLog.CreatedById = photoSignatureData.CreatedById;
                        photoSignatureLog.CreatedByNpp = photoSignatureData.CreatedByNpp;
                        photoSignatureLog.CreatedByUid = photoSignatureData.CreatedByUid;
                        photoSignatureLog.CreatedByUnit = photoSignatureData.CreatedByUnit;
                        photoSignatureLog.CreatedTime = photoSignatureData.CreatedTime;
                        photoSignatureLog.FileName = photoSignatureData.FileName;
                        photoSignatureLog.Nik = photoSignatureData.Nik;
                        photoSignatureLog.PathFile = photoSignatureData.PathFile;

                        exPhotoSignature = photoSignatureData;
                    }

                    photoSignature = new Tbl_DataKTP_Signature
                    {
                        CreatedById = Id,
                        CreatedByNpp = npp,
                        IsActive = true,
                        IsDeleted = false,
                        Nik = enroll.KtpNIK,
                        FileName = fileName,
                        CreatedByUid = enroll.UID,
                        CreatedTime = DateTime.Now,
                        PathFile = filePath
                    };
                }

                var exPhotoCam = new Tbl_DataKTP_PhotoCam();

                var photoCamLog = new Tbl_DataKTP_PhotoCam_Log();

                var photoCam = new Tbl_DataKTP_PhotoCam();

                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoCam))
                {
                    var photoCamData = await _profileRepository.GetPhotoCam(enroll.KtpNIK)
                        .ConfigureAwait(false);

                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpPhotoCam);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderWebcam")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string SubPathFolderPhotoCam = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";
                    //string SubPathFolderPhotoCam = pathFolder + pathFolderFoto + enroll.KtpNIK;

                    string fileName = "PhotoCam_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(SubPathFolderPhotoCam, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(SubPathFolderPhotoCam))
                        {
                            Directory.CreateDirectory(SubPathFolderPhotoCam);
                        }

                        filePath = SubPathFolderPhotoCam + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoCamData != null)
                    {
                        photoCamLog.CreatedById = photoCamData.CreatedById;
                        photoCamLog.CreatedByNpp = photoCamData.CreatedByNpp;
                        photoCamLog.CreatedByUid = photoCamData.CreatedByUid;
                        photoCamLog.CreatedByUnit = photoCamData.CreatedByUnit;
                        photoCamLog.CreatedTime = photoCamData.CreatedTime;
                        photoCamLog.FileName = photoCamData.FileName;
                        photoCamLog.Nik = photoCamData.Nik;
                        photoCamLog.PathFile = photoCamData.PathFile;

                        exPhotoCam = photoCamData;
                    }

                    photoCam = new Tbl_DataKTP_PhotoCam
                    {
                        PathFile = filePath,//
                        Nik = enroll.KtpNIK,
                        FileName = fileName,//
                        CreatedTime = DateTime.Now,
                        CreatedById = Id,
                        IsActive = true,
                        IsDeleted = false,
                        CreatedByNpp = npp,
                        CreatedByUid = enroll.UID
                    };
                }

                var exPhotoFinger = new List<Tbl_DataKTP_Finger>();

                var exPhotoFingerEmployee = new List<Tbl_DataKTP_Finger_Employee>();

                var photoFingerLogs = new List<Tbl_DataKTP_Finger_Log>();

                var photoFingers = new List<Tbl_DataKTP_Finger>();

                var photoFingersEmployee = new List<Tbl_DataKTP_Finger_Employee>();

                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKanan))
                {

                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);

                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                    }

                    string imageEncrypted = enroll.KtpFingerKanan.Encrypt(Phrase.FileEncryption);

                    string filePath = "";
                    string filePathIso = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKanan.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";
                    string fileNameIso = "";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    //if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKananIso))
                    //{
                    //    string isoEncrypted = enroll.KtpFingerKananIso.Encrypt(Phrase.FileEncryption);
                    //    fileNameIso = "PhotoFingerISO_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                    //    if (_sftpConfig.IsActive)
                    //    {
                    //        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(isoEncrypted));

                    //        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileNameIso, _sftpConfig.Host,
                    //            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                    //        filePathIso = fPath;
                    //    }
                    //    else
                    //    {
                    //        if (!Directory.Exists(subPathFolderPhotoFinger))
                    //        {
                    //            Directory.CreateDirectory(subPathFolderPhotoFinger);
                    //        }

                    //        filePathIso = subPathFolderPhotoFinger + fileNameIso;
                    //        File.WriteAllText(filePathIso, isoEncrypted);
                    //    }
                    //}

                    if (photoFingerData != null)
                    {
                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUid,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            //FileJari = photoFingerData.FileJari,
                            //FileJariISO = photoFingerData.FileJariISO,
                            FileName = photoFingerData.FileName,
                            //FileNameISO = photoFingerData.FileNameISO,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            //PathFileISO = photoFingerData.PathFileISO,
                            TypeFinger = photoFingerData.TypeFinger
                        });

                        exPhotoFinger.Add(photoFingerData);
                    }

                    photoFingers.Add(new Tbl_DataKTP_Finger
                    {
                        CreatedById = Id,
                        IsActive = true,
                        IsDeleted = false,
                        Nik = enroll.KtpNIK,
                        PathFile = filePath,//
                        //PathFileISO = filePathIso,//
                        CreatedByNpp = npp,
                        CreatedByUid = enroll.UID,
                        CreatedTime = DateTime.Now,
                        FileName = fileName,//
                        //FileNameISO = fileNameIso,//
                        //FileJariISO = enroll.KtpFingerKananIso,
                        TypeFinger = enroll.KtpTypeJariKanan
                    });

                    if (isEmployee)
                    {
                        photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,//
                            //PathFileISO = filePathIso,//
                            CreatedByNpp = npp,
                            CreatedByUid = enroll.UID,
                            CreatedTime = DateTime.Now,
                            FileName = fileName,//
                            //FileNameISO = fileNameIso,//
                            //FileJariISO = enroll.KtpFingerKananIso,
                            TypeFinger = enroll.KtpTypeJariKanan
                        });
                    }
                }

                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKiri))
                {
                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);

                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                    }

                    string imageEncrypted = enroll.KtpFingerKiri.Encrypt(Phrase.FileEncryption);

                    string filePath = "";
                    string filePathIso = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKiri.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";
                    string fileNameIso = "";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    //if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKiriIso))
                    //{
                    //    string isoEncrypted = enroll.KtpFingerKiriIso.Encrypt(Phrase.FileEncryption);
                    //    fileNameIso = "PhotoFingerISO_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                    //    if (_sftpConfig.IsActive)
                    //    {
                    //        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(isoEncrypted));

                    //        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileNameIso, _sftpConfig.Host,
                    //            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                    //        filePathIso = fPath;
                    //    }
                    //    else
                    //    {
                    //        if (!Directory.Exists(subPathFolderPhotoFinger))
                    //        {
                    //            Directory.CreateDirectory(subPathFolderPhotoFinger);
                    //        }

                    //        filePathIso = subPathFolderPhotoFinger + fileNameIso;
                    //        File.WriteAllText(filePathIso, isoEncrypted);
                    //    }
                    //}

                    if (photoFingerData != null)
                    {
                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUid,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            //FileJari = photoFingerData.FileJari,
                            //FileJariISO = photoFingerData.FileJariISO,
                            FileName = photoFingerData.FileName,
                            //FileNameISO = photoFingerData.FileNameISO,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            //PathFileISO = photoFingerData.PathFileISO,
                            TypeFinger = photoFingerData.TypeFinger
                        });

                        exPhotoFinger.Add(photoFingerData);
                    }

                    photoFingers.Add(new Tbl_DataKTP_Finger
                    {
                        CreatedById = Id,
                        IsActive = true,
                        IsDeleted = false,
                        Nik = enroll.KtpNIK,
                        PathFile = filePath,//
                        //PathFileISO = filePathIso,//
                        CreatedByNpp = npp,
                        CreatedByUid = enroll.UID,
                        CreatedTime = DateTime.Now,
                        FileName = fileName,//
                        //FileNameISO = fileNameIso,//
                        //FileJariISO= enroll.KtpFingerKiriIso,//
                        TypeFinger = enroll.KtpTypeJariKiri
                    });

                    if (isEmployee)
                    {
                        photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,//
                            //PathFileISO = filePathIso,//
                            CreatedByNpp = npp,
                            CreatedByUid = enroll.UID,
                            CreatedTime = DateTime.Now,
                            FileName = fileName,//
                            //FileNameISO = fileNameIso,//
                            //FileJariISO = enroll.KtpFingerKiriIso,//
                            TypeFinger = enroll.KtpTypeJariKiri
                        });
                    }
                }

                // to do: alat reader log
                var dataReader = await _dataReaderRepository.GetDatareaderUid(enroll.UID).ConfigureAwait(false);

                var dataReaderLog = new Tbl_MasterAlatReaderLog();

                if (dataReader != null)
                {
                    dataReaderLog = new Tbl_MasterAlatReaderLog
                    {
                        CreatedBy_Id = Id,
                        CreatedTime = DateTime.Now,
                        IsActive = true,
                        IsDeleted = false,
                        Nik = enroll.KtpNIK,
                        PegawaiId = Id,
                        Serial_Number = dataReader.SN_Unit,
                        Type = "Enroll",
                        Uid = enroll.UID
                    };
                }

                _enrollmentKTPRepository.InsertEnrollFlow(dataDemografis, dataDemografisLog, photoKtp, photoKtpLog, photoSignature, photoSignatureLog,
                    photoCam, photoCamLog, photoFingers, photoFingerLogs, exPhotoKtp, exPhotoSignature, exPhotoCam, exPhotoFinger, dataNpp, dataReaderLog, photoFingersEmployee, exPhotoFingerEmployee);

                await _alatReaderRepository.CreateLogActivity2(new Tbl_MasterAlatReaderLogActvity
                {
                    CreatedBy_Id = Id,
                    IsActive = true,
                    IsDeleted = false,
                    KodeUnit = unitCode,
                    LastIP = enroll.IpAddress,
                    NIK = enroll.KtpNIK,
                    CreatedTime = DateTime.Now,
                    NppPegawai = npp,
                    PegawaiId = Id,
                    Type = "Enroll",
                    UID = enroll.UID,
                    UnitId = unitId
                });
            }

            if (IsNasabah)
            {
                return (_SuccessMessageConfig.NasabahSuksesEnrollNasabah, (int)EnrollStatus.Nasabah_Berhasil_di_enroll, cekKTP?.CIF);
            }
            else
            {
                return (_SuccessMessageConfig.NasabahSuksesEnrollNonNasabah, (int)EnrollStatus.Nasabah_Berhasil_di_enroll, cekKTP?.CIF);
            }
        }

        #region ENrool & Re-enroll ISO
        public async Task<(string msg, int code, string cif)> SubmitEnrollmentFingerEncryptedOnlyISO(bool isHitSOA, ApiSOA ReqSoa, EnrollKTP enroll, int Id, string npp,
            string unitCode, int unitId)
        {
            bool isEmployee = false;
            var _empData = await _enrollmentKTPRepository.IsEmployee(enroll.KtpNIK);
            if (_empData != null)
            {
                isEmployee = true;
            }

            if (enroll.KtpTanggalLahir != null)
            {
                enroll.KtpTanggalLahir = enroll.KtpTanggalLahir.Replace(".", "");
                if (enroll.KtpTanggalLahir.Contains("/"))
                {
                    enroll.KtpTanggalLahir = enroll.KtpTanggalLahir.Replace("/", "-");
                }
                string[] arrayTanggl = enroll.KtpTanggalLahir.Split("-");
                string hari = "";
                string bulan = "";
                string tahun = "";

                if (arrayTanggl != null)
                {
                    if (arrayTanggl[0] != null)
                    {
                        if (arrayTanggl[0].Length != 2)
                        {
                            hari = "0" + arrayTanggl[0];

                        }
                        else
                        {
                            hari = arrayTanggl[0];

                        }
                    }

                    if (arrayTanggl[1] != null)
                    {
                        if (arrayTanggl[1].Length != 2)
                        {
                            bulan = "0" + arrayTanggl[1];

                        }
                        else
                        {
                            bulan = arrayTanggl[1];

                        }
                    }

                    if (arrayTanggl[2] != null)
                    {
                        tahun = arrayTanggl[2];
                    }
                }

                enroll.KtpTanggalLahir = hari + "-" + bulan + "-" + tahun;
            }

            const bool IsNewEnroll = true;
            string JamServer = DateTime.Now.ToString("ddMMyyyyHHmmss");
            bool IsNasabah = false;

            var cekKTP = await _profileRepository.GetDataDemografis(enroll.KtpNIK)
                .ConfigureAwait(false);

            if (cekKTP != null)
            {
                var logDemografi = new Tbl_DataKTP_Demografis_Log
                {
                    Agama = cekKTP.Agama,
                    Alamat = cekKTP.Alamat,
                    AlamatGoogle = cekKTP.AlamatGoogle,
                    AlamatLengkap = cekKTP.AlamatLengkap,
                    CreatedById = cekKTP.CreatedById,
                    CreatedByUID = cekKTP.CreatedByUID,
                    CreatedByUnitId = cekKTP.CreatedByUnitId,
                    CreatedTime = cekKTP.CreatedTime,
                    Desa = cekKTP.Desa,
                    GolonganDarah = cekKTP.GolonganDarah,
                    JenisKelamin = cekKTP.JenisKelamin,
                    Kecamatan = cekKTP.Kecamatan,
                    Kelurahan = cekKTP.Kelurahan,
                    Kewarganegaraan = cekKTP.Kewarganegaraan,
                    KodePos = cekKTP.KodePos,
                    Kota = cekKTP.Kota,
                    Latitude = cekKTP.Latitude,
                    Longitude = cekKTP.Longitude,
                    MasaBerlaku = cekKTP.MasaBerlaku,
                    Nama = cekKTP.Nama,
                    NIK = cekKTP.NIK,
                    Pekerjaan = cekKTP.Pekerjaan,
                    Provinsi = cekKTP.Provinsi,
                    RT = cekKTP.RT,
                    RW = cekKTP.RW,
                    StatusPerkawinan = cekKTP.StatusPerkawinan,
                    TanggalLahir = cekKTP.TanggalLahir,
                    TempatLahir = cekKTP.TempatLahir,
                    CIF = cekKTP.CIF,
                    CreatedByNpp = cekKTP.CreatedByNpp
                };

                var stringPerubahan = "";

                if (cekKTP.Nama != enroll.KtpNama)
                {
                    stringPerubahan = stringPerubahan + "NAMA : " + cekKTP.Nama + " -> " + enroll.KtpNama + " <br/>";
                    cekKTP.Nama = enroll.KtpNama;
                }

                if (cekKTP.TempatLahir != enroll.KtpTempatLahir)
                {
                    stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTP.TempatLahir + " -> " + enroll.KtpTempatLahir + " <br/>";
                    cekKTP.TempatLahir = enroll.KtpTempatLahir;
                }

                if (enroll.KtpTanggalLahir != null)
                {

                    if (cekKTP.TempatLahir != enroll.KtpTempatLahir)
                    {
                        stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTP.TanggalLahir + " -> " + enroll.KtpTanggalLahir + " <br/>";
                        cekKTP.TanggalLahir = DateTime.ParseExact(enroll.KtpTanggalLahir, "dd-MM-yyyy", CultureInfo.InvariantCulture);
                    }

                }

                if (cekKTP.JenisKelamin != enroll.KtpJanisKelamin)
                {
                    stringPerubahan = stringPerubahan + "JENIS KELAMIN : " + cekKTP.JenisKelamin + " -> " + enroll.KtpJanisKelamin + " <br/>";
                    cekKTP.JenisKelamin = enroll.KtpJanisKelamin;
                }

                if (cekKTP.GolonganDarah != enroll.KtpGolonganDarah)
                {
                    stringPerubahan = stringPerubahan + "GOLONGAN DARAH : " + cekKTP.GolonganDarah + " -> " + enroll.KtpGolonganDarah + " <br/>";
                    cekKTP.GolonganDarah = enroll.KtpGolonganDarah;
                }

                if (cekKTP.Alamat != enroll.KtpAlamat)
                {
                    stringPerubahan = stringPerubahan + "ALAMAT : " + cekKTP.Alamat + " -> " + enroll.KtpAlamat + " <br/>";
                    cekKTP.Alamat = enroll.KtpAlamat;
                }

                if (cekKTP.RT != enroll.KtpRT)
                {
                    stringPerubahan = stringPerubahan + "RT : " + cekKTP.RT + " -> " + enroll.KtpRT + " <br/>";
                    cekKTP.RT = enroll.KtpRT;
                }

                if (cekKTP.RW != enroll.KtpRW)
                {
                    stringPerubahan = stringPerubahan + "RW : " + cekKTP.RW + " -> " + enroll.KtpRW + " <br/>";
                    cekKTP.RW = enroll.KtpRW;
                }

                if (cekKTP.Kelurahan != enroll.KtpKelurahan)
                {
                    stringPerubahan = stringPerubahan + "KELURAHAN : " + cekKTP.Kelurahan + " -> " + enroll.KtpKelurahan + " <br/>";
                    cekKTP.Kelurahan = enroll.KtpKelurahan;
                }

                if (cekKTP.Kecamatan != enroll.KtpKecamatan)
                {
                    stringPerubahan = stringPerubahan + "KECAMATAN : " + cekKTP.Kecamatan + " -> " + enroll.KtpKecamatan + " <br/>";
                    cekKTP.Kecamatan = enroll.KtpKecamatan;
                }

                if (cekKTP.Kota != enroll.KtpKota)
                {
                    stringPerubahan = stringPerubahan + "KOTA/KABUPATEN : " + cekKTP.Kota + " -> " + enroll.KtpKota + " <br/>";
                    cekKTP.Kota = enroll.KtpKota;
                }

                if (cekKTP.Provinsi != enroll.KtpProvinsi)
                {
                    stringPerubahan = stringPerubahan + "PROVINSI  : " + cekKTP.Provinsi + " -> " + enroll.KtpProvinsi + " <br/>";
                    cekKTP.Provinsi = enroll.KtpProvinsi;
                }

                if (cekKTP.Agama != enroll.KtpAgama)
                {
                    stringPerubahan = stringPerubahan + "AGAMA  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTP.Agama = enroll.KtpAgama;
                }

                if (cekKTP.StatusPerkawinan != enroll.KtpStatusPerkawinan)
                {
                    stringPerubahan = stringPerubahan + "STATUS PERKAWINAN  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTP.StatusPerkawinan = enroll.KtpStatusPerkawinan;
                }

                if (cekKTP.Pekerjaan != enroll.KtpPekerjaan)
                {
                    stringPerubahan = stringPerubahan + "PEKERJAAN  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTP.Pekerjaan = enroll.KtpPekerjaan;
                }

                if (cekKTP.Kewarganegaraan != enroll.KtpKewarganegaraan)
                {
                    stringPerubahan = stringPerubahan + "KEWARGANEGARAAN  : " + cekKTP.Kewarganegaraan + " -> " + enroll.KtpKewarganegaraan + " <br/>";
                    cekKTP.Kewarganegaraan = enroll.KtpKewarganegaraan;
                }
                if (cekKTP.MasaBerlaku != enroll.KtpMasaBerlaku)
                {
                    stringPerubahan = stringPerubahan + "MASA BERLAKU  : " + cekKTP.MasaBerlaku + " -> " + enroll.KtpMasaBerlaku + " <br/>";
                    cekKTP.MasaBerlaku = enroll.KtpMasaBerlaku;
                }

                cekKTP.UpdatedTime = DateTime.Now;
                cekKTP.UpdatedById = Id;
                cekKTP.UpdatedByUID = enroll.UID;
                cekKTP.UpdatedByUnitCode = unitCode;
                cekKTP.UpdatedByUnitId = unitId;

                await _profileRepository.UpdateDataDemografis(cekKTP)
                    .ConfigureAwait(false);

                if (string.IsNullOrWhiteSpace(stringPerubahan))
                {
                    return (_ErrorMessageConfig.NasabahPernahEnroll, (int)EnrollStatus.Sudah_di_enroll_sebelumnya, "");
                }

                _profileRepository.InsertDemografiLog(logDemografi);

                return (stringPerubahan, (int)EnrollStatus.Berhasil_mengubah_beberapa_perubahan, "");
            }

            if (IsNewEnroll)
            {
                if (enroll?.KtpNIK == null) return (_ErrorMessageConfig.InputTidakLengkap, (int)EnrollStatus.Inputan_tidak_lengkap, "");

                var cifData = new ApiSOAResponse();
                #region Hit SOA And Loggging it
                if (isHitSOA == true)
                {
                    cifData = await _cifService.GetSOAByCif(ReqSoa)
                    .ConfigureAwait(false);

                    var status = 0;
                    if (cifData.cif != null)
                    {
                        status = 1;
                    }

                    var _log = new Tbl_ThirdPartyLog
                    {
                        FeatureName = "SubmitEnrollmentFingerEncryptedOnlyISO",
                        HostUrl = ReqSoa.host,
                        Request = Newtonsoft.Json.JsonConvert.SerializeObject(ReqSoa),
                        Status = status,
                        Response = Newtonsoft.Json.JsonConvert.SerializeObject(cifData),
                        CreatedDate = System.DateTime.Now,
                        CreatedBy = npp
                    };

                    _ = _enrollmentKTPRepository.CreateThirdPartyLog(_log);
                }
                else
                {
                    try
                    {
                        var res = await _cifService.GetCIF(new NikDto { Nik = enroll.KtpNIK },
                        new NikDtoUrl { baseUrl = ReqSoa.baseUrlNonSoa, endpoint = ReqSoa.UrlEndPointNonSoa });
                        if (res.Data == null)
                        {
                            cifData.cif = null;
                        }
                        else
                        {
                            cifData.cif = res.Data.Cif;
                        };
                    }
                    catch (Exception ex)
                    {
                        cifData.cif = null;
                    }

                }
                #endregion

                if (!String.IsNullOrEmpty(cifData.cif))
                {
                    IsNasabah = true;
                    cifData.cif = cifData.cif.Trim();
                }

                var sysPathFolder = await _sysParameterRepository.GetPathFolder("PathFolderData");
                string pathFolder = sysPathFolder.Value;

                var dataDemografis = new Tbl_DataKTP_Demografis();

                var dataDemografisLog = new Tbl_DataKTP_Demografis_Log();

                var dataNpp = new Tbl_Mapping_Pegawai_KTP();

                if (cekKTP != null)
                {
                    dataDemografisLog = new Tbl_DataKTP_Demografis_Log
                    {
                        Agama = cekKTP.Agama,
                        Alamat = cekKTP.Alamat,
                        AlamatGoogle = cekKTP.AlamatGoogle,
                        AlamatLengkap = cekKTP.AlamatLengkap,
                        CreatedById = cekKTP.CreatedById,
                        CreatedByUID = cekKTP.CreatedByUID,
                        CreatedByUnitId = cekKTP.CreatedByUnitId,
                        CreatedTime = cekKTP.CreatedTime,
                        Desa = cekKTP.Desa,
                        GolonganDarah = cekKTP.GolonganDarah,
                        JenisKelamin = cekKTP.JenisKelamin,
                        Kecamatan = cekKTP.Kecamatan,
                        Kelurahan = cekKTP.Kelurahan,
                        Kewarganegaraan = cekKTP.Kewarganegaraan,
                        KodePos = cekKTP.KodePos,
                        Kota = cekKTP.Kota,
                        Latitude = cekKTP.Latitude,
                        Longitude = cekKTP.Longitude,
                        MasaBerlaku = cekKTP.MasaBerlaku,
                        Nama = cekKTP.Nama,
                        NIK = cekKTP.NIK,
                        Pekerjaan = cekKTP.Pekerjaan,
                        Provinsi = cekKTP.Provinsi,
                        RT = cekKTP.RT,
                        RW = cekKTP.RW,
                        StatusPerkawinan = cekKTP.StatusPerkawinan,
                        TanggalLahir = cekKTP.TanggalLahir,
                        TempatLahir = cekKTP.TempatLahir
                    };

                    cekKTP.Agama = enroll.KtpAgama;
                    cekKTP.Alamat = enroll.KtpAlamat;
                    cekKTP.AlamatGoogle = enroll.KtpAlamatConvertLatlong;
                    cekKTP.AlamatLengkap = enroll.KtpAlamatConvertLengkap;
                    if (string.IsNullOrWhiteSpace(cifData.cif))
                    {
                        cekKTP.CIF = cifData.cif;
                    }
                    cekKTP.GolonganDarah = enroll.KtpGolonganDarah;
                    cekKTP.JenisKelamin = enroll.KtpJanisKelamin;
                    cekKTP.Kecamatan = enroll.KtpKecamatan;
                    cekKTP.Kelurahan = enroll.KtpKelurahan;
                    cekKTP.Kewarganegaraan = enroll.KtpKewarganegaraan;
                    cekKTP.KodePos = enroll.KtpKodePos;
                    cekKTP.Kota = enroll.KtpKota;
                    cekKTP.Latitude = enroll.KtpLatitude;
                    cekKTP.Longitude = enroll.KtpLongitude;
                    cekKTP.MasaBerlaku = enroll.KtpMasaBerlaku;
                    cekKTP.Nama = enroll.KtpNama;
                    cekKTP.NIK = enroll.KtpNIK;
                    cekKTP.Pekerjaan = enroll.KtpPekerjaan;
                    cekKTP.Provinsi = enroll.KtpProvinsi;
                    cekKTP.RT = enroll.KtpRT;
                    cekKTP.RW = enroll.KtpRW;
                    cekKTP.StatusPerkawinan = enroll.KtpStatusPerkawinan;
                    cekKTP.TanggalLahir = string.IsNullOrWhiteSpace(enroll.KtpTanggalLahir) ? null : DateTime.ParseExact(enroll.KtpTanggalLahir, "dd-MM-yyyy", CultureInfo.InvariantCulture);
                    cekKTP.TempatLahir = enroll.KtpTempatLahir;
                    cekKTP.UpdatedById = Id;
                    cekKTP.UpdatedByNpp = npp;
                    cekKTP.UpdatedByUID = enroll.UID;
                    cekKTP.UpdatedTime = DateTime.Now;
                    cekKTP.UpdatedByUnitCode = unitCode;
                    cekKTP.UpdatedByUnitId = unitId;
                }
                else
                {
                    dataDemografis = new Tbl_DataKTP_Demografis
                    {
                        Agama = enroll.KtpAgama,
                        Alamat = enroll.KtpAlamat,
                        AlamatGoogle = enroll.KtpAlamatConvertLatlong,
                        AlamatLengkap = enroll.KtpAlamatConvertLengkap,
                        CIF = (cifData.cif),
                        NIK = enroll.KtpNIK,
                        CreatedById = Id,
                        IsActive = true,
                        IsDeleted = false,
                        JenisKelamin = enroll.KtpJanisKelamin,
                        Kecamatan = enroll.KtpKecamatan,
                        Kelurahan = enroll.KtpKelurahan,
                        CreatedByUID = enroll.UID,
                        CreatedTime = DateTime.Now,
                        GolonganDarah = enroll.KtpGolonganDarah,
                        Kewarganegaraan = enroll.KtpKewarganegaraan,
                        KodePos = enroll.KtpKodePos,
                        Kota = enroll.KtpKota,
                        Latitude = enroll.KtpLatitude,
                        Longitude = enroll.KtpLongitude,
                        MasaBerlaku = enroll.KtpMasaBerlaku,
                        Nama = enroll.KtpNama,
                        Pekerjaan = enroll.KtpPekerjaan,
                        Provinsi = enroll.KtpProvinsi,
                        RT = enroll.KtpRT,
                        RW = enroll.KtpRW,
                        StatusPerkawinan = enroll.KtpStatusPerkawinan,
                        TanggalLahir = string.IsNullOrWhiteSpace(enroll.KtpTanggalLahir) ? null : DateTime.ParseExact(enroll.KtpTanggalLahir, "dd-MM-yyyy", CultureInfo.InvariantCulture),
                        TempatLahir = enroll.KtpTempatLahir,
                        CreatedByNpp = npp,
                        CreatedByUnitCode = unitCode,
                        CreatedByUnitId = unitId,
                        IsVerified = false,
                        IsNasabahTemp = string.IsNullOrWhiteSpace(cifData.cif)
                    };

                    if (isEmployee)
                    {
                        dataNpp = new Tbl_Mapping_Pegawai_KTP
                        {
                            CreatedById = Id,
                            NIK = enroll.KtpNIK,
                            Npp = _empData.Npp,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now
                        };
                    }
                }

                var exPhotoKtp = new Tbl_DataKTP_Photo();

                var photoKtpLog = new Tbl_DataKTP_Photo_Log();

                var photoKtp = new Tbl_DataKTP_Photo();

                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoKTP))
                {
                    var photoKTPData = await _profileRepository.GetPhotoKtp(enroll.KtpNIK)
                        .ConfigureAwait(false);

                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpPhotoKTP);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderPhoto")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderFoto = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "Foto_" + enroll.KtpNIK + "_" + JamServer + ".jpg";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderFoto, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {

                        if (!Directory.Exists(subPathFolderFoto))
                        {
                            Directory.CreateDirectory(subPathFolderFoto);
                        }

                        filePath = subPathFolderFoto + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoKTPData != null)
                    {
                        photoKtpLog.CreatedById = photoKTPData.CreatedById;
                        photoKtpLog.CreatedByNpp = photoKTPData.CreatedByNpp;
                        photoKtpLog.CreatedByUid = photoKTPData.CreatedByUid;
                        photoKtpLog.CreatedByUnit = photoKTPData.CreatedByUnit;
                        photoKtpLog.CreatedTime = photoKTPData.CreatedTime;
                        photoKtpLog.FileName = photoKTPData.FileName;
                        photoKtpLog.Nik = photoKTPData.Nik;
                        photoKtpLog.PathFile = photoKTPData.PathFile;

                        exPhotoKtp = photoKTPData;
                    }

                    photoKtp = new Tbl_DataKTP_Photo
                    {
                        PathFile = filePath,
                        Nik = enroll.KtpNIK,
                        FileName = fileName,
                        IsActive = true,
                        IsDeleted = false,
                        CreatedById = Id,
                        CreatedByNpp = npp,
                        CreatedByUid = enroll.UID,
                        CreatedTime = DateTime.Now
                    };
                }

                var exPhotoSignature = new Tbl_DataKTP_Signature();

                var photoSignatureLog = new Tbl_DataKTP_Signature_Log();

                var photoSignature = new Tbl_DataKTP_Signature();

                if (!string.IsNullOrWhiteSpace(enroll.KtpSignature))
                {
                    var photoSignatureData = await _profileRepository.GetPhotoSignature(enroll.KtpNIK)
                        .ConfigureAwait(false);

                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpSignature);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderSignature")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderSignature = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";
                    //string subPathFolderSignature = pathFolder + pathFolderFoto + enroll.KtpNIK;

                    string fileName = "Signature_" + enroll.KtpNIK + "_" + JamServer + ".jpg";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderSignature, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderSignature))
                        {
                            Directory.CreateDirectory(subPathFolderSignature);
                        }

                        filePath = subPathFolderSignature + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoSignatureData != null)
                    {
                        photoSignatureLog.CreatedById = photoSignatureData.CreatedById;
                        photoSignatureLog.CreatedByNpp = photoSignatureData.CreatedByNpp;
                        photoSignatureLog.CreatedByUid = photoSignatureData.CreatedByUid;
                        photoSignatureLog.CreatedByUnit = photoSignatureData.CreatedByUnit;
                        photoSignatureLog.CreatedTime = photoSignatureData.CreatedTime;
                        photoSignatureLog.FileName = photoSignatureData.FileName;
                        photoSignatureLog.Nik = photoSignatureData.Nik;
                        photoSignatureLog.PathFile = photoSignatureData.PathFile;

                        exPhotoSignature = photoSignatureData;
                    }

                    photoSignature = new Tbl_DataKTP_Signature
                    {
                        CreatedById = Id,
                        CreatedByNpp = npp,
                        IsActive = true,
                        IsDeleted = false,
                        Nik = enroll.KtpNIK,
                        FileName = fileName,
                        CreatedByUid = enroll.UID,
                        CreatedTime = DateTime.Now,
                        PathFile = filePath
                    };
                }

                var exPhotoCam = new Tbl_DataKTP_PhotoCam();

                var photoCamLog = new Tbl_DataKTP_PhotoCam_Log();

                var photoCam = new Tbl_DataKTP_PhotoCam();

                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoCam))
                {
                    var photoCamData = await _profileRepository.GetPhotoCam(enroll.KtpNIK)
                        .ConfigureAwait(false);

                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpPhotoCam);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderWebcam")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string SubPathFolderPhotoCam = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";
                    //string SubPathFolderPhotoCam = pathFolder + pathFolderFoto + enroll.KtpNIK;

                    string fileName = "PhotoCam_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(SubPathFolderPhotoCam, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(SubPathFolderPhotoCam))
                        {
                            Directory.CreateDirectory(SubPathFolderPhotoCam);
                        }

                        filePath = SubPathFolderPhotoCam + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoCamData != null)
                    {
                        photoCamLog.CreatedById = photoCamData.CreatedById;
                        photoCamLog.CreatedByNpp = photoCamData.CreatedByNpp;
                        photoCamLog.CreatedByUid = photoCamData.CreatedByUid;
                        photoCamLog.CreatedByUnit = photoCamData.CreatedByUnit;
                        photoCamLog.CreatedTime = photoCamData.CreatedTime;
                        photoCamLog.FileName = photoCamData.FileName;
                        photoCamLog.Nik = photoCamData.Nik;
                        photoCamLog.PathFile = photoCamData.PathFile;

                        exPhotoCam = photoCamData;
                    }

                    photoCam = new Tbl_DataKTP_PhotoCam
                    {
                        PathFile = filePath,//
                        Nik = enroll.KtpNIK,
                        FileName = fileName,//
                        CreatedTime = DateTime.Now,
                        CreatedById = Id,
                        IsActive = true,
                        IsDeleted = false,
                        CreatedByNpp = npp,
                        CreatedByUid = enroll.UID
                    };
                }

                var exPhotoFinger = new List<Tbl_DataKTP_Finger>();

                var exPhotoFingerEmployee = new List<Tbl_DataKTP_Finger_Employee>();

                var photoFingerLogs = new List<Tbl_DataKTP_Finger_Log>();

                var photoFingers = new List<Tbl_DataKTP_Finger>();

                var photoFingersEmployee = new List<Tbl_DataKTP_Finger_Employee>();

                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKanan))
                {

                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);

                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                    }

                    string imageEncrypted = enroll.KtpFingerKanan.Encrypt(Phrase.FileEncryption);

                    string filePath = "";
                    string filePathIso = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKanan.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";
                    string fileNameIso = "";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    string isoEncrypted = "";
                    if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKananIso))
                    {
                        isoEncrypted = enroll.KtpFingerKananIso.Encrypt(Phrase.FileEncryption);
                        fileNameIso = "PhotoFingerISO_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                        if (_sftpConfig.IsActive)
                        {
                            using var stream = new MemoryStream(Encoding.ASCII.GetBytes(isoEncrypted));

                            (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileNameIso, _sftpConfig.Host,
                                _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                            filePathIso = fPath;
                        }
                        else
                        {
                            if (!Directory.Exists(subPathFolderPhotoFinger))
                            {
                                Directory.CreateDirectory(subPathFolderPhotoFinger);
                            }

                            filePathIso = subPathFolderPhotoFinger + fileNameIso;
                            File.WriteAllText(filePathIso, isoEncrypted);
                        }
                    }

                    if (photoFingerData != null)
                    {
                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUid,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            //FileJari = photoFingerData.FileJari,
                            FileJariISO = photoFingerData.FileJariISO,
                            FileName = photoFingerData.FileName,
                            FileNameISO = photoFingerData.FileNameISO,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            PathFileISO = photoFingerData.PathFileISO,
                            TypeFinger = photoFingerData.TypeFinger
                        });

                        exPhotoFinger.Add(photoFingerData);
                    }

                    photoFingers.Add(new Tbl_DataKTP_Finger
                    {
                        CreatedById = Id,
                        IsActive = true,
                        IsDeleted = false,
                        Nik = enroll.KtpNIK,
                        PathFile = filePath,//
                        PathFileISO = filePathIso,//
                        CreatedByNpp = npp,
                        CreatedByUid = enroll.UID,
                        CreatedTime = DateTime.Now,
                        FileName = fileName,//
                        FileNameISO = fileNameIso,//
                        FileJariISO = isoEncrypted,
                        TypeFinger = enroll.KtpTypeJariKanan
                    });

                    if (isEmployee)
                    {
                        photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,//
                            PathFileISO = filePathIso,//
                            CreatedByNpp = npp,
                            CreatedByUid = enroll.UID,
                            CreatedTime = DateTime.Now,
                            FileName = fileName,//
                            FileNameISO = fileNameIso,//
                            FileJariISO = isoEncrypted,
                            TypeFinger = enroll.KtpTypeJariKanan
                        });
                    }
                }

                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKiri))
                {
                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);

                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                    }

                    string imageEncrypted = enroll.KtpFingerKiri.Encrypt(Phrase.FileEncryption);

                    string filePath = "";
                    string filePathIso = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKiri.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";
                    string fileNameIso = "";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }
                    string isoEncrypted = "";

                    if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKiriIso))
                    {
                        isoEncrypted = enroll.KtpFingerKiriIso.Encrypt(Phrase.FileEncryption);
                        fileNameIso = "PhotoFingerISO_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                        if (_sftpConfig.IsActive)
                        {
                            using var stream = new MemoryStream(Encoding.ASCII.GetBytes(isoEncrypted));

                            (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileNameIso, _sftpConfig.Host,
                                _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                            filePathIso = fPath;
                        }
                        else
                        {
                            if (!Directory.Exists(subPathFolderPhotoFinger))
                            {
                                Directory.CreateDirectory(subPathFolderPhotoFinger);
                            }

                            filePathIso = subPathFolderPhotoFinger + fileNameIso;
                            File.WriteAllText(filePathIso, isoEncrypted);
                        }
                    }

                    if (photoFingerData != null)
                    {
                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUid,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            //FileJari = photoFingerData.FileJari,
                            FileJariISO = photoFingerData.FileJariISO,
                            FileName = photoFingerData.FileName,
                            FileNameISO = photoFingerData.FileNameISO,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            PathFileISO = photoFingerData.PathFileISO,
                            TypeFinger = photoFingerData.TypeFinger
                        });

                        exPhotoFinger.Add(photoFingerData);
                    }

                    photoFingers.Add(new Tbl_DataKTP_Finger
                    {
                        CreatedById = Id,
                        IsActive = true,
                        IsDeleted = false,
                        Nik = enroll.KtpNIK,
                        PathFile = filePath,//
                        PathFileISO = filePathIso,//
                        CreatedByNpp = npp,
                        CreatedByUid = enroll.UID,
                        CreatedTime = DateTime.Now,
                        FileName = fileName,//
                        FileNameISO = fileNameIso,//
                        FileJariISO = isoEncrypted,//
                        TypeFinger = enroll.KtpTypeJariKiri
                    });

                    if (isEmployee)
                    {
                        photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,//
                            PathFileISO = filePathIso,//
                            CreatedByNpp = npp,
                            CreatedByUid = enroll.UID,
                            CreatedTime = DateTime.Now,
                            FileName = fileName,//
                            FileNameISO = fileNameIso,//
                            FileJariISO = isoEncrypted,//
                            TypeFinger = enroll.KtpTypeJariKiri
                        });
                    }
                }

                // to do: alat reader log
                var dataReader = await _dataReaderRepository.GetDatareaderUid(enroll.UID).ConfigureAwait(false);

                var dataReaderLog = new Tbl_MasterAlatReaderLog();

                if (dataReader != null)
                {
                    dataReaderLog = new Tbl_MasterAlatReaderLog
                    {
                        CreatedBy_Id = Id,
                        CreatedTime = DateTime.Now,
                        IsActive = true,
                        IsDeleted = false,
                        Nik = enroll.KtpNIK,
                        PegawaiId = Id,
                        Serial_Number = dataReader.SN_Unit,
                        Type = "Enroll",
                        Uid = enroll.UID
                    };
                }

                _enrollmentKTPRepository.InsertEnrollFlow(dataDemografis, dataDemografisLog, photoKtp, photoKtpLog, photoSignature, photoSignatureLog,
                    photoCam, photoCamLog, photoFingers, photoFingerLogs, exPhotoKtp, exPhotoSignature, exPhotoCam, exPhotoFinger, dataNpp, dataReaderLog, photoFingersEmployee, exPhotoFingerEmployee);

                await _alatReaderRepository.CreateLogActivity2(new Tbl_MasterAlatReaderLogActvity
                {
                    CreatedBy_Id = Id,
                    IsActive = true,
                    IsDeleted = false,
                    KodeUnit = unitCode,
                    LastIP = enroll.IpAddress,
                    NIK = enroll.KtpNIK,
                    CreatedTime = DateTime.Now,
                    NppPegawai = npp,
                    PegawaiId = Id,
                    Type = "Enroll",
                    UID = enroll.UID,
                    UnitId = unitId
                });
            }

            if (IsNasabah)
            {
                return (_SuccessMessageConfig.NasabahSuksesEnrollNasabah, (int)EnrollStatus.Nasabah_Berhasil_di_enroll, cekKTP?.CIF);
            }
            else
            {
                return (_SuccessMessageConfig.NasabahSuksesEnrollNonNasabah, (int)EnrollStatus.Nasabah_Berhasil_di_enroll, cekKTP?.CIF);
            }
        }

        public async Task<(string msg, int code, string cif)> ReSubmitEnrollmentFingerEncryptedOnlyISO(bool isHitSOA, ApiSOA ReqSoa, EnrollKTP enroll, int Id, string npp,
            string unitCode, int unitId)
        {
            #region check data is employee or not
            bool isEmployee = false;
            var _empData = await _enrollmentKTPRepository.IsEmployee(enroll.KtpNIK);
            if (_empData != null)
            {
                isEmployee = true;
            }
            #endregion

            #region check UID
            var dataReader = await _dataReaderRepository.GetDatareaderUid(enroll.UID).ConfigureAwait(false);

            var dataReaderLog = new Tbl_MasterAlatReaderLog();
            var dataReaderActivityLog = new Tbl_MasterAlatReaderLogActvity();
            var dataNpp = new Tbl_Mapping_Pegawai_KTP();

            if (dataReader != null)
            {
                dataReaderLog = new Tbl_MasterAlatReaderLog
                {
                    CreatedBy_Id = Id,
                    CreatedTime = DateTime.Now,
                    IsActive = true,
                    IsDeleted = false,
                    Nik = enroll.KtpNIK,
                    PegawaiId = Id,
                    Serial_Number = dataReader.SN_Unit,
                    Type = "Updates Enroll",
                    Uid = enroll.UID
                };

                dataReaderActivityLog = new Tbl_MasterAlatReaderLogActvity
                {
                    CreatedBy_Id = Id,
                    IsActive = true,
                    IsDeleted = false,
                    KodeUnit = unitCode,
                    LastIP = enroll.IpAddress,
                    NIK = enroll.KtpNIK,
                    CreatedTime = DateTime.Now,
                    NppPegawai = npp,
                    PegawaiId = Id,
                    Type = "Updates Enroll",
                    UID = enroll.UID,
                    UnitId = unitId
                };
            }
            #endregion

            string JamServer = DateTime.Now.ToString("ddMMyyyyHHmmss");

            if (enroll.KtpTanggalLahir != null)
            {
                enroll.KtpTanggalLahir = enroll.KtpTanggalLahir.Replace(".", "");
                if (enroll.KtpTanggalLahir.Contains("/"))
                {
                    enroll.KtpTanggalLahir = enroll.KtpTanggalLahir.Replace("/", "-");
                }
                string[] arrayTanggl = enroll.KtpTanggalLahir.Split("-");
                string hari = "";
                string bulan = "";
                string tahun = "";

                if (arrayTanggl != null)
                {
                    if (arrayTanggl[0] != null)
                    {
                        if (arrayTanggl[0].Length != 2)
                        {
                            hari = "0" + arrayTanggl[0];

                        }
                        else
                        {
                            hari = arrayTanggl[0];

                        }
                    }

                    if (arrayTanggl[1] != null)
                    {
                        if (arrayTanggl[1].Length != 2)
                        {
                            bulan = "0" + arrayTanggl[1];

                        }
                        else
                        {
                            bulan = arrayTanggl[1];

                        }
                    }

                    if (arrayTanggl[2] != null)
                    {
                        tahun = arrayTanggl[2];
                    }
                }

                enroll.KtpTanggalLahir = hari + "-" + bulan + "-" + tahun;
            }

            var cekKTP = await _profileRepository.GetDataDemografis(enroll.KtpNIK)
                .ConfigureAwait(false);

            #region update data ktp
            if (cekKTP != null)
            {
                #region update demografi
                var logDemografi = new Tbl_DataKTP_Demografis_Log
                {
                    Agama = cekKTP.Agama,
                    Alamat = cekKTP.Alamat,
                    AlamatGoogle = cekKTP.AlamatGoogle,
                    AlamatLengkap = cekKTP.AlamatLengkap,
                    CreatedById = cekKTP.CreatedById,
                    CreatedByUID = cekKTP.CreatedByUID,
                    CreatedByUnitId = cekKTP.CreatedByUnitId,
                    CreatedTime = cekKTP.CreatedTime,
                    Desa = cekKTP.Desa,
                    GolonganDarah = cekKTP.GolonganDarah,
                    JenisKelamin = cekKTP.JenisKelamin,
                    Kecamatan = cekKTP.Kecamatan,
                    Kelurahan = cekKTP.Kelurahan,
                    Kewarganegaraan = cekKTP.Kewarganegaraan,
                    KodePos = cekKTP.KodePos,
                    Kota = cekKTP.Kota,
                    Latitude = cekKTP.Latitude,
                    Longitude = cekKTP.Longitude,
                    MasaBerlaku = cekKTP.MasaBerlaku,
                    Nama = cekKTP.Nama,
                    NIK = cekKTP.NIK,
                    Pekerjaan = cekKTP.Pekerjaan,
                    Provinsi = cekKTP.Provinsi,
                    RT = cekKTP.RT,
                    RW = cekKTP.RW,
                    StatusPerkawinan = cekKTP.StatusPerkawinan,
                    TanggalLahir = cekKTP.TanggalLahir,
                    TempatLahir = cekKTP.TempatLahir,
                    CIF = cekKTP.CIF,
                    CreatedByNpp = cekKTP.CreatedByNpp
                };

                var stringPerubahan = "";

                if (cekKTP.Nama != enroll.KtpNama)
                {
                    stringPerubahan = stringPerubahan + "NAMA : " + cekKTP.Nama + " -> " + enroll.KtpNama + " <br/>";
                    cekKTP.Nama = enroll.KtpNama;
                }

                if (cekKTP.TempatLahir != enroll.KtpTempatLahir)
                {
                    stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTP.TempatLahir + " -> " + enroll.KtpTempatLahir + " <br/>";
                    cekKTP.TempatLahir = enroll.KtpTempatLahir;
                }

                if (enroll.KtpTanggalLahir != null)
                {
                    if (cekKTP.TempatLahir != enroll.KtpTempatLahir)
                    {
                        stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTP.TanggalLahir + " -> " + enroll.KtpTanggalLahir + " <br/>";
                        cekKTP.TanggalLahir = DateTime.ParseExact(enroll.KtpTanggalLahir, "dd-MM-yyyy", CultureInfo.InvariantCulture);
                    }
                }

                if (cekKTP.JenisKelamin != enroll.KtpJanisKelamin)
                {
                    stringPerubahan = stringPerubahan + "JENIS KELAMIN : " + cekKTP.JenisKelamin + " -> " + enroll.KtpJanisKelamin + " <br/>";
                    cekKTP.JenisKelamin = enroll.KtpJanisKelamin;
                }

                if (cekKTP.GolonganDarah != enroll.KtpGolonganDarah)
                {
                    stringPerubahan = stringPerubahan + "GOLONGAN DARAH : " + cekKTP.GolonganDarah + " -> " + enroll.KtpGolonganDarah + " <br/>";
                    cekKTP.GolonganDarah = enroll.KtpGolonganDarah;
                }

                if (cekKTP.Alamat != enroll.KtpAlamat)
                {
                    stringPerubahan = stringPerubahan + "ALAMAT : " + cekKTP.Alamat + " -> " + enroll.KtpAlamat + " <br/>";
                    cekKTP.Alamat = enroll.KtpAlamat;
                }

                if (cekKTP.RT != enroll.KtpRT)
                {
                    stringPerubahan = stringPerubahan + "RT : " + cekKTP.RT + " -> " + enroll.KtpRT + " <br/>";
                    cekKTP.RT = enroll.KtpRT;
                }

                if (cekKTP.RW != enroll.KtpRW)
                {
                    stringPerubahan = stringPerubahan + "RW : " + cekKTP.RW + " -> " + enroll.KtpRW + " <br/>";
                    cekKTP.RW = enroll.KtpRW;
                }

                if (cekKTP.Kelurahan != enroll.KtpKelurahan)
                {
                    stringPerubahan = stringPerubahan + "KELURAHAN : " + cekKTP.Kelurahan + " -> " + enroll.KtpKelurahan + " <br/>";
                    cekKTP.Kelurahan = enroll.KtpKelurahan;
                }

                if (cekKTP.Kecamatan != enroll.KtpKecamatan)
                {
                    stringPerubahan = stringPerubahan + "KECAMATAN : " + cekKTP.Kecamatan + " -> " + enroll.KtpKecamatan + " <br/>";
                    cekKTP.Kecamatan = enroll.KtpKecamatan;
                }

                if (cekKTP.Kota != enroll.KtpKota)
                {
                    stringPerubahan = stringPerubahan + "KOTA/KABUPATEN : " + cekKTP.Kota + " -> " + enroll.KtpKota + " <br/>";
                    cekKTP.Kota = enroll.KtpKota;
                }

                if (cekKTP.Provinsi != enroll.KtpProvinsi)
                {
                    stringPerubahan = stringPerubahan + "PROVINSI  : " + cekKTP.Provinsi + " -> " + enroll.KtpProvinsi + " <br/>";
                    cekKTP.Provinsi = enroll.KtpProvinsi;
                }

                if (cekKTP.Agama != enroll.KtpAgama)
                {
                    stringPerubahan = stringPerubahan + "AGAMA  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTP.Agama = enroll.KtpAgama;
                }

                if (cekKTP.StatusPerkawinan != enroll.KtpStatusPerkawinan)
                {
                    stringPerubahan = stringPerubahan + "STATUS PERKAWINAN  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTP.StatusPerkawinan = enroll.KtpStatusPerkawinan;
                }

                if (cekKTP.Pekerjaan != enroll.KtpPekerjaan)
                {
                    stringPerubahan = stringPerubahan + "PEKERJAAN  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTP.Pekerjaan = enroll.KtpPekerjaan;
                }

                if (cekKTP.Kewarganegaraan != enroll.KtpKewarganegaraan)
                {
                    stringPerubahan = stringPerubahan + "KEWARGANEGARAAN  : " + cekKTP.Kewarganegaraan + " -> " + enroll.KtpKewarganegaraan + " <br/>";
                    cekKTP.Kewarganegaraan = enroll.KtpKewarganegaraan;
                }
                if (cekKTP.MasaBerlaku != enroll.KtpMasaBerlaku)
                {
                    stringPerubahan = stringPerubahan + "MASA BERLAKU  : " + cekKTP.MasaBerlaku + " -> " + enroll.KtpMasaBerlaku + " <br/>";
                    cekKTP.MasaBerlaku = enroll.KtpMasaBerlaku;
                }
                if (cekKTP.CIF == null)
                {
                    var cifData = new ApiSOAResponse();
                    #region Hit SOA And Loggging it
                    if (isHitSOA == true)
                    {
                        cifData = await _cifService.GetSOAByCif(ReqSoa)
                        .ConfigureAwait(false);

                        var _status = 0;
                        if (cifData.cif != null)
                        {
                            _status = 1;
                        }

                        var _log = new Tbl_ThirdPartyLog
                        {
                            FeatureName = "ReSubmitEnrollmentFingerEncryptedOnlyISO",
                            HostUrl = ReqSoa.host,
                            Request = Newtonsoft.Json.JsonConvert.SerializeObject(ReqSoa),
                            Status = _status,
                            Response = Newtonsoft.Json.JsonConvert.SerializeObject(cifData),
                            CreatedDate = System.DateTime.Now,
                            CreatedBy = npp
                        };

                        _ = _enrollmentKTPRepository.CreateThirdPartyLog(_log);
                    }
                    else
                    {
                        try
                        {
                            var res = await _cifService.GetCIF(new NikDto { Nik = enroll.KtpNIK },
                            new NikDtoUrl { baseUrl = ReqSoa.baseUrlNonSoa, endpoint = ReqSoa.UrlEndPointNonSoa });
                            if (res.Data == null)
                            {
                                cifData.cif = null;
                            }
                            else
                            {
                                cifData.cif = res.Data.Cif;
                            };
                        }
                        catch (Exception ex)
                        {
                            cifData.cif = null;
                        }
                    }
                    #endregion

                    if (!String.IsNullOrEmpty(cifData.cif))
                    {
                        cifData.cif = cifData.cif.Trim();
                    }

                    stringPerubahan = stringPerubahan + "CIF  : " + cekKTP.CIF + " -> " + cifData.cif + " <br/>";
                    cekKTP.CIF = cifData.cif;
                }

                cekKTP.UpdatedTime = DateTime.Now;
                cekKTP.UpdatedById = Id;
                cekKTP.UpdatedByUID = enroll.UID;
                cekKTP.UpdatedByUnitCode = unitCode;
                cekKTP.UpdatedByUnitId = unitId;
                cekKTP.UpdatedByNpp = npp;

                if (string.IsNullOrWhiteSpace(stringPerubahan))
                {
                    stringPerubahan = stringPerubahan + "Data Demografi tidak ada perubahan" + " <br/>";
                }
                #endregion

                if (isEmployee)
                {
                    var _mappingData = await _enrollmentKTPRepository.MappingNppNikByNik(enroll.KtpNIK);
                    if (_mappingData == null)
                    {
                        dataNpp = new Tbl_Mapping_Pegawai_KTP
                        {
                            CreatedById = Id,
                            NIK = enroll.KtpNIK,
                            Npp = _empData.Npp,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            CreatedByUnit = unitCode,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            UpdatedTime = DateTime.Now,
                        };
                    }
                    else
                    {
                        dataNpp = _mappingData;
                        dataNpp.UpdatedByNpp = npp;
                        dataNpp.UpdatedByUID = enroll.UID;
                        dataNpp.UpdatedByUnit = unitCode;
                        dataNpp.UpdatedTime = DateTime.Now;
                    }
                }

                var sysPathFolder = await _sysParameterRepository.GetPathFolder("PathFolderData");
                string pathFolder = sysPathFolder.Value;

                var photoKtpLog = new Tbl_DataKTP_Photo_Log();
                var photoKTPData = await _profileRepository.GetPhotoKtp(enroll.KtpNIK)
                        .ConfigureAwait(false);
                var exPhotoKtp = photoKTPData;

                #region update Photo KTP
                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoKTP))
                {
                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpPhotoKTP);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderPhoto")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderFoto = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "Foto_" + enroll.KtpNIK + "_" + JamServer + ".jpg";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderFoto, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderFoto))
                        {
                            Directory.CreateDirectory(subPathFolderFoto);
                        }

                        filePath = subPathFolderFoto + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoKTPData == null)
                    {
                        photoKTPData = new Tbl_DataKTP_Photo
                        {
                            PathFile = filePath,
                            Nik = enroll.KtpNIK,
                            FileName = fileName,
                            IsActive = true,
                            IsDeleted = false,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUid = enroll.UID,
                            UpdatedByUnit = unitCode,
                            UpdatedTime = DateTime.Now,
                            CreatedById = Id,
                            CreatedByNpp = npp,
                            CreatedByUid = enroll.UID,
                            CreatedByUnit = unitCode,
                            CreatedTime = DateTime.Now,
                        };
                    }
                    else
                    {
                        photoKtpLog.CreatedById = photoKTPData.CreatedById;
                        photoKtpLog.CreatedByNpp = photoKTPData.CreatedByNpp;
                        photoKtpLog.CreatedByUid = photoKTPData.CreatedByUid;
                        photoKtpLog.CreatedByUnit = photoKTPData.CreatedByUnit;
                        photoKtpLog.CreatedTime = photoKTPData.CreatedTime;
                        photoKtpLog.FileName = photoKTPData.FileName;
                        photoKtpLog.Nik = photoKTPData.Nik;
                        photoKtpLog.PathFile = photoKTPData.PathFile;

                        photoKTPData.PathFile = filePath;
                        photoKTPData.Nik = enroll.KtpNIK;
                        photoKTPData.FileName = fileName;
                        photoKTPData.IsActive = true;
                        photoKTPData.IsDeleted = false;
                        photoKTPData.UpdatedById = Id;
                        photoKTPData.UpdatedByNpp = npp;
                        photoKTPData.UpdatedByUid = enroll.UID;
                        photoKTPData.UpdatedByUnit = unitCode;
                        photoKTPData.UpdatedTime = DateTime.Now;
                    }
                }
                else
                {
                    stringPerubahan = stringPerubahan + "Request Payload Photo Tidak Ditemukan" + " <br/>";
                }
                #endregion

                var photoSignatureLog = new Tbl_DataKTP_Signature_Log();
                var photoSignatureData = await _profileRepository.GetPhotoSignature(enroll.KtpNIK)
                        .ConfigureAwait(false);
                var exphotoSignatureData = photoSignatureData;

                #region update signature
                if (!string.IsNullOrWhiteSpace(enroll.KtpSignature))
                {
                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpSignature);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderSignature")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderSignature = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "Signature_" + enroll.KtpNIK + "_" + JamServer + ".jpg";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderSignature, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderSignature))
                        {
                            Directory.CreateDirectory(subPathFolderSignature);
                        }

                        filePath = subPathFolderSignature + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoSignatureData == null)
                    {
                        photoSignatureData = new Tbl_DataKTP_Signature();
                        photoSignatureData.UpdatedById = Id;
                        photoSignatureData.UpdatedByNpp = npp;
                        photoSignatureData.UpdatedByUid = enroll.UID;
                        photoSignatureData.UpdatedTime = DateTime.Now;
                        photoSignatureData.UpdatedByUnit = unitCode;
                        photoSignatureData.IsActive = true;
                        photoSignatureData.IsDeleted = false;
                        photoSignatureData.Nik = enroll.KtpNIK;
                        photoSignatureData.FileName = fileName;
                        photoSignatureData.PathFile = filePath;
                        photoSignatureData.CreatedById = Id;
                        photoSignatureData.CreatedByNpp = npp;
                        photoSignatureData.CreatedByUid = enroll.UID;
                        photoSignatureData.CreatedByUnit = unitCode;
                        photoSignatureData.CreatedTime = DateTime.Now;
                    }
                    else
                    {
                        photoSignatureLog.CreatedById = photoSignatureData.CreatedById;
                        photoSignatureLog.CreatedByNpp = photoSignatureData.CreatedByNpp;
                        photoSignatureLog.CreatedByUid = photoSignatureData.CreatedByUid;
                        photoSignatureLog.CreatedByUnit = photoSignatureData.CreatedByUnit;
                        photoSignatureLog.CreatedTime = photoSignatureData.CreatedTime;
                        photoSignatureLog.FileName = photoSignatureData.FileName;
                        photoSignatureLog.Nik = photoSignatureData.Nik;
                        photoSignatureLog.PathFile = photoSignatureData.PathFile;

                        photoSignatureData.UpdatedById = Id;
                        photoSignatureData.UpdatedByNpp = npp;
                        photoSignatureData.UpdatedByUid = enroll.UID;
                        photoSignatureData.UpdatedTime = DateTime.Now;
                        photoSignatureData.IsActive = true;
                        photoSignatureData.IsDeleted = false;
                        photoSignatureData.Nik = enroll.KtpNIK;
                        photoSignatureData.FileName = fileName;
                        photoSignatureData.PathFile = filePath;
                    }
                }
                else
                {
                    stringPerubahan = stringPerubahan + "Request Payload Signature Tidak Ditemukan" + " <br/>";
                }
                #endregion

                var photoCamLog = new Tbl_DataKTP_PhotoCam_Log();
                var photoCamData = await _profileRepository.GetPhotoCam(enroll.KtpNIK)
                        .ConfigureAwait(false);
                var exphotoCamData = photoCamData;

                #region update photo cam
                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoCam))
                {
                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpPhotoCam);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderWebcam")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string SubPathFolderPhotoCam = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "PhotoCam_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(SubPathFolderPhotoCam, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(SubPathFolderPhotoCam))
                        {
                            Directory.CreateDirectory(SubPathFolderPhotoCam);
                        }

                        filePath = SubPathFolderPhotoCam + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoCamData == null)
                    {
                        photoCamData = new Tbl_DataKTP_PhotoCam();
                        photoCamData.PathFile = filePath;
                        photoCamData.Nik = enroll.KtpNIK;
                        photoCamData.FileName = fileName;
                        photoCamData.IsActive = true;
                        photoCamData.IsDeleted = false;
                        photoCamData.UpdatedById = Id;
                        photoCamData.UpdatedByNpp = npp;
                        photoCamData.UpdatedByUid = enroll.UID;
                        photoCamData.UpdatedTime = DateTime.Now;
                        photoCamData.UpdatedByUnit = unitCode;
                        photoCamLog.CreatedById = photoCamData.CreatedById;
                        photoCamLog.CreatedByNpp = photoCamData.CreatedByNpp;
                        photoCamLog.CreatedByUid = photoCamData.CreatedByUid;
                        photoCamLog.CreatedByUnit = photoCamData.CreatedByUnit;
                        photoCamLog.CreatedTime = photoCamData.CreatedTime;
                    }
                    else
                    {
                        photoCamLog.CreatedById = photoCamData.CreatedById;
                        photoCamLog.CreatedByNpp = photoCamData.CreatedByNpp;
                        photoCamLog.CreatedByUid = photoCamData.CreatedByUid;
                        photoCamLog.CreatedByUnit = photoCamData.CreatedByUnit;
                        photoCamLog.CreatedTime = photoCamData.CreatedTime;
                        photoCamLog.FileName = photoCamData.FileName;
                        photoCamLog.Nik = photoCamData.Nik;
                        photoCamLog.PathFile = photoCamData.PathFile;

                        photoCamData.PathFile = filePath;
                        photoCamData.Nik = enroll.KtpNIK;
                        photoCamData.FileName = fileName;
                        photoCamData.IsActive = true;
                        photoCamData.IsDeleted = false;
                        photoCamData.UpdatedById = Id;
                        photoCamData.UpdatedByNpp = npp;
                        photoCamData.UpdatedByUid = enroll.UID;
                        photoCamData.UpdatedTime = DateTime.Now;
                    }
                }
                else
                {
                    stringPerubahan = stringPerubahan + "Request Payload Photo Cam Tidak Ditemukan" + " <br/>";
                }
                #endregion

                #region finger
                var exPhotoFinger = new List<Tbl_DataKTP_Finger>();

                var exPhotoFingerEmployee = new List<Tbl_DataKTP_Finger_Employee>();

                var photoFingerLogs = new List<Tbl_DataKTP_Finger_Log>();

                var photoFingers = new List<Tbl_DataKTP_Finger>();

                var photoFingersEmployee = new List<Tbl_DataKTP_Finger_Employee>();

                var photoFingersEmployeeLogs = new List<Tbl_DataKTP_Finger_Employee_Log>();

                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKanan))
                {

                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);

                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                    }

                    string imageEncrypted = enroll.KtpFingerKanan.Encrypt(Phrase.FileEncryption);

                    string filePath = "";
                    string filePathIso = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKanan.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";
                    string fileNameIso = "";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    string isoEncrypted = "";

                    if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKananIso))
                    {
                        isoEncrypted = enroll.KtpFingerKananIso.Encrypt(Phrase.FileEncryption);
                        fileNameIso = "PhotoFingerISO_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                        if (_sftpConfig.IsActive)
                        {
                            using var stream = new MemoryStream(Encoding.ASCII.GetBytes(isoEncrypted));

                            (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileNameIso, _sftpConfig.Host,
                                _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                            filePathIso = fPath;
                        }
                        else
                        {
                            if (!Directory.Exists(subPathFolderPhotoFinger))
                            {
                                Directory.CreateDirectory(subPathFolderPhotoFinger);
                            }

                            filePathIso = subPathFolderPhotoFinger + fileNameIso;
                            File.WriteAllText(filePathIso, isoEncrypted);
                        }
                    }

                    if (photoFingerData == null)
                    {
                        photoFingerData = new Tbl_DataKTP_Finger
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = npp,
                            CreatedByUid = enroll.UID,
                            CreatedTime = DateTime.Now,
                            CreatedByUnit = unitCode,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            FileJariISO = isoEncrypted,
                            TypeFinger = enroll.KtpTypeJariKanan
                        };

                        photoFingers.Add(new Tbl_DataKTP_Finger
                        {
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUid,
                            CreatedTime = photoFingerData.CreatedTime,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUid = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            //FileJari = photoFingerData.FileJari,
                            FileJariISO = isoEncrypted,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            TypeFinger = enroll.KtpTypeJariKanan
                        });
                    }
                    else
                    {
                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUid,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            //FileJari = photoFingerData.FileJari,
                            FileJariISO = photoFingerData.FileJariISO,
                            FileName = photoFingerData.FileName,
                            FileNameISO = photoFingerData.FileNameISO,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            PathFileISO = photoFingerData.PathFileISO,
                            TypeFinger = photoFingerData.TypeFinger
                        });

                        exPhotoFinger.Add(photoFingerData);

                        photoFingers.Add(new Tbl_DataKTP_Finger
                        {
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUid,
                            CreatedTime = photoFingerData.CreatedTime,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUid = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            //FileJari = enroll.KtpFingerKanan,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            FileJariISO = isoEncrypted,
                            TypeFinger = enroll.KtpTypeJariKanan
                        });
                    }

                    if (isEmployee)
                    {
                        if (photoFingerDataEmployee == null)
                        {
                            photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee
                            {
                                CreatedById = Id,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,//
                                PathFileISO = filePathIso,//
                                CreatedByNpp = npp,
                                CreatedByUid = enroll.UID,
                                CreatedTime = DateTime.Now,
                                FileName = fileName,//
                                FileNameISO = fileNameIso,//
                                FileJariISO = isoEncrypted,
                                TypeFinger = enroll.KtpTypeJariKanan
                            };

                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                PathFileISO = filePathIso,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUid = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                //FileJari = photoFingerDataEmployee.FileJari,
                                FileJariISO = isoEncrypted,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKanan
                            });
                        }
                        else
                        {
                            photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                //FileJari = photoFingerDataEmployee.FileJari,
                                FileJariISO = photoFingerDataEmployee.FileJariISO,
                                FileName = photoFingerDataEmployee.FileName,
                                FileNameISO = photoFingerDataEmployee.FileNameISO,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                PathFileISO = photoFingerDataEmployee.PathFileISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger
                            });

                            exPhotoFingerEmployee.Add(photoFingerDataEmployee);

                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                PathFileISO = filePathIso,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUid = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                //FileJari = enroll.KtpFingerKanan,
                                FileJariISO = isoEncrypted,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKanan
                            });
                        }
                    }
                }
                else
                {
                    #region get data if no payload but we have to replace all data with no data
                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                    if (photoFingerData != null)
                    {
                        exPhotoFinger.Add(photoFingerData);

                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUid,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            //FileJari = photoFingerData.FileJari,
                            FileName = photoFingerData.FileName,
                            FileNameISO = photoFingerData.FileNameISO,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            TypeFinger = photoFingerData.TypeFinger
                        });
                    }

                    if (isEmployee)
                    {
                        var photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                        if (photoFingerDataEmployee != null)
                        {
                            exPhotoFingerEmployee.Add(photoFingerDataEmployee);

                            photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                //FileJari = photoFingerDataEmployee.FileJari,
                                FileName = photoFingerDataEmployee.FileName,
                                FileNameISO = photoFingerDataEmployee.FileNameISO,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                PathFileISO = photoFingerDataEmployee.PathFileISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger
                            });
                        }
                    }
                    #endregion

                    stringPerubahan = stringPerubahan + "Request Payload Finger Kanan Tidak Ditemukan" + " <br/>";
                }

                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKiri))
                {
                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);

                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                    }

                    string imageEncrypted = enroll.KtpFingerKiri.Encrypt(Phrase.FileEncryption);

                    string filePath = "";
                    string filePathIso = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKiri.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";
                    string fileNameIso = "";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    string isoEncrypted = "";

                    if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKiriIso))
                    {
                        isoEncrypted = enroll.KtpFingerKiriIso.Encrypt(Phrase.FileEncryption);
                        fileNameIso = "PhotoFingerISO_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                        if (_sftpConfig.IsActive)
                        {
                            using var stream = new MemoryStream(Encoding.ASCII.GetBytes(isoEncrypted));

                            (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileNameIso, _sftpConfig.Host,
                                _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                            filePathIso = fPath;
                        }
                        else
                        {
                            if (!Directory.Exists(subPathFolderPhotoFinger))
                            {
                                Directory.CreateDirectory(subPathFolderPhotoFinger);
                            }

                            filePathIso = subPathFolderPhotoFinger + fileNameIso;
                            File.WriteAllText(filePathIso, isoEncrypted);
                        }
                    }

                    if (photoFingerData == null)
                    {
                        photoFingerData = new Tbl_DataKTP_Finger
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = npp,
                            CreatedByUid = enroll.UID,
                            CreatedTime = DateTime.Now,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            FileJariISO = isoEncrypted,
                            TypeFinger = enroll.KtpTypeJariKiri
                        };

                        photoFingers.Add(new Tbl_DataKTP_Finger
                        {
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            FileNameISO = fileNameIso,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUid,
                            CreatedTime = photoFingerData.CreatedTime,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUid = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            //FileJari = photoFingerData.FileJari,
                            FileJariISO = isoEncrypted,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            TypeFinger = enroll.KtpTypeJariKiri
                        });
                    }
                    else
                    {
                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUid,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            //FileJari = photoFingerData.FileJari,
                            FileJariISO = photoFingerData.FileJariISO,
                            FileName = photoFingerData.FileName,
                            PathFileISO = photoFingerData.PathFileISO,
                            FileNameISO = photoFingerData.FileNameISO,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            TypeFinger = photoFingerData.TypeFinger
                        });

                        exPhotoFinger.Add(photoFingerData);

                        photoFingers.Add(new Tbl_DataKTP_Finger
                        {
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUid,
                            CreatedTime = photoFingerData.CreatedTime,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUid = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            //FileJari = enroll.KtpFingerKiri,
                            FileJariISO = isoEncrypted,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            TypeFinger = enroll.KtpTypeJariKiri
                        });
                    }

                    if (isEmployee)
                    {
                        if (photoFingerDataEmployee == null)
                        {
                            photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee
                            {
                                CreatedById = Id,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,//
                                PathFileISO = filePathIso,//
                                CreatedByNpp = npp,
                                CreatedByUid = enroll.UID,
                                CreatedTime = DateTime.Now,
                                FileName = fileName,//
                                FileNameISO = fileNameIso,//
                                FileJariISO = isoEncrypted,
                                //FileJari = enroll.KtpFingerKiri,
                                TypeFinger = enroll.KtpTypeJariKiri
                            };

                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                PathFileISO = filePathIso,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUid = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                //FileJari = photoFingerDataEmployee.FileJari,
                                FileJariISO = photoFingerDataEmployee.FileJariISO,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKiri
                            });
                        }
                        else
                        {
                            photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                //FileJari = photoFingerDataEmployee.FileJari,
                                FileJariISO = photoFingerDataEmployee.FileJariISO,
                                FileName = photoFingerDataEmployee.FileName,
                                FileNameISO = photoFingerDataEmployee.FileNameISO,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                PathFileISO = photoFingerDataEmployee.PathFileISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger
                            });

                            exPhotoFingerEmployee.Add(photoFingerDataEmployee);

                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                PathFileISO = filePathIso,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUid = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                //FileJari = enroll.KtpFingerKiri,
                                FileJariISO = isoEncrypted,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKiri
                            });
                        }
                    }
                }
                else
                {
                    #region get data if no payload but we have to replace all data with no data
                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                    if (photoFingerData != null)
                    {
                        exPhotoFinger.Add(photoFingerData);

                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUid,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            //FileJari = photoFingerData.FileJari,
                            FileName = photoFingerData.FileName,
                            FileNameISO = photoFingerData.FileNameISO,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            PathFileISO = photoFingerData.PathFileISO,
                            TypeFinger = photoFingerData.TypeFinger
                        });
                    }
                    if (isEmployee)
                    {
                        var photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                        if (photoFingerDataEmployee != null)
                        {
                            exPhotoFingerEmployee.Add(photoFingerDataEmployee);

                            photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                //FileJari = photoFingerDataEmployee.FileJari,
                                FileName = photoFingerDataEmployee.FileName,
                                FileNameISO = photoFingerDataEmployee.FileNameISO,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                PathFileISO = photoFingerDataEmployee.PathFileISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger
                            });
                        }
                    }
                    #endregion

                    stringPerubahan = stringPerubahan + "Request Payload Finger Kanan Tidak Ditemukan" + " <br/>";
                }
                #endregion

                var (status, msg) = await _enrollmentKTPRepository.InsertEnrollFlow2(cekKTP, logDemografi, photoKTPData, photoKtpLog, photoSignatureData,
                    photoSignatureLog, photoCamData, photoCamLog, photoFingers, photoFingersEmployee, photoFingerLogs, photoFingersEmployeeLogs, exPhotoKtp, exphotoSignatureData, exphotoCamData, exPhotoFinger, exPhotoFingerEmployee, dataReaderLog, dataNpp);

                #region Logging Reader Activity
                _ = _alatReaderRepository.CreateLogActivity2(dataReaderActivityLog);
                _ = _alatReaderRepository.CreateAlatReaderLog(dataReaderLog);
                #endregion

                if (status)
                {
                    return (_SuccessMessageConfig.NasabahSuksesUpdate, (int)ServiceResponseStatus.SUKSES, cekKTP.CIF);
                }
                else
                {
                    return (_ErrorMessageConfig.DemografiGagalEnroll, (int)ServiceResponseStatus.ERROR, msg + " " + stringPerubahan);
                }
            }
            else
            {
                #region Logging Reader Activity
                _ = _alatReaderRepository.CreateLogActivity2(dataReaderActivityLog);
                _ = _alatReaderRepository.CreateAlatReaderLog(dataReaderLog);
                #endregion

                return (_ErrorMessageConfig.DemografiTidakDitemukan, (int)ServiceResponseStatus.Data_Empty, "");
            }
            #endregion
        }
        #endregion

        #region ENrool & Re-enroll No Matching
        public async Task<(string msg, int code, string cif)> SubmitEnrollmentFingerEncryptedOnlyNoMatching(bool isHitSOA, ApiSOA ReqSoa, EnrollKTPNoMatching enroll, int Id, string npp,
            string unitCode, int unitId, int roleId)
        {
            var PengajuanID = Guid.NewGuid().ToString();
            bool isEmployee = false;
            var _empData = await _enrollmentKTPRepository.IsEmployee(enroll.KtpNIK);
            if (_empData != null)
            {
                isEmployee = true;
            }

            if (enroll.KtpTanggalLahir != null)
            {
                enroll.KtpTanggalLahir = enroll.KtpTanggalLahir.Replace(".", "");
                if (enroll.KtpTanggalLahir.Contains("/"))
                {
                    enroll.KtpTanggalLahir = enroll.KtpTanggalLahir.Replace("/", "-");
                }
                string[] arrayTanggl = enroll.KtpTanggalLahir.Split("-");
                string hari = "";
                string bulan = "";
                string tahun = "";

                if (arrayTanggl != null)
                {
                    if (arrayTanggl[0] != null)
                    {
                        if (arrayTanggl[0].Length != 2)
                        {
                            hari = "0" + arrayTanggl[0];

                        }
                        else
                        {
                            hari = arrayTanggl[0];

                        }
                    }

                    if (arrayTanggl[1] != null)
                    {
                        if (arrayTanggl[1].Length != 2)
                        {
                            bulan = "0" + arrayTanggl[1];

                        }
                        else
                        {
                            bulan = arrayTanggl[1];

                        }
                    }

                    if (arrayTanggl[2] != null)
                    {
                        tahun = arrayTanggl[2];
                    }
                }

                enroll.KtpTanggalLahir = hari + "-" + bulan + "-" + tahun;
            }

            const bool IsNewEnroll = true;
            string JamServer = DateTime.Now.ToString("ddMMyyyyHHmmss");
            bool IsNasabah = false;

            var cekKTP = await _profileRepository.GetDataDemografis(enroll.KtpNIK)
                .ConfigureAwait(false);

            if (cekKTP != null)
            {
                //return (_ErrorMessageConfig.NasabahPernahEnroll, (int)EnrollStatus.Sudah_di_enroll_sebelumnya, "");
                //var logDemografi = new Tbl_DataKTP_Demografis_Log
                //{
                //    Agama = cekKTP.Agama,
                //    Alamat = cekKTP.Alamat,
                //    AlamatGoogle = cekKTP.AlamatGoogle,
                //    AlamatLengkap = cekKTP.AlamatLengkap,
                //    CreatedById = cekKTP.CreatedById,
                //    CreatedByUID = cekKTP.CreatedByUID,
                //    CreatedByUnitId = cekKTP.CreatedByUnitId,
                //    CreatedTime = cekKTP.CreatedTime,
                //    Desa = cekKTP.Desa,
                //    GolonganDarah = cekKTP.GolonganDarah,
                //    JenisKelamin = cekKTP.JenisKelamin,
                //    Kecamatan = cekKTP.Kecamatan,
                //    Kelurahan = cekKTP.Kelurahan,
                //    Kewarganegaraan = cekKTP.Kewarganegaraan,
                //    KodePos = cekKTP.KodePos,
                //    Kota = cekKTP.Kota,
                //    Latitude = cekKTP.Latitude,
                //    Longitude = cekKTP.Longitude,
                //    MasaBerlaku = cekKTP.MasaBerlaku,
                //    Nama = cekKTP.Nama,
                //    NIK = cekKTP.NIK,
                //    Pekerjaan = cekKTP.Pekerjaan,
                //    Provinsi = cekKTP.Provinsi,
                //    RT = cekKTP.RT,
                //    RW = cekKTP.RW,
                //    StatusPerkawinan = cekKTP.StatusPerkawinan,
                //    TanggalLahir = cekKTP.TanggalLahir,
                //    TempatLahir = cekKTP.TempatLahir,
                //    CIF = cekKTP.CIF,
                //    CreatedByNpp = cekKTP.CreatedByNpp
                //};

                //var stringPerubahan = "";

                //if (cekKTP.Nama != enroll.KtpNama)
                //{
                //    stringPerubahan = stringPerubahan + "NAMA : " + cekKTP.Nama + " -> " + enroll.KtpNama + " <br/>";
                //    cekKTP.Nama = enroll.KtpNama;
                //}

                //if (cekKTP.TempatLahir != enroll.KtpTempatLahir)
                //{
                //    stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTP.TempatLahir + " -> " + enroll.KtpTempatLahir + " <br/>";
                //    cekKTP.TempatLahir = enroll.KtpTempatLahir;
                //}

                //if (enroll.KtpTanggalLahir != null)
                //{

                //    if (cekKTP.TempatLahir != enroll.KtpTempatLahir)
                //    {
                //        stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTP.TanggalLahir + " -> " + enroll.KtpTanggalLahir + " <br/>";
                //        cekKTP.TanggalLahir = DateTime.ParseExact(enroll.KtpTanggalLahir, "dd-MM-yyyy", CultureInfo.InvariantCulture);
                //    }

                //}

                //if (cekKTP.JenisKelamin != enroll.KtpJanisKelamin)
                //{
                //    stringPerubahan = stringPerubahan + "JENIS KELAMIN : " + cekKTP.JenisKelamin + " -> " + enroll.KtpJanisKelamin + " <br/>";
                //    cekKTP.JenisKelamin = enroll.KtpJanisKelamin;
                //}

                //if (cekKTP.GolonganDarah != enroll.KtpGolonganDarah)
                //{
                //    stringPerubahan = stringPerubahan + "GOLONGAN DARAH : " + cekKTP.GolonganDarah + " -> " + enroll.KtpGolonganDarah + " <br/>";
                //    cekKTP.GolonganDarah = enroll.KtpGolonganDarah;
                //}

                //if (cekKTP.Alamat != enroll.KtpAlamat)
                //{
                //    stringPerubahan = stringPerubahan + "ALAMAT : " + cekKTP.Alamat + " -> " + enroll.KtpAlamat + " <br/>";
                //    cekKTP.Alamat = enroll.KtpAlamat;
                //}

                //if (cekKTP.RT != enroll.KtpRT)
                //{
                //    stringPerubahan = stringPerubahan + "RT : " + cekKTP.RT + " -> " + enroll.KtpRT + " <br/>";
                //    cekKTP.RT = enroll.KtpRT;
                //}

                //if (cekKTP.RW != enroll.KtpRW)
                //{
                //    stringPerubahan = stringPerubahan + "RW : " + cekKTP.RW + " -> " + enroll.KtpRW + " <br/>";
                //    cekKTP.RW = enroll.KtpRW;
                //}

                //if (cekKTP.Kelurahan != enroll.KtpKelurahan)
                //{
                //    stringPerubahan = stringPerubahan + "KELURAHAN : " + cekKTP.Kelurahan + " -> " + enroll.KtpKelurahan + " <br/>";
                //    cekKTP.Kelurahan = enroll.KtpKelurahan;
                //}

                //if (cekKTP.Kecamatan != enroll.KtpKecamatan)
                //{
                //    stringPerubahan = stringPerubahan + "KECAMATAN : " + cekKTP.Kecamatan + " -> " + enroll.KtpKecamatan + " <br/>";
                //    cekKTP.Kecamatan = enroll.KtpKecamatan;
                //}

                //if (cekKTP.Kota != enroll.KtpKota)
                //{
                //    stringPerubahan = stringPerubahan + "KOTA/KABUPATEN : " + cekKTP.Kota + " -> " + enroll.KtpKota + " <br/>";
                //    cekKTP.Kota = enroll.KtpKota;
                //}

                //if (cekKTP.Provinsi != enroll.KtpProvinsi)
                //{
                //    stringPerubahan = stringPerubahan + "PROVINSI  : " + cekKTP.Provinsi + " -> " + enroll.KtpProvinsi + " <br/>";
                //    cekKTP.Provinsi = enroll.KtpProvinsi;
                //}

                //if (cekKTP.Agama != enroll.KtpAgama)
                //{
                //    stringPerubahan = stringPerubahan + "AGAMA  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                //    cekKTP.Agama = enroll.KtpAgama;
                //}

                //if (cekKTP.StatusPerkawinan != enroll.KtpStatusPerkawinan)
                //{
                //    stringPerubahan = stringPerubahan + "STATUS PERKAWINAN  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                //    cekKTP.StatusPerkawinan = enroll.KtpStatusPerkawinan;
                //}

                //if (cekKTP.Pekerjaan != enroll.KtpPekerjaan)
                //{
                //    stringPerubahan = stringPerubahan + "PEKERJAAN  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                //    cekKTP.Pekerjaan = enroll.KtpPekerjaan;
                //}

                //if (cekKTP.Kewarganegaraan != enroll.KtpKewarganegaraan)
                //{
                //    stringPerubahan = stringPerubahan + "KEWARGANEGARAAN  : " + cekKTP.Kewarganegaraan + " -> " + enroll.KtpKewarganegaraan + " <br/>";
                //    cekKTP.Kewarganegaraan = enroll.KtpKewarganegaraan;
                //}
                //if (cekKTP.MasaBerlaku != enroll.KtpMasaBerlaku)
                //{
                //    stringPerubahan = stringPerubahan + "MASA BERLAKU  : " + cekKTP.MasaBerlaku + " -> " + enroll.KtpMasaBerlaku + " <br/>";
                //    cekKTP.MasaBerlaku = enroll.KtpMasaBerlaku;
                //}

                //cekKTP.UpdatedTime = DateTime.Now;
                //cekKTP.UpdatedById = Id;
                //cekKTP.UpdatedByUID = enroll.UID;
                //cekKTP.UpdatedByUnitCode = unitCode;
                //cekKTP.UpdatedByUnitId = unitId;

                //await _profileRepository.UpdateDataDemografis(cekKTP)
                //    .ConfigureAwait(false);

                //if (string.IsNullOrWhiteSpace(stringPerubahan))
                //{
                //    return (_ErrorMessageConfig.NasabahPernahEnroll, (int)EnrollStatus.Sudah_di_enroll_sebelumnya, "");
                //}

                //_profileRepository.InsertDemografiLog(logDemografi);

                //return (stringPerubahan, (int)EnrollStatus.Berhasil_mengubah_beberapa_perubahan, "");
            }

            if (IsNewEnroll)
            {
                if (enroll?.KtpNIK == null) return (_ErrorMessageConfig.InputTidakLengkap, (int)EnrollStatus.Inputan_tidak_lengkap, "");

                var cifData = new ApiSOAResponse();
                #region Hit SOA And Loggging it
                if (isHitSOA == true)
                {
                    cifData = await _cifService.GetSOAByCif(ReqSoa)
                    .ConfigureAwait(false);

                    var status = 0;
                    if (cifData.cif != null)
                    {
                        status = 1;
                    }

                    var _log = new Tbl_ThirdPartyLog
                    {
                        FeatureName = "SubmitEnrollmentFingerEncryptedOnlyNoMatching",
                        HostUrl = ReqSoa.host,
                        Request = Newtonsoft.Json.JsonConvert.SerializeObject(ReqSoa),
                        Status = status,
                        Response = Newtonsoft.Json.JsonConvert.SerializeObject(cifData),
                        CreatedDate = System.DateTime.Now,
                        CreatedBy = npp
                    };

                    _ = _enrollmentKTPRepository.CreateThirdPartyLog(_log);
                }
                else
                {
                    try
                    {
                        var res = await _cifService.GetCIF(new NikDto { Nik = enroll.KtpNIK },
                        new NikDtoUrl { baseUrl = ReqSoa.baseUrlNonSoa, endpoint = ReqSoa.UrlEndPointNonSoa });
                        if (res.Data == null)
                        {
                            cifData.cif = null;
                        }
                        else
                        {
                            cifData.cif = res.Data.Cif;
                        };
                    }
                    catch (Exception ex)
                    {
                        cifData.cif = null;
                    }

                }
                #endregion

                if (!String.IsNullOrEmpty(cifData.cif))
                {
                    IsNasabah = true;
                    cifData.cif = cifData.cif.Trim();
                }

                var sysPathFolder = await _sysParameterRepository.GetPathFolder("PathFolderData");
                string pathFolder = sysPathFolder.Value;

                var dataDemografis = new Tbl_DataKTP_Demografis_Temp();

                var dataDemografisLog = new Tbl_DataKTP_Demografis_Log();

                var dataNpp = new Tbl_Mapping_Pegawai_KTP();

                if (cekKTP != null)
                {
                    dataDemografisLog = new Tbl_DataKTP_Demografis_Log
                    {
                        Agama = cekKTP.Agama,
                        Alamat = cekKTP.Alamat,
                        AlamatGoogle = cekKTP.AlamatGoogle,
                        AlamatLengkap = cekKTP.AlamatLengkap,
                        CreatedById = cekKTP.CreatedById,
                        CreatedByUID = cekKTP.CreatedByUID,
                        CreatedByUnitId = cekKTP.CreatedByUnitId,
                        CreatedTime = cekKTP.CreatedTime,
                        Desa = cekKTP.Desa,
                        GolonganDarah = cekKTP.GolonganDarah,
                        JenisKelamin = cekKTP.JenisKelamin,
                        Kecamatan = cekKTP.Kecamatan,
                        Kelurahan = cekKTP.Kelurahan,
                        Kewarganegaraan = cekKTP.Kewarganegaraan,
                        KodePos = cekKTP.KodePos,
                        Kota = cekKTP.Kota,
                        Latitude = cekKTP.Latitude,
                        Longitude = cekKTP.Longitude,
                        MasaBerlaku = cekKTP.MasaBerlaku,
                        Nama = cekKTP.Nama,
                        NIK = cekKTP.NIK,
                        Pekerjaan = cekKTP.Pekerjaan,
                        Provinsi = cekKTP.Provinsi,
                        RT = cekKTP.RT,
                        RW = cekKTP.RW,
                        StatusPerkawinan = cekKTP.StatusPerkawinan,
                        TanggalLahir = cekKTP.TanggalLahir,
                        TempatLahir = cekKTP.TempatLahir
                    };

                    cekKTP.Agama = enroll.KtpAgama;
                    cekKTP.Alamat = enroll.KtpAlamat;
                    cekKTP.AlamatGoogle = enroll.KtpAlamatConvertLatlong;
                    cekKTP.AlamatLengkap = enroll.KtpAlamatConvertLengkap;
                    if (string.IsNullOrWhiteSpace(cifData.cif))
                    {
                        cekKTP.CIF = cifData.cif;
                    }
                    cekKTP.GolonganDarah = enroll.KtpGolonganDarah;
                    cekKTP.JenisKelamin = enroll.KtpJanisKelamin;
                    cekKTP.Kecamatan = enroll.KtpKecamatan;
                    cekKTP.Kelurahan = enroll.KtpKelurahan;
                    cekKTP.Kewarganegaraan = enroll.KtpKewarganegaraan;
                    cekKTP.KodePos = enroll.KtpKodePos;
                    cekKTP.Kota = enroll.KtpKota;
                    cekKTP.Latitude = enroll.KtpLatitude;
                    cekKTP.Longitude = enroll.KtpLongitude;
                    cekKTP.MasaBerlaku = enroll.KtpMasaBerlaku;
                    cekKTP.Nama = enroll.KtpNama;
                    cekKTP.NIK = enroll.KtpNIK;
                    cekKTP.Pekerjaan = enroll.KtpPekerjaan;
                    cekKTP.Provinsi = enroll.KtpProvinsi;
                    cekKTP.RT = enroll.KtpRT;
                    cekKTP.RW = enroll.KtpRW;
                    cekKTP.StatusPerkawinan = enroll.KtpStatusPerkawinan;
                    cekKTP.TanggalLahir = string.IsNullOrWhiteSpace(enroll.KtpTanggalLahir) ? null : DateTime.ParseExact(enroll.KtpTanggalLahir, "dd-MM-yyyy", CultureInfo.InvariantCulture);
                    cekKTP.TempatLahir = enroll.KtpTempatLahir;
                    cekKTP.UpdatedById = Id;
                    cekKTP.UpdatedByNpp = npp;
                    cekKTP.UpdatedByUID = enroll.UID;
                    cekKTP.UpdatedTime = DateTime.Now;
                    cekKTP.UpdatedByUnitCode = unitCode;
                    cekKTP.UpdatedByUnitId = unitId;

                    dataDemografis = new Tbl_DataKTP_Demografis_Temp
                    {
                        Agama = cekKTP.Agama,
                        Alamat = cekKTP.Alamat,
                        AlamatGoogle = cekKTP.AlamatGoogle,
                        AlamatLengkap = cekKTP.AlamatLengkap,
                        CIF = (cifData.cif),
                        NIK = cekKTP.NIK,
                        CreatedById = Id,
                        IsActive = true,
                        IsDeleted = false,
                        JenisKelamin = cekKTP.JenisKelamin,
                        Kecamatan = cekKTP.Kecamatan,
                        Kelurahan = cekKTP.Kelurahan,
                        CreatedByUID = enroll.UID,
                        CreatedTime = DateTime.Now,
                        GolonganDarah = cekKTP.GolonganDarah,
                        Kewarganegaraan = cekKTP.Kewarganegaraan,
                        KodePos = cekKTP.KodePos,
                        Kota = cekKTP.Kota,
                        Latitude = cekKTP.Latitude,
                        Longitude = cekKTP.Longitude,
                        MasaBerlaku = cekKTP.MasaBerlaku,
                        Nama = cekKTP.Nama,
                        Pekerjaan = cekKTP.Pekerjaan,
                        Provinsi = cekKTP.Provinsi,
                        RT = cekKTP.RT,
                        RW = cekKTP.RW,
                        StatusPerkawinan = cekKTP.StatusPerkawinan,
                        TanggalLahir = cekKTP.TanggalLahir,
                        TempatLahir = cekKTP.TempatLahir,
                        CreatedByNpp = npp,
                        CreatedByUnitCode = unitCode,
                        CreatedByUnitId = unitId,
                        IsVerified = false,
                        IsNasabahTemp = string.IsNullOrWhiteSpace(cifData.cif),
                        IsApprove = false,
                        NoPengajuan = PengajuanID
                    };
                }
                else
                {
                    dataDemografis = new Tbl_DataKTP_Demografis_Temp
                    {
                        Agama = enroll.KtpAgama,
                        Alamat = enroll.KtpAlamat,
                        AlamatGoogle = enroll.KtpAlamatConvertLatlong,
                        AlamatLengkap = enroll.KtpAlamatConvertLengkap,
                        CIF = (cifData.cif),
                        NIK = enroll.KtpNIK,
                        CreatedById = Id,
                        IsActive = true,
                        IsDeleted = false,
                        JenisKelamin = enroll.KtpJanisKelamin,
                        Kecamatan = enroll.KtpKecamatan,
                        Kelurahan = enroll.KtpKelurahan,
                        CreatedByUID = enroll.UID,
                        CreatedTime = DateTime.Now,
                        GolonganDarah = enroll.KtpGolonganDarah,
                        Kewarganegaraan = enroll.KtpKewarganegaraan,
                        KodePos = enroll.KtpKodePos,
                        Kota = enroll.KtpKota,
                        Latitude = enroll.KtpLatitude,
                        Longitude = enroll.KtpLongitude,
                        MasaBerlaku = enroll.KtpMasaBerlaku,
                        Nama = enroll.KtpNama,
                        Pekerjaan = enroll.KtpPekerjaan,
                        Provinsi = enroll.KtpProvinsi,
                        RT = enroll.KtpRT,
                        RW = enroll.KtpRW,
                        StatusPerkawinan = enroll.KtpStatusPerkawinan,
                        TanggalLahir = string.IsNullOrWhiteSpace(enroll.KtpTanggalLahir) ? null : DateTime.ParseExact(enroll.KtpTanggalLahir, "dd-MM-yyyy", CultureInfo.InvariantCulture),
                        TempatLahir = enroll.KtpTempatLahir,
                        CreatedByNpp = npp,
                        CreatedByUnitCode = unitCode,
                        CreatedByUnitId = unitId,
                        IsVerified = false,
                        IsNasabahTemp = string.IsNullOrWhiteSpace(cifData.cif),
                        IsApprove = false,
                        NoPengajuan = PengajuanID
                    };

                    if (isEmployee)
                    {
                        dataNpp = new Tbl_Mapping_Pegawai_KTP
                        {
                            CreatedById = Id,
                            NIK = enroll.KtpNIK,
                            Npp = _empData.Npp,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now
                        };
                    }
                }

                var exPhotoKtp = new Tbl_DataKTP_Photo_Temp();

                var photoKtpLog = new Tbl_DataKTP_Photo_Log();

                var photoKtp = new Tbl_DataKTP_Photo_Temp();

                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoKTP))
                {
                    var photoKTPData = await _profileRepository.GetPhotoKtp(enroll.KtpNIK)
                        .ConfigureAwait(false);

                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpPhotoKTP);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderPhoto")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderFoto = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "Foto_" + enroll.KtpNIK + "_" + JamServer + ".jpg";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderFoto, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {

                        if (!Directory.Exists(subPathFolderFoto))
                        {
                            Directory.CreateDirectory(subPathFolderFoto);
                        }

                        filePath = subPathFolderFoto + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoKTPData != null)
                    {
                        //photoKtpLog.CreatedById = photoKTPData.CreatedById;
                        //photoKtpLog.CreatedByNpp = photoKTPData.CreatedByNpp;
                        //photoKtpLog.CreatedByUid = photoKTPData.CreatedByUid;
                        //photoKtpLog.CreatedByUnit = photoKTPData.CreatedByUnit;
                        //photoKtpLog.CreatedTime = photoKTPData.CreatedTime;
                        //photoKtpLog.FileName = photoKTPData.FileName;
                        //photoKtpLog.Nik = photoKTPData.Nik;
                        //photoKtpLog.PathFile = photoKTPData.PathFile;

                        exPhotoKtp = new Tbl_DataKTP_Photo_Temp
                        {
                            PathFile = photoKTPData.PathFile,
                            Nik = photoKTPData.Nik,
                            FileName = photoKTPData.FileName,
                            IsActive = photoKTPData.IsActive,
                            IsDeleted = photoKTPData.IsDeleted,
                            CreatedById = photoKTPData.CreatedById,
                            CreatedByNpp = photoKTPData.CreatedByNpp,
                            CreatedByUID = photoKTPData.CreatedByUid,
                            CreatedTime = photoKTPData.CreatedTime,
                            CreatedByUnit = photoKTPData.CreatedByUnit,
                            UpdatedById = photoKTPData.UpdatedById,
                            UpdatedByNpp = photoKTPData.UpdatedByNpp,
                            UpdatedByUID = photoKTPData.UpdatedByUid,
                            UpdatedByUnit = photoKTPData.UpdatedByUnit,
                            UpdatedTime = photoKTPData.UpdatedTime,
                            Id = photoKTPData.Id,
                            NoPengajuan = PengajuanID
                        };
                    }

                    photoKtp = new Tbl_DataKTP_Photo_Temp
                    {
                        PathFile = filePath,
                        Nik = enroll.KtpNIK,
                        FileName = fileName,
                        IsActive = true,
                        IsDeleted = false,
                        CreatedById = Id,
                        CreatedByNpp = npp,
                        CreatedByUID = enroll.UID,
                        CreatedTime = DateTime.Now,
                        IsApprove = false,
                        NoPengajuan = PengajuanID
                    };
                }

                var exPhotoSignature = new Tbl_DataKTP_Signature_Temp();

                var photoSignatureLog = new Tbl_DataKTP_Signature_Log();

                var photoSignature = new Tbl_DataKTP_Signature_Temp();

                if (!string.IsNullOrWhiteSpace(enroll.KtpSignature))
                {
                    var photoSignatureData = await _profileRepository.GetPhotoSignature(enroll.KtpNIK)
                        .ConfigureAwait(false);

                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpSignature);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderSignature")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderSignature = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";
                    //string subPathFolderSignature = pathFolder + pathFolderFoto + enroll.KtpNIK;

                    string fileName = "Signature_" + enroll.KtpNIK + "_" + JamServer + ".jpg";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderSignature, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderSignature))
                        {
                            Directory.CreateDirectory(subPathFolderSignature);
                        }

                        filePath = subPathFolderSignature + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoSignatureData != null)
                    {
                        //photoSignatureLog.CreatedById = photoSignatureData.CreatedById;
                        //photoSignatureLog.CreatedByNpp = photoSignatureData.CreatedByNpp;
                        //photoSignatureLog.CreatedByUid = photoSignatureData.CreatedByUid;
                        //photoSignatureLog.CreatedByUnit = photoSignatureData.CreatedByUnit;
                        //photoSignatureLog.CreatedTime = photoSignatureData.CreatedTime;
                        //photoSignatureLog.FileName = photoSignatureData.FileName;
                        //photoSignatureLog.Nik = photoSignatureData.Nik;
                        //photoSignatureLog.PathFile = photoSignatureData.PathFile;

                        exPhotoSignature = new Tbl_DataKTP_Signature_Temp
                        {
                            CreatedById = photoSignatureData.CreatedById,
                            CreatedByNpp = photoSignatureData.CreatedByNpp,
                            IsActive = photoSignatureData.IsActive,
                            IsDeleted = photoSignatureData.IsDeleted,
                            Nik = photoSignatureData.Nik,
                            FileName = photoSignatureData.FileName,
                            CreatedByUID = photoSignatureData.CreatedByUid,
                            CreatedTime = photoSignatureData.CreatedTime,
                            PathFile = photoSignatureData.PathFile,
                            CreatedByUnit = photoSignatureData.CreatedByUnit,
                            UpdatedById = photoSignatureData.UpdatedById,
                            UpdatedByNpp = photoSignatureData.UpdatedByNpp,
                            UpdatedByUID = photoSignatureData.UpdatedByUid,
                            UpdatedByUnit = photoSignatureData.UpdatedByUnit,
                            UpdatedTime = photoSignatureData.UpdatedTime,
                            Id = photoSignatureData.Id,
                            NoPengajuan = PengajuanID
                        };
                    }

                    photoSignature = new Tbl_DataKTP_Signature_Temp
                    {
                        CreatedById = Id,
                        CreatedByNpp = npp,
                        IsActive = true,
                        IsDeleted = false,
                        Nik = enroll.KtpNIK,
                        FileName = fileName,
                        CreatedByUID = enroll.UID,
                        CreatedTime = DateTime.Now,
                        PathFile = filePath,
                        NoPengajuan = PengajuanID
                    };
                }

                var exPhotoCam = new Tbl_DataKTP_PhotoCam_Temp();

                var photoCamLog = new Tbl_DataKTP_PhotoCam_Log();

                var photoCam = new Tbl_DataKTP_PhotoCam_Temp();

                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoCam))
                {
                    var photoCamData = await _profileRepository.GetPhotoCam(enroll.KtpNIK)
                        .ConfigureAwait(false);

                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpPhotoCam);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderWebcam")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string SubPathFolderPhotoCam = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";
                    //string SubPathFolderPhotoCam = pathFolder + pathFolderFoto + enroll.KtpNIK;

                    string fileName = "PhotoCam_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(SubPathFolderPhotoCam, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(SubPathFolderPhotoCam))
                        {
                            Directory.CreateDirectory(SubPathFolderPhotoCam);
                        }

                        filePath = SubPathFolderPhotoCam + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoCamData != null)
                    {
                        //photoCamLog.CreatedById = photoCamData.CreatedById;
                        //photoCamLog.CreatedByNpp = photoCamData.CreatedByNpp;
                        //photoCamLog.CreatedByUid = photoCamData.CreatedByUid;
                        //photoCamLog.CreatedByUnit = photoCamData.CreatedByUnit;
                        //photoCamLog.CreatedTime = photoCamData.CreatedTime;
                        //photoCamLog.FileName = photoCamData.FileName;
                        //photoCamLog.Nik = photoCamData.Nik;
                        //photoCamLog.PathFile = photoCamData.PathFile;

                        exPhotoCam = new Tbl_DataKTP_PhotoCam_Temp
                        {
                            Id = photoCamData.Id,
                            PathFile = photoCamData.PathFile,//
                            Nik = photoCamData.Nik,
                            FileName = photoCamData.FileName,//
                            CreatedTime = photoCamData.CreatedTime,
                            CreatedById = photoCamData.CreatedById,
                            IsActive = photoCamData.IsActive,
                            IsDeleted = photoCamData.IsDeleted,
                            CreatedByNpp = photoCamData.CreatedByNpp,
                            CreatedByUID = photoCamData.CreatedByUid,
                            CreatedByUnit = photoCamData.CreatedByUnit,
                            UpdatedById = photoCamData.UpdatedById,
                            UpdatedByNpp = photoCamData.UpdatedByNpp,
                            UpdatedByUID = photoCamData.UpdatedByUid,
                            UpdatedByUnit = photoCamData.UpdatedByUnit,
                            UpdatedTime = photoCamData.UpdatedTime,
                            NoPengajuan = PengajuanID
                        };
                    }

                    photoCam = new Tbl_DataKTP_PhotoCam_Temp
                    {
                        PathFile = filePath,//
                        Nik = enroll.KtpNIK,
                        FileName = fileName,//
                        CreatedTime = DateTime.Now,
                        CreatedById = Id,
                        IsActive = true,
                        IsDeleted = false,
                        CreatedByNpp = npp,
                        CreatedByUID = enroll.UID,
                        IsApprove = false,
                        NoPengajuan = PengajuanID
                    };
                }

                var exPhotoFinger = new List<Tbl_DataKTP_Finger_Temp>();

                var exPhotoFingerEmployee = new List<Tbl_DataKTP_Finger_Employee_Temp>();

                var photoFingerLogs = new List<Tbl_DataKTP_Finger_Log>();

                var photoFingers = new List<Tbl_DataKTP_Finger_Temp>();

                var photoFingersEmployee = new List<Tbl_DataKTP_Finger_Employee_Temp>();

                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKanan))
                {

                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);

                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                    }

                    string imageEncrypted = enroll.KtpFingerKanan.Encrypt(Phrase.FileEncryption);

                    string filePath = "";
                    string filePathIso = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKanan.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";
                    string fileNameIso = "";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    string isoEncrypted = "";
                    if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKananIso))
                    {
                        isoEncrypted = enroll.KtpFingerKananIso.Encrypt(Phrase.FileEncryption);
                        fileNameIso = "PhotoFingerISO_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                        if (_sftpConfig.IsActive)
                        {
                            using var stream = new MemoryStream(Encoding.ASCII.GetBytes(isoEncrypted));

                            (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileNameIso, _sftpConfig.Host,
                                _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                            filePathIso = fPath;
                        }
                        else
                        {
                            if (!Directory.Exists(subPathFolderPhotoFinger))
                            {
                                Directory.CreateDirectory(subPathFolderPhotoFinger);
                            }

                            filePathIso = subPathFolderPhotoFinger + fileNameIso;
                            File.WriteAllText(filePathIso, isoEncrypted);
                        }
                    }

                    if (photoFingerData != null)
                    {
                        //photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        //{
                        //    CreatedById = photoFingerData.CreatedById,
                        //    CreatedByNpp = photoFingerData.CreatedByNpp,
                        //    CreatedByUid = photoFingerData.CreatedByUid,
                        //    CreatedByUnit = photoFingerData.CreatedByUnit,
                        //    CreatedByUnitId = photoFingerData.CreatedByUnitId,
                        //    CreatedTime = photoFingerData.CreatedTime,
                        //    //FileJari = photoFingerData.FileJari,
                        //    FileJariISO = photoFingerData.FileJariISO,
                        //    FileName = photoFingerData.FileName,
                        //    FileNameISO = photoFingerData.FileNameISO,
                        //    Nik = photoFingerData.Nik,
                        //    PathFile = photoFingerData.PathFile,
                        //    PathFileISO = photoFingerData.PathFileISO,
                        //    TypeFinger = photoFingerData.TypeFinger
                        //});

                        exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            Id = photoFingerData.Id,
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = photoFingerData.IsActive,
                            IsDeleted = photoFingerData.IsDeleted,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,//
                            PathFileISO = photoFingerData.PathFileISO,//
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUID = photoFingerData.CreatedByUid,
                            CreatedTime = DateTime.Now,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            FileName = photoFingerData.FileName,//
                            FileNameISO = photoFingerData.FileNameISO,//
                            FileJariISO = photoFingerData.FileJariISO,
                            TypeFinger = photoFingerData.TypeFinger,
                            UpdatedById = photoFingerData.UpdatedById,
                            UpdatedByNpp = photoFingerData.UpdatedByNpp,
                            UpdatedByUID = photoFingerData.UpdatedByUid,
                            UpdatedByUnit = photoFingerData.UpdatedByUnit,
                            UpdatedTime = photoFingerData.UpdatedTime,
                            NoPengajuan = PengajuanID
                        });
                    }

                    photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                    {
                        CreatedById = Id,
                        IsActive = true,
                        IsDeleted = false,
                        Nik = enroll.KtpNIK,
                        PathFile = filePath,//
                        PathFileISO = filePathIso,//
                        CreatedByNpp = npp,
                        CreatedByUID = enroll.UID,
                        CreatedTime = DateTime.Now,
                        FileName = fileName,//
                        FileNameISO = fileNameIso,//
                        FileJariISO = isoEncrypted,
                        TypeFinger = enroll.KtpTypeJariKanan,
                        IsApprove = false,
                        NoPengajuan = PengajuanID
                    });

                    if (isEmployee)
                    {
                        photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,//
                            PathFileISO = filePathIso,//
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            FileName = fileName,//
                            FileNameISO = fileNameIso,//
                            FileJariISO = isoEncrypted,
                            TypeFinger = enroll.KtpTypeJariKanan,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        });
                    }
                }

                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKiri))
                {
                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);

                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                    }

                    string imageEncrypted = enroll.KtpFingerKiri.Encrypt(Phrase.FileEncryption);

                    string filePath = "";
                    string filePathIso = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKiri.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";
                    string fileNameIso = "";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }
                    string isoEncrypted = "";

                    if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKiriIso))
                    {
                        isoEncrypted = enroll.KtpFingerKiriIso.Encrypt(Phrase.FileEncryption);
                        fileNameIso = "PhotoFingerISO_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                        if (_sftpConfig.IsActive)
                        {
                            using var stream = new MemoryStream(Encoding.ASCII.GetBytes(isoEncrypted));

                            (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileNameIso, _sftpConfig.Host,
                                _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                            filePathIso = fPath;
                        }
                        else
                        {
                            if (!Directory.Exists(subPathFolderPhotoFinger))
                            {
                                Directory.CreateDirectory(subPathFolderPhotoFinger);
                            }

                            filePathIso = subPathFolderPhotoFinger + fileNameIso;
                            File.WriteAllText(filePathIso, isoEncrypted);
                        }
                    }

                    if (photoFingerData != null)
                    {
                        //photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        //{
                        //    CreatedById = photoFingerData.CreatedById,
                        //    CreatedByNpp = photoFingerData.CreatedByNpp,
                        //    CreatedByUid = photoFingerData.CreatedByUid,
                        //    CreatedByUnit = photoFingerData.CreatedByUnit,
                        //    CreatedByUnitId = photoFingerData.CreatedByUnitId,
                        //    CreatedTime = photoFingerData.CreatedTime,
                        //    //FileJari = photoFingerData.FileJari,
                        //    FileJariISO = photoFingerData.FileJariISO,
                        //    FileName = photoFingerData.FileName,
                        //    FileNameISO = photoFingerData.FileNameISO,
                        //    Nik = photoFingerData.Nik,
                        //    PathFile = photoFingerData.PathFile,
                        //    PathFileISO = photoFingerData.PathFileISO,
                        //    TypeFinger = photoFingerData.TypeFinger
                        //});

                        exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            Id = photoFingerData.Id,
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = photoFingerData.IsActive,
                            IsDeleted = photoFingerData.IsDeleted,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,//
                            PathFileISO = photoFingerData.PathFileISO,//
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUID = photoFingerData.CreatedByUid,
                            CreatedTime = DateTime.Now,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            FileName = photoFingerData.FileName,//
                            FileNameISO = photoFingerData.FileNameISO,//
                            FileJariISO = photoFingerData.FileJariISO,
                            TypeFinger = photoFingerData.TypeFinger,
                            UpdatedById = photoFingerData.UpdatedById,
                            UpdatedByNpp = photoFingerData.UpdatedByNpp,
                            UpdatedByUID = photoFingerData.UpdatedByUid,
                            UpdatedByUnit = photoFingerData.UpdatedByUnit,
                            UpdatedTime = photoFingerData.UpdatedTime,
                            NoPengajuan = PengajuanID
                        });
                    }

                    photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                    {
                        CreatedById = Id,
                        IsActive = true,
                        IsDeleted = false,
                        Nik = enroll.KtpNIK,
                        PathFile = filePath,//
                        PathFileISO = filePathIso,//
                        CreatedByNpp = npp,
                        CreatedByUID = enroll.UID,
                        CreatedTime = DateTime.Now,
                        FileName = fileName,//
                        FileNameISO = fileNameIso,//
                        FileJariISO = isoEncrypted,//
                        TypeFinger = enroll.KtpTypeJariKiri,
                        IsApprove = false,
                        NoPengajuan = PengajuanID
                    });

                    if (isEmployee)
                    {
                        photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,//
                            PathFileISO = filePathIso,//
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            FileName = fileName,//
                            FileNameISO = fileNameIso,//
                            FileJariISO = isoEncrypted,//
                            TypeFinger = enroll.KtpTypeJariKiri,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        });
                    }
                }

                // to do: alat reader log
                var dataReader = await _dataReaderRepository.GetDatareaderUid(enroll.UID).ConfigureAwait(false);

                var dataReaderLog = new Tbl_MasterAlatReaderLog();

                if (dataReader != null)
                {
                    dataReaderLog = new Tbl_MasterAlatReaderLog
                    {
                        CreatedBy_Id = Id,
                        CreatedTime = DateTime.Now,
                        IsActive = true,
                        IsDeleted = false,
                        Nik = enroll.KtpNIK,
                        PegawaiId = Id,
                        Serial_Number = dataReader.SN_Unit,
                        Type = "Enroll No Matching",
                        Uid = enroll.UID,
                        UnitId = unitId
                    };
                }

                var inboxTemp = new Tbl_Inbox_Enrollment_Temp() { 
                    CreatedById = Id,
                    CreatedByNpp = npp,
                    CreatedByUnitCode = unitCode,
                    CreatedByUnitId = unitId,
                    CreatedTime = DateTime.Now,
                    ApprovedStatus = 1,
                    Status= 1,
                    NoPengajuan = PengajuanID,
                    ApprovedByEmployeeId = enroll.ApprovedByEmployeeId,
                    ApprovedByEmployeeId2 = enroll.ApprovedByEmployeeId2
                    
                };

                var inboxTempDetail = new Tbl_Inbox_Enrollment_Temp_Detail() { 
                    Notes = enroll.Notes,
                    SubmitById = Id,
                    SubmitByNpp = npp,
                    SubmitedByUnitCode = unitCode,
                    SubmitedByUnitId = unitId,
                    CreatedTime = DateTime.Now,
                    ApprovedStatus = 1,
                    Status = 1,
                    NoPengajuan = PengajuanID
                };

                var mappingNIk = new EnrollmentFRLog()
                {
                    NIK = enroll.KtpNIK,
                    CreatedById = Id,
                    CreatedByNpp = npp,
                    CreatedByUnitId = unitId,
                    CreatedTime = DateTime.Now,
                    MatchScore = enroll.MatchScore
                };

                var (result, msg) = await _enrollmentKTPRepository.InsertEnrollFlowNoMatching(mappingNIk,dataDemografis, dataDemografisLog, photoKtp, photoKtpLog, photoSignature, photoSignatureLog,
                    photoCam, photoCamLog, photoFingers, photoFingerLogs, exPhotoKtp, exPhotoSignature, exPhotoCam, exPhotoFinger, dataNpp, dataReaderLog, photoFingersEmployee, exPhotoFingerEmployee, inboxTemp, inboxTempDetail);

                await _alatReaderRepository.CreateLogActivity2(new Tbl_MasterAlatReaderLogActvity
                {
                    CreatedBy_Id = Id,
                    IsActive = true,
                    IsDeleted = false,
                    KodeUnit = unitCode,
                    LastIP = enroll.IpAddress,
                    NIK = enroll.KtpNIK,
                    CreatedTime = DateTime.Now,
                    NppPegawai = npp,
                    PegawaiId = Id,
                    Type = "Enroll",
                    UID = enroll.UID,
                    UnitId = unitId
                });
            }

            if (IsNasabah)
            {
                return (_SuccessMessageConfig.NasabahSuksesEnrollNasabah, (int)EnrollStatus.Nasabah_Berhasil_di_enroll, cekKTP?.CIF);
            }
            else
            {
                return (_SuccessMessageConfig.NasabahSuksesEnrollNonNasabah, (int)EnrollStatus.Nasabah_Berhasil_di_enroll, cekKTP?.CIF);
            }
        }

        public async Task<(string msg, int code, string cif)> ReSubmitEnrollmentFingerEncryptedOnlyNoMatching(bool isHitSOA, ApiSOA ReqSoa, EnrollKTPNoMatching enroll, int Id, string npp,
            string unitCode, int unitId)
        {
            var PengajuanID = Guid.NewGuid().ToString();
            var dataDemografis = new Tbl_DataKTP_Demografis_Temp();
            #region check data is employee or not
            bool isEmployee = false;
            var _empData = await _enrollmentKTPRepository.IsEmployee(enroll.KtpNIK);
            if (_empData != null)
            {
                isEmployee = true;
            }
            #endregion

            #region check UID
            var dataReader = await _dataReaderRepository.GetDatareaderUid(enroll.UID).ConfigureAwait(false);

            var dataReaderLog = new Tbl_MasterAlatReaderLog();
            var dataReaderActivityLog = new Tbl_MasterAlatReaderLogActvity();
            var dataNpp = new Tbl_Mapping_Pegawai_KTP();

            if (dataReader != null)
            {
                dataReaderLog = new Tbl_MasterAlatReaderLog
                {
                    CreatedBy_Id = Id,
                    CreatedTime = DateTime.Now,
                    IsActive = true,
                    IsDeleted = false,
                    Nik = enroll.KtpNIK,
                    PegawaiId = Id,
                    Serial_Number = dataReader.SN_Unit,
                    Type = "Updates Enroll",
                    Uid = enroll.UID
                };

                dataReaderActivityLog = new Tbl_MasterAlatReaderLogActvity
                {
                    CreatedBy_Id = Id,
                    IsActive = true,
                    IsDeleted = false,
                    KodeUnit = unitCode,
                    LastIP = enroll.IpAddress,
                    NIK = enroll.KtpNIK,
                    CreatedTime = DateTime.Now,
                    NppPegawai = npp,
                    PegawaiId = Id,
                    Type = "Updates Enroll",
                    UID = enroll.UID,
                    UnitId = unitId
                };
            }
            #endregion

            string JamServer = DateTime.Now.ToString("ddMMyyyyHHmmss");

            if (enroll.KtpTanggalLahir != null)
            {
                enroll.KtpTanggalLahir = enroll.KtpTanggalLahir.Replace(".", "");
                if (enroll.KtpTanggalLahir.Contains("/"))
                {
                    enroll.KtpTanggalLahir = enroll.KtpTanggalLahir.Replace("/", "-");
                }
                string[] arrayTanggl = enroll.KtpTanggalLahir.Split("-");
                string hari = "";
                string bulan = "";
                string tahun = "";

                if (arrayTanggl != null)
                {
                    if (arrayTanggl[0] != null)
                    {
                        if (arrayTanggl[0].Length != 2)
                        {
                            hari = "0" + arrayTanggl[0];

                        }
                        else
                        {
                            hari = arrayTanggl[0];

                        }
                    }

                    if (arrayTanggl[1] != null)
                    {
                        if (arrayTanggl[1].Length != 2)
                        {
                            bulan = "0" + arrayTanggl[1];

                        }
                        else
                        {
                            bulan = arrayTanggl[1];

                        }
                    }

                    if (arrayTanggl[2] != null)
                    {
                        tahun = arrayTanggl[2];
                    }
                }

                enroll.KtpTanggalLahir = hari + "-" + bulan + "-" + tahun;
            }

            var cekKTP = await _profileRepository.GetDataDemografis(enroll.KtpNIK)
                .ConfigureAwait(false);

            #region update data ktp
            if (cekKTP != null)
            {
                #region update demografi
                var logDemografi = new Tbl_DataKTP_Demografis_Log
                {
                    Agama = cekKTP.Agama,
                    Alamat = cekKTP.Alamat,
                    AlamatGoogle = cekKTP.AlamatGoogle,
                    AlamatLengkap = cekKTP.AlamatLengkap,
                    CreatedById = cekKTP.CreatedById,
                    CreatedByUID = cekKTP.CreatedByUID,
                    CreatedByUnitId = cekKTP.CreatedByUnitId,
                    CreatedTime = cekKTP.CreatedTime,
                    Desa = cekKTP.Desa,
                    GolonganDarah = cekKTP.GolonganDarah,
                    JenisKelamin = cekKTP.JenisKelamin,
                    Kecamatan = cekKTP.Kecamatan,
                    Kelurahan = cekKTP.Kelurahan,
                    Kewarganegaraan = cekKTP.Kewarganegaraan,
                    KodePos = cekKTP.KodePos,
                    Kota = cekKTP.Kota,
                    Latitude = cekKTP.Latitude,
                    Longitude = cekKTP.Longitude,
                    MasaBerlaku = cekKTP.MasaBerlaku,
                    Nama = cekKTP.Nama,
                    NIK = cekKTP.NIK,
                    Pekerjaan = cekKTP.Pekerjaan,
                    Provinsi = cekKTP.Provinsi,
                    RT = cekKTP.RT,
                    RW = cekKTP.RW,
                    StatusPerkawinan = cekKTP.StatusPerkawinan,
                    TanggalLahir = cekKTP.TanggalLahir,
                    TempatLahir = cekKTP.TempatLahir,
                    CIF = cekKTP.CIF,
                    CreatedByNpp = cekKTP.CreatedByNpp
                };

                var stringPerubahan = "";

                if (cekKTP.Nama != enroll.KtpNama)
                {
                    stringPerubahan = stringPerubahan + "NAMA : " + cekKTP.Nama + " -> " + enroll.KtpNama + " <br/>";
                    cekKTP.Nama = enroll.KtpNama;
                }

                if (cekKTP.TempatLahir != enroll.KtpTempatLahir)
                {
                    stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTP.TempatLahir + " -> " + enroll.KtpTempatLahir + " <br/>";
                    cekKTP.TempatLahir = enroll.KtpTempatLahir;
                }

                if (enroll.KtpTanggalLahir != null)
                {
                    if (cekKTP.TempatLahir != enroll.KtpTempatLahir)
                    {
                        stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTP.TanggalLahir + " -> " + enroll.KtpTanggalLahir + " <br/>";
                        cekKTP.TanggalLahir = DateTime.ParseExact(enroll.KtpTanggalLahir, "dd-MM-yyyy", CultureInfo.InvariantCulture);
                    }
                }

                if (cekKTP.JenisKelamin != enroll.KtpJanisKelamin)
                {
                    stringPerubahan = stringPerubahan + "JENIS KELAMIN : " + cekKTP.JenisKelamin + " -> " + enroll.KtpJanisKelamin + " <br/>";
                    cekKTP.JenisKelamin = enroll.KtpJanisKelamin;
                }

                if (cekKTP.GolonganDarah != enroll.KtpGolonganDarah)
                {
                    stringPerubahan = stringPerubahan + "GOLONGAN DARAH : " + cekKTP.GolonganDarah + " -> " + enroll.KtpGolonganDarah + " <br/>";
                    cekKTP.GolonganDarah = enroll.KtpGolonganDarah;
                }

                if (cekKTP.Alamat != enroll.KtpAlamat)
                {
                    stringPerubahan = stringPerubahan + "ALAMAT : " + cekKTP.Alamat + " -> " + enroll.KtpAlamat + " <br/>";
                    cekKTP.Alamat = enroll.KtpAlamat;
                }

                if (cekKTP.RT != enroll.KtpRT)
                {
                    stringPerubahan = stringPerubahan + "RT : " + cekKTP.RT + " -> " + enroll.KtpRT + " <br/>";
                    cekKTP.RT = enroll.KtpRT;
                }

                if (cekKTP.RW != enroll.KtpRW)
                {
                    stringPerubahan = stringPerubahan + "RW : " + cekKTP.RW + " -> " + enroll.KtpRW + " <br/>";
                    cekKTP.RW = enroll.KtpRW;
                }

                if (cekKTP.Kelurahan != enroll.KtpKelurahan)
                {
                    stringPerubahan = stringPerubahan + "KELURAHAN : " + cekKTP.Kelurahan + " -> " + enroll.KtpKelurahan + " <br/>";
                    cekKTP.Kelurahan = enroll.KtpKelurahan;
                }

                if (cekKTP.Kecamatan != enroll.KtpKecamatan)
                {
                    stringPerubahan = stringPerubahan + "KECAMATAN : " + cekKTP.Kecamatan + " -> " + enroll.KtpKecamatan + " <br/>";
                    cekKTP.Kecamatan = enroll.KtpKecamatan;
                }

                if (cekKTP.Kota != enroll.KtpKota)
                {
                    stringPerubahan = stringPerubahan + "KOTA/KABUPATEN : " + cekKTP.Kota + " -> " + enroll.KtpKota + " <br/>";
                    cekKTP.Kota = enroll.KtpKota;
                }

                if (cekKTP.Provinsi != enroll.KtpProvinsi)
                {
                    stringPerubahan = stringPerubahan + "PROVINSI  : " + cekKTP.Provinsi + " -> " + enroll.KtpProvinsi + " <br/>";
                    cekKTP.Provinsi = enroll.KtpProvinsi;
                }

                if (cekKTP.Agama != enroll.KtpAgama)
                {
                    stringPerubahan = stringPerubahan + "AGAMA  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTP.Agama = enroll.KtpAgama;
                }

                if (cekKTP.StatusPerkawinan != enroll.KtpStatusPerkawinan)
                {
                    stringPerubahan = stringPerubahan + "STATUS PERKAWINAN  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTP.StatusPerkawinan = enroll.KtpStatusPerkawinan;
                }

                if (cekKTP.Pekerjaan != enroll.KtpPekerjaan)
                {
                    stringPerubahan = stringPerubahan + "PEKERJAAN  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTP.Pekerjaan = enroll.KtpPekerjaan;
                }

                if (cekKTP.Kewarganegaraan != enroll.KtpKewarganegaraan)
                {
                    stringPerubahan = stringPerubahan + "KEWARGANEGARAAN  : " + cekKTP.Kewarganegaraan + " -> " + enroll.KtpKewarganegaraan + " <br/>";
                    cekKTP.Kewarganegaraan = enroll.KtpKewarganegaraan;
                }
                if (cekKTP.MasaBerlaku != enroll.KtpMasaBerlaku)
                {
                    stringPerubahan = stringPerubahan + "MASA BERLAKU  : " + cekKTP.MasaBerlaku + " -> " + enroll.KtpMasaBerlaku + " <br/>";
                    cekKTP.MasaBerlaku = enroll.KtpMasaBerlaku;
                }
                if (cekKTP.CIF == null)
                {
                    var cifData = new ApiSOAResponse();
                    #region Hit SOA And Loggging it
                    if (isHitSOA == true)
                    {
                        cifData = await _cifService.GetSOAByCif(ReqSoa)
                        .ConfigureAwait(false);

                        var _status = 0;
                        if (cifData.cif != null)
                        {
                            _status = 1;
                        }

                        var _log = new Tbl_ThirdPartyLog
                        {
                            FeatureName = "ReSubmitEnrollmentFingerEncryptedNoMatching",
                            HostUrl = ReqSoa.host,
                            Request = Newtonsoft.Json.JsonConvert.SerializeObject(ReqSoa),
                            Status = _status,
                            Response = Newtonsoft.Json.JsonConvert.SerializeObject(cifData),
                            CreatedDate = System.DateTime.Now,
                            CreatedBy = npp
                        };

                        _ = _enrollmentKTPRepository.CreateThirdPartyLog(_log);
                    }
                    else
                    {
                        try
                        {
                            var res = await _cifService.GetCIF(new NikDto { Nik = enroll.KtpNIK },
                            new NikDtoUrl { baseUrl = ReqSoa.baseUrlNonSoa, endpoint = ReqSoa.UrlEndPointNonSoa });
                            if (res.Data == null)
                            {
                                cifData.cif = null;
                            }
                            else
                            {
                                cifData.cif = res.Data.Cif;
                            };
                        }
                        catch (Exception ex)
                        {
                            cifData.cif = null;
                        }
                    }
                    #endregion

                    if (!String.IsNullOrEmpty(cifData.cif))
                    {
                        cifData.cif = cifData.cif.Trim();
                    }

                    stringPerubahan = stringPerubahan + "CIF  : " + cekKTP.CIF + " -> " + cifData.cif + " <br/>";
                    cekKTP.CIF = cifData.cif;
                }

                cekKTP.UpdatedTime = DateTime.Now;
                cekKTP.UpdatedById = Id;
                cekKTP.UpdatedByUID = enroll.UID;
                cekKTP.UpdatedByUnitCode = unitCode;
                cekKTP.UpdatedByUnitId = unitId;
                cekKTP.UpdatedByNpp = npp;

                var tanggalLahirNew = DateTime.ParseExact(cekKTP.TanggalLahir?.ToString("dd-MM-yyyy"), "dd-MM-yyyy", CultureInfo.InvariantCulture);

                dataDemografis = new Tbl_DataKTP_Demografis_Temp
                {
                    Agama = cekKTP.Agama,
                    Alamat = cekKTP.Alamat,
                    AlamatGoogle = cekKTP.AlamatGoogle,
                    AlamatLengkap = cekKTP.AlamatLengkap,
                    CIF = cekKTP.CIF,
                    NIK = cekKTP.NIK,
                    CreatedById = Id,
                    IsActive = true,
                    IsDeleted = false,
                    JenisKelamin = cekKTP.JenisKelamin,
                    Kecamatan = cekKTP.Kecamatan,
                    Kelurahan = cekKTP.Kelurahan,
                    CreatedByUID = enroll.UID,
                    CreatedTime = DateTime.Now,
                    GolonganDarah = cekKTP.GolonganDarah,
                    Kewarganegaraan = cekKTP.Kewarganegaraan,
                    KodePos = cekKTP.KodePos,
                    Kota = cekKTP.Kota,
                    Latitude = cekKTP.Latitude,
                    Longitude = cekKTP.Longitude,
                    MasaBerlaku = cekKTP.MasaBerlaku,
                    Nama = cekKTP.Nama,
                    Pekerjaan = cekKTP.Pekerjaan,
                    Provinsi = cekKTP.Provinsi,
                    RT = cekKTP.RT,
                    RW = cekKTP.RW,
                    StatusPerkawinan = cekKTP.StatusPerkawinan,
                    TanggalLahir = string.IsNullOrWhiteSpace(cekKTP.TanggalLahir.ToString()) ? null : DateTime.ParseExact(cekKTP.TanggalLahir?.ToString("dd-MM-yyyy"), "dd-MM-yyyy", CultureInfo.InvariantCulture),
                    TempatLahir = cekKTP.TempatLahir,
                    CreatedByNpp = npp,
                    CreatedByUnitCode = unitCode,
                    CreatedByUnitId = unitId,
                    IsVerified = false,
                    IsNasabahTemp = string.IsNullOrWhiteSpace(cekKTP.CIF),
                    IsApprove = false,
                    NoPengajuan = PengajuanID
                };

                if (string.IsNullOrWhiteSpace(stringPerubahan))
                {
                    stringPerubahan = stringPerubahan + "Data Demografi tidak ada perubahan" + " <br/>";
                }
                #endregion

                if (isEmployee)
                {
                    var _mappingData = await _enrollmentKTPRepository.MappingNppNikByNik(enroll.KtpNIK);
                    if (_mappingData == null)
                    {
                        dataNpp = new Tbl_Mapping_Pegawai_KTP
                        {
                            CreatedById = Id,
                            NIK = enroll.KtpNIK,
                            Npp = _empData.Npp,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            CreatedByUnit = unitCode,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            UpdatedTime = DateTime.Now,
                        };
                    }
                    else
                    {
                        dataNpp = _mappingData;
                        dataNpp.UpdatedByNpp = npp;
                        dataNpp.UpdatedByUID = enroll.UID;
                        dataNpp.UpdatedByUnit = unitCode;
                        dataNpp.UpdatedTime = DateTime.Now;
                    }
                }

                var sysPathFolder = await _sysParameterRepository.GetPathFolder("PathFolderData");
                string pathFolder = sysPathFolder.Value;

                var photoKtpLog = new Tbl_DataKTP_Photo_Log();
                var photoKTPData = await _profileRepository.GetPhotoKtp(enroll.KtpNIK)
                        .ConfigureAwait(false);
                //var exPhotoKtp = photoKTPData;

                var exPhotoKtp = new Tbl_DataKTP_Photo_Temp();

                var photoKtp = new Tbl_DataKTP_Photo_Temp();

                #region update Photo KTP
                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoKTP))
                {
                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpPhotoKTP);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderPhoto")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderFoto = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "Foto_" + enroll.KtpNIK + "_" + JamServer + ".jpg";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderFoto, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderFoto))
                        {
                            Directory.CreateDirectory(subPathFolderFoto);
                        }

                        filePath = subPathFolderFoto + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoKTPData == null)
                    {
                        photoKtp = new Tbl_DataKTP_Photo_Temp
                        {
                            PathFile = filePath,
                            Nik = enroll.KtpNIK,
                            FileName = fileName,
                            IsActive = true,
                            IsDeleted = false,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            UpdatedTime = DateTime.Now,
                            CreatedById = Id,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedByUnit = unitCode,
                            CreatedTime = DateTime.Now,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        };
                    }
                    else
                    {
                        //photoKtpLog.CreatedById = photoKTPData.CreatedById;
                        //photoKtpLog.CreatedByNpp = photoKTPData.CreatedByNpp;
                        //photoKtpLog.CreatedByUid = photoKTPData.CreatedByUid;
                        //photoKtpLog.CreatedByUnit = photoKTPData.CreatedByUnit;
                        //photoKtpLog.CreatedTime = photoKTPData.CreatedTime;
                        //photoKtpLog.FileName = photoKTPData.FileName;
                        //photoKtpLog.Nik = photoKTPData.Nik;
                        //photoKtpLog.PathFile = photoKTPData.PathFile;

                        //exPhotoKtp = new Tbl_DataKTP_Photo_Temp
                        //{
                        //    PathFile = photoKTPData.PathFile,
                        //    Nik = photoKTPData.Nik,
                        //    FileName = photoKTPData.FileName,
                        //    IsActive = photoKTPData.IsActive,
                        //    IsDeleted = photoKTPData.IsDeleted,
                        //    CreatedById = photoKTPData.CreatedById,
                        //    CreatedByNpp = photoKTPData.CreatedByNpp,
                        //    CreatedByUID = photoKTPData.CreatedByUid,
                        //    CreatedTime = photoKTPData.CreatedTime,
                        //    CreatedByUnit = photoKTPData.CreatedByUnit,
                        //    UpdatedById = photoKTPData.UpdatedById,
                        //    UpdatedByNpp = photoKTPData.UpdatedByNpp,
                        //    UpdatedByUID = photoKTPData.UpdatedByUid,
                        //    UpdatedByUnit = photoKTPData.UpdatedByUnit,
                        //    UpdatedTime = photoKTPData.UpdatedTime,
                        //    Id = photoKTPData.Id,
                        //    NoPengajuan = PengajuanID
                        //};

                        photoKtp.PathFile = filePath;
                        photoKtp.Nik = enroll.KtpNIK;
                        photoKtp.FileName = fileName;
                        photoKtp.IsActive = true;
                        photoKtp.IsDeleted = false;
                        photoKtp.UpdatedById = Id;
                        photoKtp.UpdatedByNpp = npp;
                        photoKtp.UpdatedByUID = enroll.UID;
                        photoKtp.UpdatedByUnit = unitCode;
                        photoKtp.UpdatedTime = DateTime.Now;
                        photoKtp.NoPengajuan = PengajuanID;
                        photoKtp.IsApprove = false;
                    }
                }
                else
                {
                    stringPerubahan = stringPerubahan + "Request Payload Photo Tidak Ditemukan" + " <br/>";
                }
                #endregion

                var photoSignatureLog = new Tbl_DataKTP_Signature_Log();
                var photoSignatureData = await _profileRepository.GetPhotoSignature(enroll.KtpNIK)
                        .ConfigureAwait(false);
                //var exphotoSignatureData = photoSignatureData;

                var exPhotoSignature = new Tbl_DataKTP_Signature_Temp();
                var photoSignature = new Tbl_DataKTP_Signature_Temp();

                #region update signature
                if (!string.IsNullOrWhiteSpace(enroll.KtpSignature))
                {
                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpSignature);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderSignature")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderSignature = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "Signature_" + enroll.KtpNIK + "_" + JamServer + ".jpg";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderSignature, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderSignature))
                        {
                            Directory.CreateDirectory(subPathFolderSignature);
                        }

                        filePath = subPathFolderSignature + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoSignatureData == null)
                    {
                        photoSignature = new Tbl_DataKTP_Signature_Temp
                        {
                            CreatedById = Id,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            CreatedByUnit = unitCode,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedTime = DateTime.Now,
                            UpdatedByUnit = unitCode,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            FileName = fileName,
                            PathFile = filePath,
                            NoPengajuan = PengajuanID,
                            IsApprove = false
                        };
                    }
                    else
                    {
                        //photoSignatureLog.CreatedById = photoSignatureData.CreatedById;
                        //photoSignatureLog.CreatedByNpp = photoSignatureData.CreatedByNpp;
                        //photoSignatureLog.CreatedByUid = photoSignatureData.CreatedByUid;
                        //photoSignatureLog.CreatedByUnit = photoSignatureData.CreatedByUnit;
                        //photoSignatureLog.CreatedTime = photoSignatureData.CreatedTime;
                        //photoSignatureLog.FileName = photoSignatureData.FileName;
                        //photoSignatureLog.Nik = photoSignatureData.Nik;
                        //photoSignatureLog.PathFile = photoSignatureData.PathFile;

                        //exPhotoSignature = new Tbl_DataKTP_Signature_Temp
                        //{
                        //    CreatedById = photoSignatureData.CreatedById,
                        //    CreatedByNpp = photoSignatureData.CreatedByNpp,
                        //    IsActive = photoSignatureData.IsActive,
                        //    IsDeleted = photoSignatureData.IsDeleted,
                        //    Nik = photoSignatureData.Nik,
                        //    FileName = photoSignatureData.FileName,
                        //    CreatedByUID = photoSignatureData.CreatedByUid,
                        //    CreatedTime = photoSignatureData.CreatedTime,
                        //    PathFile = photoSignatureData.PathFile,
                        //    CreatedByUnit = photoSignatureData.CreatedByUnit,
                        //    UpdatedById = photoSignatureData.UpdatedById,
                        //    UpdatedByNpp = photoSignatureData.UpdatedByNpp,
                        //    UpdatedByUID = photoSignatureData.UpdatedByUid,
                        //    UpdatedByUnit = photoSignatureData.UpdatedByUnit,
                        //    UpdatedTime = photoSignatureData.UpdatedTime,
                        //    Id = photoSignatureData.Id,
                        //    NoPengajuan = PengajuanID
                        //};

                        photoSignature.UpdatedById = Id;
                        photoSignature.UpdatedByNpp = npp;
                        photoSignature.UpdatedByUID = enroll.UID;
                        photoSignature.UpdatedTime = DateTime.Now;
                        photoSignature.IsActive = true;
                        photoSignature.IsDeleted = false;
                        photoSignature.Nik = enroll.KtpNIK;
                        photoSignature.FileName = fileName;
                        photoSignature.PathFile = filePath;
                        photoSignature.NoPengajuan = PengajuanID;
                        photoSignature.IsApprove = false;
                    }
                }
                else
                {
                    stringPerubahan = stringPerubahan + "Request Payload Signature Tidak Ditemukan" + " <br/>";
                }
                #endregion

                var photoCamLog = new Tbl_DataKTP_PhotoCam_Log();
                var photoCamData = await _profileRepository.GetPhotoCam(enroll.KtpNIK)
                        .ConfigureAwait(false);
                //var exphotoCamData = photoCamData;

                var exPhotoCam = new Tbl_DataKTP_PhotoCam_Temp();
                var photoCam = new Tbl_DataKTP_PhotoCam_Temp();
                #region update photo cam
                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoCam))
                {
                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpPhotoCam);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderWebcam")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string SubPathFolderPhotoCam = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "PhotoCam_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(SubPathFolderPhotoCam, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(SubPathFolderPhotoCam))
                        {
                            Directory.CreateDirectory(SubPathFolderPhotoCam);
                        }

                        filePath = SubPathFolderPhotoCam + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoCamData == null)
                    {
                        

                        photoCam = new Tbl_DataKTP_PhotoCam_Temp
                        {
                            PathFile = filePath,
                            Nik = enroll.KtpNIK,
                            FileName = fileName,
                            CreatedTime = DateTime.Now,
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedByUnit = unitCode,
                            IsApprove = false,
                            NoPengajuan = PengajuanID,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedTime = DateTime.Now,
                            UpdatedByUnit = unitCode
                        };

                    }
                    else
                    {
                        //photoCamLog.CreatedById = photoCamData.CreatedById;
                        //photoCamLog.CreatedByNpp = photoCamData.CreatedByNpp;
                        //photoCamLog.CreatedByUid = photoCamData.CreatedByUid;
                        //photoCamLog.CreatedByUnit = photoCamData.CreatedByUnit;
                        //photoCamLog.CreatedTime = photoCamData.CreatedTime;
                        //photoCamLog.FileName = photoCamData.FileName;
                        //photoCamLog.Nik = photoCamData.Nik;
                        //photoCamLog.PathFile = photoCamData.PathFile;

                        //exPhotoCam = new Tbl_DataKTP_PhotoCam_Temp
                        //{
                        //    Id = photoCamData.Id,
                        //    PathFile = photoCamData.PathFile,//
                        //    Nik = photoCamData.Nik,
                        //    FileName = photoCamData.FileName,//
                        //    CreatedTime = photoCamData.CreatedTime,
                        //    CreatedById = photoCamData.CreatedById,
                        //    IsActive = photoCamData.IsActive,
                        //    IsDeleted = photoCamData.IsDeleted,
                        //    CreatedByNpp = photoCamData.CreatedByNpp,
                        //    CreatedByUID = photoCamData.CreatedByUid,
                        //    CreatedByUnit = photoCamData.CreatedByUnit,
                        //    UpdatedById = photoCamData.UpdatedById,
                        //    UpdatedByNpp = photoCamData.UpdatedByNpp,
                        //    UpdatedByUID = photoCamData.UpdatedByUid,
                        //    UpdatedByUnit = photoCamData.UpdatedByUnit,
                        //    UpdatedTime = photoCamData.UpdatedTime,
                        //    NoPengajuan = PengajuanID
                        //};

                        photoCam.PathFile = filePath;
                        photoCam.Nik = enroll.KtpNIK;
                        photoCam.FileName = fileName;
                        photoCam.IsActive = true;
                        photoCam.IsDeleted = false;
                        photoCam.UpdatedById = Id;
                        photoCam.UpdatedByNpp = npp;
                        photoCam.UpdatedByUID = enroll.UID;
                        photoCam.UpdatedTime = DateTime.Now;
                        photoCam.NoPengajuan = PengajuanID;
                        photoCam.IsApprove = false;
                    }
                }
                else
                {
                    stringPerubahan = stringPerubahan + "Request Payload Photo Cam Tidak Ditemukan" + " <br/>";
                }
                #endregion

                #region finger
                var exPhotoFinger = new List<Tbl_DataKTP_Finger_Temp>();

                var exPhotoFingerEmployee = new List<Tbl_DataKTP_Finger_Employee_Temp>();

                var photoFingerLogs = new List<Tbl_DataKTP_Finger_Log>();

                var photoFingers = new List<Tbl_DataKTP_Finger_Temp>();

                var photoFingersEmployee = new List<Tbl_DataKTP_Finger_Employee_Temp>();

                var photoFingersEmployeeLogs = new List<Tbl_DataKTP_Finger_Employee_Log>();

                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKanan))
                {

                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);

                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                    }

                    string imageEncrypted = enroll.KtpFingerKanan.Encrypt(Phrase.FileEncryption);

                    string filePath = "";
                    string filePathIso = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKanan.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";
                    string fileNameIso = "";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    string isoEncrypted = "";

                    if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKananIso))
                    {
                        isoEncrypted = enroll.KtpFingerKananIso.Encrypt(Phrase.FileEncryption);
                        fileNameIso = "PhotoFingerISO_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                        if (_sftpConfig.IsActive)
                        {
                            using var stream = new MemoryStream(Encoding.ASCII.GetBytes(isoEncrypted));

                            (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileNameIso, _sftpConfig.Host,
                                _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                            filePathIso = fPath;
                        }
                        else
                        {
                            if (!Directory.Exists(subPathFolderPhotoFinger))
                            {
                                Directory.CreateDirectory(subPathFolderPhotoFinger);
                            }

                            filePathIso = subPathFolderPhotoFinger + fileNameIso;
                            File.WriteAllText(filePathIso, isoEncrypted);
                        }
                    }

                    if (photoFingerData == null)
                    {
                        photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = unitId,
                            CreatedByUnit = unitCode,
                            FileJariISO = isoEncrypted,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            TypeFinger = enroll.KtpTypeJariKanan,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        });
                    }
                    else
                    {
                        //photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        //{
                        //    CreatedById = photoFingerData.CreatedById,
                        //    CreatedByNpp = photoFingerData.CreatedByNpp,
                        //    CreatedByUid = photoFingerData.CreatedByUid,
                        //    CreatedByUnit = photoFingerData.CreatedByUnit,
                        //    CreatedByUnitId = photoFingerData.CreatedByUnitId,
                        //    CreatedTime = photoFingerData.CreatedTime,
                        //    //FileJari = photoFingerData.FileJari,
                        //    FileJariISO = photoFingerData.FileJariISO,
                        //    FileName = photoFingerData.FileName,
                        //    FileNameISO = photoFingerData.FileNameISO,
                        //    Nik = photoFingerData.Nik,
                        //    PathFile = photoFingerData.PathFile,
                        //    PathFileISO = photoFingerData.PathFileISO,
                        //    TypeFinger = photoFingerData.TypeFinger
                        //});

                        //exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        //{
                        //    Id = photoFingerData.Id,
                        //    CreatedById = photoFingerData.CreatedById,
                        //    IsActive = photoFingerData.IsActive,
                        //    IsDeleted = photoFingerData.IsDeleted,
                        //    Nik = photoFingerData.Nik,
                        //    PathFile = photoFingerData.PathFile,//
                        //    PathFileISO = photoFingerData.PathFileISO,//
                        //    CreatedByNpp = photoFingerData.CreatedByNpp,
                        //    CreatedByUID = photoFingerData.CreatedByUid,
                        //    CreatedTime = DateTime.Now,
                        //    CreatedByUnit = photoFingerData.CreatedByUnit,
                        //    CreatedByUnitId = photoFingerData.CreatedByUnitId,
                        //    FileName = photoFingerData.FileName,//
                        //    FileNameISO = photoFingerData.FileNameISO,//
                        //    FileJariISO = photoFingerData.FileJariISO,
                        //    TypeFinger = photoFingerData.TypeFinger,
                        //    UpdatedById = photoFingerData.UpdatedById,
                        //    UpdatedByNpp = photoFingerData.UpdatedByNpp,
                        //    UpdatedByUID = photoFingerData.UpdatedByUid,
                        //    UpdatedByUnit = photoFingerData.UpdatedByUnit,
                        //    UpdatedTime = photoFingerData.UpdatedTime,
                        //    NoPengajuan = PengajuanID
                        //});

                        photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = unitId,
                            CreatedByUnit = unitCode,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            FileJariISO = isoEncrypted,
                            TypeFinger = enroll.KtpTypeJariKanan,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        });
                    }

                    if (isEmployee)
                    {
                        if (photoFingerDataEmployee == null)
                        {
                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = Id,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                PathFileISO = filePathIso,
                                CreatedByNpp = npp,
                                CreatedByUID = enroll.UID,
                                CreatedTime = DateTime.Now,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUID = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = unitId,
                                CreatedByUnit = unitCode,
                                FileJariISO = isoEncrypted,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKanan,
                                IsApprove = false,
                                NoPengajuan = PengajuanID
                            });
                        }
                        else
                        {
                            //photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            //{
                            //    CreatedById = photoFingerDataEmployee.CreatedById,
                            //    CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                            //    CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                            //    CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                            //    CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                            //    CreatedTime = photoFingerDataEmployee.CreatedTime,
                            //    FileJariISO = photoFingerDataEmployee.FileJariISO,
                            //    FileName = photoFingerDataEmployee.FileName,
                            //    FileNameISO = photoFingerDataEmployee.FileNameISO,
                            //    Nik = photoFingerDataEmployee.Nik,
                            //    PathFile = photoFingerDataEmployee.PathFile,
                            //    PathFileISO = photoFingerDataEmployee.PathFileISO,
                            //    TypeFinger = photoFingerDataEmployee.TypeFinger
                            //});

                            //exPhotoFingerEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp {
                            //    CreatedById = photoFingerDataEmployee.CreatedById,
                            //    IsActive = photoFingerDataEmployee.IsActive,
                            //    IsDeleted = photoFingerDataEmployee.IsDeleted,
                            //    Nik = photoFingerDataEmployee.Nik,
                            //    PathFile = photoFingerDataEmployee.PathFile,
                            //    PathFileISO = photoFingerDataEmployee.PathFileISO,
                            //    CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                            //    CreatedByUID = photoFingerDataEmployee.CreatedByUid,
                            //    CreatedTime = photoFingerDataEmployee.CreatedTime,
                            //    UpdatedById = photoFingerDataEmployee.UpdatedById,
                            //    UpdatedByNpp = photoFingerDataEmployee.UpdatedByNpp,
                            //    UpdatedByUID = photoFingerDataEmployee.UpdatedByUid,
                            //    UpdatedByUnit = photoFingerDataEmployee.UpdatedByUnit,
                            //    CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                            //    CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                            //    FileJariISO = photoFingerDataEmployee.FileJariISO,
                            //    UpdatedTime = photoFingerDataEmployee.UpdatedTime,
                            //    FileName = photoFingerDataEmployee.FileName,
                            //    FileNameISO = photoFingerDataEmployee.FileNameISO,
                            //    TypeFinger = photoFingerDataEmployee.TypeFinger

                            //});
                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                PathFileISO = filePathIso,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUID = photoFingerDataEmployee.CreatedByUid,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUID = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                FileJariISO = isoEncrypted,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKanan,
                                IsApprove = false,
                                NoPengajuan = PengajuanID
                            });
                        }
                    }
                }
                else
                {
                    #region get data if no payload but we have to replace all data with no data
                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                    if (photoFingerData != null)
                    {
                        //exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        //{
                        //    CreatedById = photoFingerData.CreatedById,
                        //    IsActive = photoFingerData.IsActive,
                        //    IsDeleted = photoFingerData.IsDeleted,
                        //    Nik = photoFingerData.Nik,
                        //    PathFile = photoFingerData.PathFile,
                        //    PathFileISO = photoFingerData.PathFileISO,
                        //    CreatedByNpp = photoFingerData.CreatedByNpp,
                        //    CreatedByUID = photoFingerData.CreatedByUid,
                        //    CreatedTime = photoFingerData.CreatedTime,
                        //    UpdatedById = photoFingerData.UpdatedById,
                        //    UpdatedByNpp = photoFingerData.UpdatedByNpp,
                        //    UpdatedByUID = photoFingerData.UpdatedByUid,
                        //    UpdatedByUnit = photoFingerData.UpdatedByUnit,
                        //    CreatedByUnitId = photoFingerData.CreatedByUnitId,
                        //    CreatedByUnit = photoFingerData.CreatedByUnit,
                        //    FileJariISO = photoFingerData.FileJariISO,
                        //    UpdatedTime = photoFingerData.UpdatedTime,
                        //    FileName = photoFingerData.FileName,
                        //    FileNameISO = photoFingerData.FileNameISO,
                        //    TypeFinger = photoFingerData.TypeFinger

                        //});

                        //photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        //{
                        //    CreatedById = photoFingerData.CreatedById,
                        //    CreatedByNpp = photoFingerData.CreatedByNpp,
                        //    CreatedByUid = photoFingerData.CreatedByUid,
                        //    CreatedByUnit = photoFingerData.CreatedByUnit,
                        //    CreatedByUnitId = photoFingerData.CreatedByUnitId,
                        //    CreatedTime = photoFingerData.CreatedTime,
                        //    FileName = photoFingerData.FileName,
                        //    FileNameISO = photoFingerData.FileNameISO,
                        //    Nik = photoFingerData.Nik,
                        //    PathFile = photoFingerData.PathFile,
                        //    TypeFinger = photoFingerData.TypeFinger
                        //});
                    }

                    if (isEmployee)
                    {
                        var photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                        if (photoFingerDataEmployee != null)
                        {
                            //exPhotoFingerEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            //{
                            //    CreatedById = photoFingerDataEmployee.CreatedById,
                            //    IsActive = photoFingerDataEmployee.IsActive,
                            //    IsDeleted = photoFingerDataEmployee.IsDeleted,
                            //    Nik = photoFingerDataEmployee.Nik,
                            //    PathFile = photoFingerDataEmployee.PathFile,
                            //    PathFileISO = photoFingerDataEmployee.PathFileISO,
                            //    CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                            //    CreatedByUID = photoFingerDataEmployee.CreatedByUid,
                            //    CreatedTime = photoFingerDataEmployee.CreatedTime,
                            //    UpdatedById = photoFingerDataEmployee.UpdatedById,
                            //    UpdatedByNpp = photoFingerDataEmployee.UpdatedByNpp,
                            //    UpdatedByUID = photoFingerDataEmployee.UpdatedByUid,
                            //    UpdatedByUnit = photoFingerDataEmployee.UpdatedByUnit,
                            //    CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                            //    CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                            //    FileJariISO = photoFingerDataEmployee.FileJariISO,
                            //    UpdatedTime = photoFingerDataEmployee.UpdatedTime,
                            //    FileName = photoFingerDataEmployee.FileName,
                            //    FileNameISO = photoFingerDataEmployee.FileNameISO,
                            //    TypeFinger = photoFingerDataEmployee.TypeFinger

                            //});

                            //photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            //{
                            //    CreatedById = photoFingerDataEmployee.CreatedById,
                            //    CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                            //    CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                            //    CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                            //    CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                            //    CreatedTime = photoFingerDataEmployee.CreatedTime,
                            //    //FileJari = photoFingerDataEmployee.FileJari,
                            //    FileName = photoFingerDataEmployee.FileName,
                            //    FileNameISO = photoFingerDataEmployee.FileNameISO,
                            //    Nik = photoFingerDataEmployee.Nik,
                            //    PathFile = photoFingerDataEmployee.PathFile,
                            //    PathFileISO = photoFingerDataEmployee.PathFileISO,
                            //    TypeFinger = photoFingerDataEmployee.TypeFinger
                            //});
                        }
                    }
                    #endregion

                    stringPerubahan = stringPerubahan + "Request Payload Finger Kanan Tidak Ditemukan" + " <br/>";
                }

                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKiri))
                {
                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);

                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                    }

                    string imageEncrypted = enroll.KtpFingerKiri.Encrypt(Phrase.FileEncryption);

                    string filePath = "";
                    string filePathIso = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKiri.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";
                    string fileNameIso = "";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    string isoEncrypted = "";

                    if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKiriIso))
                    {
                        isoEncrypted = enroll.KtpFingerKiriIso.Encrypt(Phrase.FileEncryption);
                        fileNameIso = "PhotoFingerISO_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                        if (_sftpConfig.IsActive)
                        {
                            using var stream = new MemoryStream(Encoding.ASCII.GetBytes(isoEncrypted));

                            (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileNameIso, _sftpConfig.Host,
                                _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                            filePathIso = fPath;
                        }
                        else
                        {
                            if (!Directory.Exists(subPathFolderPhotoFinger))
                            {
                                Directory.CreateDirectory(subPathFolderPhotoFinger);
                            }

                            filePathIso = subPathFolderPhotoFinger + fileNameIso;
                            File.WriteAllText(filePathIso, isoEncrypted);
                        }
                    }

                    if (photoFingerData == null)
                    {
                        photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = unitId,
                            CreatedByUnit = unitCode,
                            FileJariISO = isoEncrypted,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            TypeFinger = enroll.KtpTypeJariKiri,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        });
                    }
                    else
                    {
                        //photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        //{
                        //    CreatedById = photoFingerData.CreatedById,
                        //    CreatedByNpp = photoFingerData.CreatedByNpp,
                        //    CreatedByUid = photoFingerData.CreatedByUid,
                        //    CreatedByUnit = photoFingerData.CreatedByUnit,
                        //    CreatedByUnitId = photoFingerData.CreatedByUnitId,
                        //    CreatedTime = photoFingerData.CreatedTime,
                        //    //FileJari = photoFingerData.FileJari,
                        //    FileJariISO = photoFingerData.FileJariISO,
                        //    FileName = photoFingerData.FileName,
                        //    FileNameISO = photoFingerData.FileNameISO,
                        //    Nik = photoFingerData.Nik,
                        //    PathFile = photoFingerData.PathFile,
                        //    PathFileISO = photoFingerData.PathFileISO,
                        //    TypeFinger = photoFingerData.TypeFinger
                        //});

                        //exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        //{
                        //    Id = photoFingerData.Id,
                        //    CreatedById = photoFingerData.CreatedById,
                        //    IsActive = photoFingerData.IsActive,
                        //    IsDeleted = photoFingerData.IsDeleted,
                        //    Nik = photoFingerData.Nik,
                        //    PathFile = photoFingerData.PathFile,//
                        //    PathFileISO = photoFingerData.PathFileISO,//
                        //    CreatedByNpp = photoFingerData.CreatedByNpp,
                        //    CreatedByUID = photoFingerData.CreatedByUid,
                        //    CreatedTime = photoFingerData.CreatedTime,
                        //    CreatedByUnit = photoFingerData.CreatedByUnit,
                        //    CreatedByUnitId = photoFingerData.CreatedByUnitId,
                        //    FileName = photoFingerData.FileName,//
                        //    FileNameISO = photoFingerData.FileNameISO,//
                        //    FileJariISO = photoFingerData.FileJariISO,
                        //    TypeFinger = photoFingerData.TypeFinger,
                        //    UpdatedById = photoFingerData.UpdatedById,
                        //    UpdatedByNpp = photoFingerData.UpdatedByNpp,
                        //    UpdatedByUID = photoFingerData.UpdatedByUid,
                        //    UpdatedByUnit = photoFingerData.UpdatedByUnit,
                        //    UpdatedTime = photoFingerData.UpdatedTime,
                        //    NoPengajuan = PengajuanID
                        //});

                        photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = unitId,
                            CreatedByUnit = unitCode,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            FileJariISO = isoEncrypted,
                            TypeFinger = enroll.KtpTypeJariKiri,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        });
                    }

                    if (isEmployee)
                    {
                        if (photoFingerDataEmployee == null)
                        {
                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = Id,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                PathFileISO = filePathIso,
                                CreatedByNpp = npp,
                                CreatedByUID = enroll.UID,
                                CreatedTime = DateTime.Now,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUID = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = unitId,
                                CreatedByUnit = unitCode,
                                FileJariISO = isoEncrypted,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKiri,
                                IsApprove = false,
                                NoPengajuan = PengajuanID
                            });
                        }
                        else
                        {
                            //photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            //{
                            //    CreatedById = photoFingerDataEmployee.CreatedById,
                            //    CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                            //    CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                            //    CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                            //    CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                            //    CreatedTime = photoFingerDataEmployee.CreatedTime,
                            //    FileJariISO = photoFingerDataEmployee.FileJariISO,
                            //    FileName = photoFingerDataEmployee.FileName,
                            //    FileNameISO = photoFingerDataEmployee.FileNameISO,
                            //    Nik = photoFingerDataEmployee.Nik,
                            //    PathFile = photoFingerDataEmployee.PathFile,
                            //    PathFileISO = photoFingerDataEmployee.PathFileISO,
                            //    TypeFinger = photoFingerDataEmployee.TypeFinger
                            //});

                            //exPhotoFingerEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            //{
                            //    CreatedById = photoFingerDataEmployee.CreatedById,
                            //    IsActive = photoFingerDataEmployee.IsActive,
                            //    IsDeleted = photoFingerDataEmployee.IsDeleted,
                            //    Nik = photoFingerDataEmployee.Nik,
                            //    PathFile = photoFingerDataEmployee.PathFile,
                            //    PathFileISO = photoFingerDataEmployee.PathFileISO,
                            //    CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                            //    CreatedByUID = photoFingerDataEmployee.CreatedByUid,
                            //    CreatedTime = photoFingerDataEmployee.CreatedTime,
                            //    UpdatedById = photoFingerDataEmployee.UpdatedById,
                            //    UpdatedByNpp = photoFingerDataEmployee.UpdatedByNpp,
                            //    UpdatedByUID = photoFingerDataEmployee.UpdatedByUid,
                            //    UpdatedByUnit = photoFingerDataEmployee.UpdatedByUnit,
                            //    CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                            //    CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                            //    FileJariISO = photoFingerDataEmployee.FileJariISO,
                            //    UpdatedTime = photoFingerDataEmployee.UpdatedTime,
                            //    FileName = photoFingerDataEmployee.FileName,
                            //    FileNameISO = photoFingerDataEmployee.FileNameISO,
                            //    TypeFinger = photoFingerDataEmployee.TypeFinger

                            //});
                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                PathFileISO = filePathIso,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUID = photoFingerDataEmployee.CreatedByUid,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUID = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                FileJariISO = isoEncrypted,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKiri,
                                IsApprove = false,
                                NoPengajuan = PengajuanID
                            });
                        }
                    }
                }
                else
                {
                    #region get data if no payload but we have to replace all data with no data
                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                    if (photoFingerData != null)
                    {
                        exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = photoFingerData.IsActive,
                            IsDeleted = photoFingerData.IsDeleted,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            PathFileISO = photoFingerData.PathFileISO,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUID = photoFingerData.CreatedByUid,
                            CreatedTime = photoFingerData.CreatedTime,
                            UpdatedById = photoFingerData.UpdatedById,
                            UpdatedByNpp = photoFingerData.UpdatedByNpp,
                            UpdatedByUID = photoFingerData.UpdatedByUid,
                            UpdatedByUnit = photoFingerData.UpdatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            FileJariISO = photoFingerData.FileJariISO,
                            UpdatedTime = photoFingerData.UpdatedTime,
                            FileName = photoFingerData.FileName,
                            FileNameISO = photoFingerData.FileNameISO,
                            TypeFinger = photoFingerData.TypeFinger

                        });

                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUid,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            FileName = photoFingerData.FileName,
                            FileNameISO = photoFingerData.FileNameISO,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            TypeFinger = photoFingerData.TypeFinger
                        });
                    }
                    if (isEmployee)
                    {
                        var photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                        if (photoFingerDataEmployee != null)
                        {
                            //exPhotoFingerEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            //{
                            //    CreatedById = photoFingerDataEmployee.CreatedById,
                            //    IsActive = photoFingerDataEmployee.IsActive,
                            //    IsDeleted = photoFingerDataEmployee.IsDeleted,
                            //    Nik = photoFingerDataEmployee.Nik,
                            //    PathFile = photoFingerDataEmployee.PathFile,
                            //    PathFileISO = photoFingerDataEmployee.PathFileISO,
                            //    CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                            //    CreatedByUID = photoFingerDataEmployee.CreatedByUid,
                            //    CreatedTime = photoFingerDataEmployee.CreatedTime,
                            //    UpdatedById = photoFingerDataEmployee.UpdatedById,
                            //    UpdatedByNpp = photoFingerDataEmployee.UpdatedByNpp,
                            //    UpdatedByUID = photoFingerDataEmployee.UpdatedByUid,
                            //    UpdatedByUnit = photoFingerDataEmployee.UpdatedByUnit,
                            //    CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                            //    CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                            //    FileJariISO = photoFingerDataEmployee.FileJariISO,
                            //    UpdatedTime = photoFingerDataEmployee.UpdatedTime,
                            //    FileName = photoFingerDataEmployee.FileName,
                            //    FileNameISO = photoFingerDataEmployee.FileNameISO,
                            //    TypeFinger = photoFingerDataEmployee.TypeFinger

                            //});

                            //photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            //{
                            //    CreatedById = photoFingerDataEmployee.CreatedById,
                            //    CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                            //    CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                            //    CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                            //    CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                            //    CreatedTime = photoFingerDataEmployee.CreatedTime,
                            //    //FileJari = photoFingerDataEmployee.FileJari,
                            //    FileName = photoFingerDataEmployee.FileName,
                            //    FileNameISO = photoFingerDataEmployee.FileNameISO,
                            //    Nik = photoFingerDataEmployee.Nik,
                            //    PathFile = photoFingerDataEmployee.PathFile,
                            //    PathFileISO = photoFingerDataEmployee.PathFileISO,
                            //    TypeFinger = photoFingerDataEmployee.TypeFinger
                            //});
                        }
                    }
                    #endregion

                    stringPerubahan = stringPerubahan + "Request Payload Finger Kanan Tidak Ditemukan" + " <br/>";
                }
                #endregion

                var inboxTemp = new Tbl_Inbox_Enrollment_Temp()
                {
                    CreatedById = Id,
                    CreatedByNpp = npp,
                    CreatedByUnitCode = unitCode,
                    CreatedByUnitId = unitId,
                    CreatedTime = DateTime.Now,
                    ApprovedStatus = 1,
                    Status = 1,
                    NoPengajuan = PengajuanID,
                    ApprovedByEmployeeId = enroll.ApprovedByEmployeeId,
                    ApprovedByEmployeeId2 = enroll.ApprovedByEmployeeId2

                };

                var inboxTempDetail = new Tbl_Inbox_Enrollment_Temp_Detail()
                {
                    Notes = enroll.Notes,
                    SubmitById = Id,
                    SubmitByNpp = npp,
                    SubmitedByUnitCode = unitCode,
                    SubmitedByUnitId = unitId,
                    CreatedTime = DateTime.Now,
                    ApprovedStatus = 1,
                    Status = 1,
                    NoPengajuan = PengajuanID
                };

                var mappingNIk = new EnrollmentFRLog()
                {
                    NIK = enroll.KtpNIK,
                    CreatedById = Id,
                    CreatedByNpp = npp,
                    CreatedByUnitId = unitId,
                    CreatedTime = DateTime.Now,
                    MatchScore = enroll.MatchScore
                };

                var (status, msg) = await _enrollmentKTPRepository.InsertEnrollFlowNoMatching(mappingNIk, dataDemografis, logDemografi, photoKtp, photoKtpLog, photoSignature, photoSignatureLog,
                    photoCam, photoCamLog, photoFingers, photoFingerLogs, exPhotoKtp, exPhotoSignature, exPhotoCam, exPhotoFinger, dataNpp, dataReaderLog, photoFingersEmployee, exPhotoFingerEmployee, inboxTemp, inboxTempDetail);

                #region Logging Reader Activity
                _ = _alatReaderRepository.CreateLogActivity2(dataReaderActivityLog);
                _ = _alatReaderRepository.CreateAlatReaderLog(dataReaderLog);
                #endregion

                if (status)
                {
                    return (_SuccessMessageConfig.NasabahSuksesUpdate, (int)ServiceResponseStatus.SUKSES, cekKTP.CIF);
                }
                else
                {
                    return (_ErrorMessageConfig.DemografiGagalEnroll, (int)ServiceResponseStatus.ERROR, msg + " " + stringPerubahan);
                }
            }
            else
            {

                var cekKTPTemp = await _profileRepository.GetDataDemografisTemp(enroll.KtpNIK)
                .ConfigureAwait(false);

                if(cekKTPTemp == null) return (_ErrorMessageConfig.DemografiTidakDitemukan, (int)ServiceResponseStatus.Data_Empty, "");


                #region update demografi
                var logDemografi = new Tbl_DataKTP_Demografis_Log
                {
                    Agama = cekKTPTemp.Agama,
                    Alamat = cekKTPTemp.Alamat,
                    AlamatGoogle = cekKTPTemp.AlamatGoogle,
                    AlamatLengkap = cekKTPTemp.AlamatLengkap,
                    CreatedById = cekKTPTemp.CreatedById,
                    CreatedByUID = cekKTPTemp.CreatedByUID,
                    CreatedByUnitId = cekKTPTemp.CreatedByUnitId,
                    CreatedTime = cekKTPTemp.CreatedTime,
                    Desa = cekKTPTemp.Desa,
                    GolonganDarah = cekKTPTemp.GolonganDarah,
                    JenisKelamin = cekKTPTemp.JenisKelamin,
                    Kecamatan = cekKTPTemp.Kecamatan,
                    Kelurahan = cekKTPTemp.Kelurahan,
                    Kewarganegaraan = cekKTPTemp.Kewarganegaraan,
                    KodePos = cekKTPTemp.KodePos,
                    Kota = cekKTPTemp.Kota,
                    Latitude = cekKTPTemp.Latitude,
                    Longitude = cekKTPTemp.Longitude,
                    MasaBerlaku = cekKTPTemp.MasaBerlaku,
                    Nama = cekKTPTemp.Nama,
                    NIK = cekKTPTemp.NIK,
                    Pekerjaan = cekKTPTemp.Pekerjaan,
                    Provinsi = cekKTPTemp.Provinsi,
                    RT = cekKTPTemp.RT,
                    RW = cekKTPTemp.RW,
                    StatusPerkawinan = cekKTPTemp.StatusPerkawinan,
                    TanggalLahir = cekKTPTemp.TanggalLahir,
                    TempatLahir = cekKTPTemp.TempatLahir,
                    CIF = cekKTPTemp.CIF,
                    CreatedByNpp = cekKTPTemp.CreatedByNpp
                };

                var stringPerubahan = "";

                if (cekKTPTemp.Nama != enroll.KtpNama)
                {
                    stringPerubahan = stringPerubahan + "NAMA : " + cekKTPTemp.Nama + " -> " + enroll.KtpNama + " <br/>";
                    cekKTPTemp.Nama = enroll.KtpNama;
                }

                if (cekKTPTemp.TempatLahir != enroll.KtpTempatLahir)
                {
                    stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTPTemp.TempatLahir + " -> " + enroll.KtpTempatLahir + " <br/>";
                    cekKTPTemp.TempatLahir = enroll.KtpTempatLahir;
                }

                if (enroll.KtpTanggalLahir != null)
                {
                    if (cekKTPTemp.TempatLahir != enroll.KtpTempatLahir)
                    {
                        stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTPTemp.TanggalLahir + " -> " + enroll.KtpTanggalLahir + " <br/>";
                        cekKTPTemp.TanggalLahir = DateTime.ParseExact(enroll.KtpTanggalLahir, "MM-dd-yyyy", CultureInfo.InvariantCulture);
                    }
                }

                if (cekKTPTemp.JenisKelamin != enroll.KtpJanisKelamin)
                {
                    stringPerubahan = stringPerubahan + "JENIS KELAMIN : " + cekKTPTemp.JenisKelamin + " -> " + enroll.KtpJanisKelamin + " <br/>";
                    cekKTPTemp.JenisKelamin = enroll.KtpJanisKelamin;
                }

                if (cekKTPTemp.GolonganDarah != enroll.KtpGolonganDarah)
                {
                    stringPerubahan = stringPerubahan + "GOLONGAN DARAH : " + cekKTPTemp.GolonganDarah + " -> " + enroll.KtpGolonganDarah + " <br/>";
                    cekKTPTemp.GolonganDarah = enroll.KtpGolonganDarah;
                }

                if (cekKTPTemp.Alamat != enroll.KtpAlamat)
                {
                    stringPerubahan = stringPerubahan + "ALAMAT : " + cekKTPTemp.Alamat + " -> " + enroll.KtpAlamat + " <br/>";
                    cekKTPTemp.Alamat = enroll.KtpAlamat;
                }

                if (cekKTPTemp.RT != enroll.KtpRT)
                {
                    stringPerubahan = stringPerubahan + "RT : " + cekKTPTemp.RT + " -> " + enroll.KtpRT + " <br/>";
                    cekKTPTemp.RT = enroll.KtpRT;
                }

                if (cekKTPTemp.RW != enroll.KtpRW)
                {
                    stringPerubahan = stringPerubahan + "RW : " + cekKTPTemp.RW + " -> " + enroll.KtpRW + " <br/>";
                    cekKTPTemp.RW = enroll.KtpRW;
                }

                if (cekKTPTemp.Kelurahan != enroll.KtpKelurahan)
                {
                    stringPerubahan = stringPerubahan + "KELURAHAN : " + cekKTPTemp.Kelurahan + " -> " + enroll.KtpKelurahan + " <br/>";
                    cekKTPTemp.Kelurahan = enroll.KtpKelurahan;
                }

                if (cekKTPTemp.Kecamatan != enroll.KtpKecamatan)
                {
                    stringPerubahan = stringPerubahan + "KECAMATAN : " + cekKTPTemp.Kecamatan + " -> " + enroll.KtpKecamatan + " <br/>";
                    cekKTPTemp.Kecamatan = enroll.KtpKecamatan;
                }

                if (cekKTPTemp.Kota != enroll.KtpKota)
                {
                    stringPerubahan = stringPerubahan + "KOTA/KABUPATEN : " + cekKTPTemp.Kota + " -> " + enroll.KtpKota + " <br/>";
                    cekKTPTemp.Kota = enroll.KtpKota;
                }

                if (cekKTPTemp.Provinsi != enroll.KtpProvinsi)
                {
                    stringPerubahan = stringPerubahan + "PROVINSI  : " + cekKTPTemp.Provinsi + " -> " + enroll.KtpProvinsi + " <br/>";
                    cekKTPTemp.Provinsi = enroll.KtpProvinsi;
                }

                if (cekKTPTemp.Agama != enroll.KtpAgama)
                {
                    stringPerubahan = stringPerubahan + "AGAMA  : " + cekKTPTemp.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTPTemp.Agama = enroll.KtpAgama;
                }

                if (cekKTPTemp.StatusPerkawinan != enroll.KtpStatusPerkawinan)
                {
                    stringPerubahan = stringPerubahan + "STATUS PERKAWINAN  : " + cekKTPTemp.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTPTemp.StatusPerkawinan = enroll.KtpStatusPerkawinan;
                }

                if (cekKTPTemp.Pekerjaan != enroll.KtpPekerjaan)
                {
                    stringPerubahan = stringPerubahan + "PEKERJAAN  : " + cekKTPTemp.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTPTemp.Pekerjaan = enroll.KtpPekerjaan;
                }

                if (cekKTPTemp.Kewarganegaraan != enroll.KtpKewarganegaraan)
                {
                    stringPerubahan = stringPerubahan + "KEWARGANEGARAAN  : " + cekKTPTemp.Kewarganegaraan + " -> " + enroll.KtpKewarganegaraan + " <br/>";
                    cekKTPTemp.Kewarganegaraan = enroll.KtpKewarganegaraan;
                }
                if (cekKTPTemp.MasaBerlaku != enroll.KtpMasaBerlaku)
                {
                    stringPerubahan = stringPerubahan + "MASA BERLAKU  : " + cekKTPTemp.MasaBerlaku + " -> " + enroll.KtpMasaBerlaku + " <br/>";
                    cekKTPTemp.MasaBerlaku = enroll.KtpMasaBerlaku;
                }
                if (cekKTPTemp.CIF == null)
                {
                    var cifData = new ApiSOAResponse();
                    #region Hit SOA And Loggging it
                    if (isHitSOA == true)
                    {
                        cifData = await _cifService.GetSOAByCif(ReqSoa)
                        .ConfigureAwait(false);

                        var _status = 0;
                        if (cifData.cif != null)
                        {
                            _status = 1;
                        }

                        var _log = new Tbl_ThirdPartyLog
                        {
                            FeatureName = "ReSubmitEnrollmentFingerEncryptedNoMatching",
                            HostUrl = ReqSoa.host,
                            Request = Newtonsoft.Json.JsonConvert.SerializeObject(ReqSoa),
                            Status = _status,
                            Response = Newtonsoft.Json.JsonConvert.SerializeObject(cifData),
                            CreatedDate = System.DateTime.Now,
                            CreatedBy = npp
                        };

                        _ = _enrollmentKTPRepository.CreateThirdPartyLog(_log);
                    }
                    else
                    {
                        try
                        {
                            var res = await _cifService.GetCIF(new NikDto { Nik = enroll.KtpNIK },
                            new NikDtoUrl { baseUrl = ReqSoa.baseUrlNonSoa, endpoint = ReqSoa.UrlEndPointNonSoa });
                            if (res.Data == null)
                            {
                                cifData.cif = null;
                            }
                            else
                            {
                                cifData.cif = res.Data.Cif;
                            };
                        }
                        catch (Exception ex)
                        {
                            cifData.cif = null;
                        }
                    }
                    #endregion

                    if (!String.IsNullOrEmpty(cifData.cif))
                    {
                        cifData.cif = cifData.cif.Trim();
                    }

                    stringPerubahan = stringPerubahan + "CIF  : " + cekKTPTemp.CIF + " -> " + cifData.cif + " <br/>";
                    cekKTPTemp.CIF = cifData.cif;
                }

                cekKTPTemp.UpdatedTime = DateTime.Now;
                cekKTPTemp.UpdatedById = Id;
                cekKTPTemp.UpdatedByUID = enroll.UID;
                cekKTPTemp.UpdatedByUnitCode = unitCode;
                cekKTPTemp.UpdatedByUnitId = unitId;
                cekKTPTemp.UpdatedByNpp = npp;


                dataDemografis = new Tbl_DataKTP_Demografis_Temp
                {
                    Agama = cekKTPTemp.Agama,
                    Alamat = cekKTPTemp.Alamat,
                    AlamatGoogle = cekKTPTemp.AlamatGoogle,
                    AlamatLengkap = cekKTPTemp.AlamatLengkap,
                    CIF = cekKTPTemp.CIF,
                    NIK = cekKTPTemp.NIK,
                    CreatedById = Id,
                    IsActive = true,
                    IsDeleted = false,
                    JenisKelamin = cekKTPTemp.JenisKelamin,
                    Kecamatan = cekKTPTemp.Kecamatan,
                    Kelurahan = cekKTPTemp.Kelurahan,
                    CreatedByUID = enroll.UID,
                    CreatedTime = DateTime.Now,
                    GolonganDarah = cekKTPTemp.GolonganDarah,
                    Kewarganegaraan = cekKTPTemp.Kewarganegaraan,
                    KodePos = cekKTPTemp.KodePos,
                    Kota = cekKTPTemp.Kota,
                    Latitude = cekKTPTemp.Latitude,
                    Longitude = cekKTPTemp.Longitude,
                    MasaBerlaku = cekKTPTemp.MasaBerlaku,
                    Nama = cekKTPTemp.Nama,
                    Pekerjaan = cekKTPTemp.Pekerjaan,
                    Provinsi = cekKTPTemp.Provinsi,
                    RT = cekKTPTemp.RT,
                    RW = cekKTPTemp.RW,
                    StatusPerkawinan = cekKTPTemp.StatusPerkawinan,
                    TanggalLahir = string.IsNullOrWhiteSpace(cekKTPTemp.TanggalLahir.ToString()) ? null : DateTime.ParseExact(cekKTPTemp.TanggalLahir.ToString(), "dd-MM-yyyy", CultureInfo.InvariantCulture),
                    TempatLahir = cekKTPTemp.TempatLahir,
                    CreatedByNpp = npp,
                    CreatedByUnitCode = unitCode,
                    CreatedByUnitId = unitId,
                    IsVerified = false,
                    IsNasabahTemp = string.IsNullOrWhiteSpace(cekKTPTemp.CIF),
                    IsApprove = false,
                    NoPengajuan = PengajuanID,
                    Id = cekKTPTemp.Id
                };

                if (string.IsNullOrWhiteSpace(stringPerubahan))
                {
                    stringPerubahan = stringPerubahan + "Data Demografi tidak ada perubahan" + " <br/>";
                }
                #endregion

                if (isEmployee)
                {
                    var _mappingData = await _enrollmentKTPRepository.MappingNppNikByNik(enroll.KtpNIK);
                    if (_mappingData == null)
                    {
                        dataNpp = new Tbl_Mapping_Pegawai_KTP
                        {
                            CreatedById = Id,
                            NIK = enroll.KtpNIK,
                            Npp = _empData.Npp,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            CreatedByUnit = unitCode,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            UpdatedTime = DateTime.Now,
                        };
                    }
                    else
                    {
                        dataNpp = _mappingData;
                        dataNpp.UpdatedByNpp = npp;
                        dataNpp.UpdatedByUID = enroll.UID;
                        dataNpp.UpdatedByUnit = unitCode;
                        dataNpp.UpdatedTime = DateTime.Now;
                    }
                }

                var sysPathFolder = await _sysParameterRepository.GetPathFolder("PathFolderData");
                string pathFolder = sysPathFolder.Value;

                var photoKtpLog = new Tbl_DataKTP_Photo_Log();
                var photoKTPData = await _profileRepository.GetPhotoKtpTemp(enroll.KtpNIK)
                        .ConfigureAwait(false);
                var exPhotoKtp = photoKTPData;

                //var exPhotoKtp = new Tbl_DataKTP_Photo_Temp();

                var photoKtp = new Tbl_DataKTP_Photo_Temp();

                #region update Photo KTP
                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoKTP))
                {
                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpPhotoKTP);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderPhoto")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderFoto = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "Foto_" + enroll.KtpNIK + "_" + JamServer + ".jpg";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderFoto, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderFoto))
                        {
                            Directory.CreateDirectory(subPathFolderFoto);
                        }

                        filePath = subPathFolderFoto + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoKTPData == null)
                    {
                        photoKtp = new Tbl_DataKTP_Photo_Temp
                        {
                            PathFile = filePath,
                            Nik = enroll.KtpNIK,
                            FileName = fileName,
                            IsActive = true,
                            IsDeleted = false,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            UpdatedTime = DateTime.Now,
                            CreatedById = Id,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedByUnit = unitCode,
                            CreatedTime = DateTime.Now,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        };
                    }
                    else
                    {
                        photoKtpLog.CreatedById = photoKTPData.CreatedById;
                        photoKtpLog.CreatedByNpp = photoKTPData.CreatedByNpp;
                        photoKtpLog.CreatedByUid = photoKTPData.CreatedByUID;
                        photoKtpLog.CreatedByUnit = photoKTPData.CreatedByUnit;
                        photoKtpLog.CreatedTime = photoKTPData.CreatedTime;
                        photoKtpLog.FileName = photoKTPData.FileName;
                        photoKtpLog.Nik = photoKTPData.Nik;
                        photoKtpLog.PathFile = photoKTPData.PathFile;

                        photoKTPData.PathFile = filePath;
                        photoKTPData.Nik = enroll.KtpNIK;
                        photoKTPData.FileName = fileName;
                        photoKTPData.IsActive = true;
                        photoKTPData.IsDeleted = false;
                        photoKTPData.UpdatedById = Id;
                        photoKTPData.UpdatedByNpp = npp;
                        photoKTPData.UpdatedByUID = enroll.UID;
                        photoKTPData.UpdatedByUnit = unitCode;
                        photoKTPData.UpdatedTime = DateTime.Now;
                        photoKTPData.NoPengajuan = PengajuanID;
                        photoKTPData.IsApprove = false;
                    }
                }
                else
                {
                    stringPerubahan = stringPerubahan + "Request Payload Photo Tidak Ditemukan" + " <br/>";
                }
                #endregion

                var photoSignatureLog = new Tbl_DataKTP_Signature_Log();
                var photoSignatureData = await _profileRepository.GetPhotoSignatureTemp(enroll.KtpNIK)
                        .ConfigureAwait(false);
                var exphotoSignatureData = photoSignatureData;

                //var exPhotoSignature = new Tbl_DataKTP_Signature_Temp();
                var photoSignature = new Tbl_DataKTP_Signature_Temp();

                #region update signature
                if (!string.IsNullOrWhiteSpace(enroll.KtpSignature))
                {
                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpSignature);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderSignature")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderSignature = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "Signature_" + enroll.KtpNIK + "_" + JamServer + ".jpg";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderSignature, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderSignature))
                        {
                            Directory.CreateDirectory(subPathFolderSignature);
                        }

                        filePath = subPathFolderSignature + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoSignatureData == null)
                    {
                        photoSignature = new Tbl_DataKTP_Signature_Temp
                        {
                            CreatedById = Id,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            CreatedByUnit = unitCode,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedTime = DateTime.Now,
                            UpdatedByUnit = unitCode,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            FileName = fileName,
                            PathFile = filePath,
                            NoPengajuan = PengajuanID,
                            IsApprove = false
                        };
                    }
                    else
                    {
                        photoSignatureLog.CreatedById = photoSignatureData.CreatedById;
                        photoSignatureLog.CreatedByNpp = photoSignatureData.CreatedByNpp;
                        photoSignatureLog.CreatedByUid = photoSignatureData.CreatedByUID;
                        photoSignatureLog.CreatedByUnit = photoSignatureData.CreatedByUnit;
                        photoSignatureLog.CreatedTime = photoSignatureData.CreatedTime;
                        photoSignatureLog.FileName = photoSignatureData.FileName;
                        photoSignatureLog.Nik = photoSignatureData.Nik;
                        photoSignatureLog.PathFile = photoSignatureData.PathFile;

                        photoSignatureData.UpdatedById = Id;
                        photoSignatureData.UpdatedByNpp = npp;
                        photoSignatureData.UpdatedByUID = enroll.UID;
                        photoSignatureData.UpdatedTime = DateTime.Now;
                        photoSignatureData.IsActive = true;
                        photoSignatureData.IsDeleted = false;
                        photoSignatureData.Nik = enroll.KtpNIK;
                        photoSignatureData.FileName = fileName;
                        photoSignatureData.PathFile = filePath;
                        photoSignatureData.NoPengajuan = PengajuanID;
                        photoSignatureData.IsApprove = false;

                    }
                }
                else
                {
                    stringPerubahan = stringPerubahan + "Request Payload Signature Tidak Ditemukan" + " <br/>";
                }
                #endregion

                var photoCamLog = new Tbl_DataKTP_PhotoCam_Log();
                var photoCamData = await _profileRepository.GetPhotoCamTemp(enroll.KtpNIK)
                        .ConfigureAwait(false);
                var exphotoCamData = photoCamData;

                //var exPhotoCam = new Tbl_DataKTP_PhotoCam_Temp();
                var photoCam = new Tbl_DataKTP_PhotoCam_Temp();
                #region update photo cam
                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoCam))
                {
                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpPhotoCam);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderWebcam")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string SubPathFolderPhotoCam = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "PhotoCam_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(SubPathFolderPhotoCam, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(SubPathFolderPhotoCam))
                        {
                            Directory.CreateDirectory(SubPathFolderPhotoCam);
                        }

                        filePath = SubPathFolderPhotoCam + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoCamData == null)
                    {
                        photoCam = new Tbl_DataKTP_PhotoCam_Temp
                        {
                            PathFile = filePath,
                            Nik = enroll.KtpNIK,
                            FileName = fileName,
                            CreatedTime = DateTime.Now,
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedByUnit = unitCode,
                            IsApprove = false,
                            NoPengajuan = PengajuanID,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedTime = DateTime.Now,
                            UpdatedByUnit = unitCode
                        };

                    }
                    else
                    {
                        photoCamLog.CreatedById = photoCamData.CreatedById;
                        photoCamLog.CreatedByNpp = photoCamData.CreatedByNpp;
                        photoCamLog.CreatedByUid = photoCamData.CreatedByUID;
                        photoCamLog.CreatedByUnit = photoCamData.CreatedByUnit;
                        photoCamLog.CreatedTime = photoCamData.CreatedTime;
                        photoCamLog.FileName = photoCamData.FileName;
                        photoCamLog.Nik = photoCamData.Nik;
                        photoCamLog.PathFile = photoCamData.PathFile;

                        photoCamData.PathFile = filePath;
                        photoCamData.Nik = enroll.KtpNIK;
                        photoCamData.FileName = fileName;
                        photoCamData.IsActive = true;
                        photoCamData.IsDeleted = false;
                        photoCamData.UpdatedById = Id;
                        photoCamData.UpdatedByNpp = npp;
                        photoCamData.UpdatedByUID = enroll.UID;
                        photoCamData.UpdatedTime = DateTime.Now;
                        photoCamData.NoPengajuan = PengajuanID;
                        photoCamData.IsApprove = false;

                    }
                }
                else
                {
                    stringPerubahan = stringPerubahan + "Request Payload Photo Cam Tidak Ditemukan" + " <br/>";
                }
                #endregion

                #region finger
                var exPhotoFinger = new List<Tbl_DataKTP_Finger_Temp>();

                var exPhotoFingerEmployee = new List<Tbl_DataKTP_Finger_Employee_Temp>();

                var photoFingerLogs = new List<Tbl_DataKTP_Finger_Log>();

                var photoFingers = new List<Tbl_DataKTP_Finger_Temp>();

                var photoFingersEmployee = new List<Tbl_DataKTP_Finger_Employee_Temp>();

                var photoFingersEmployeeLogs = new List<Tbl_DataKTP_Finger_Employee_Log>();

                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKanan))
                {

                    var photoFingerData = await _profileRepository.GetPhotoFingerTemp(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);

                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee_Temp();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployeeTemp(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                    }

                    string imageEncrypted = enroll.KtpFingerKanan.Encrypt(Phrase.FileEncryption);

                    string filePath = "";
                    string filePathIso = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKanan.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";
                    string fileNameIso = "";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    string isoEncrypted = "";

                    if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKananIso))
                    {
                        isoEncrypted = enroll.KtpFingerKananIso.Encrypt(Phrase.FileEncryption);
                        fileNameIso = "PhotoFingerISO_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                        if (_sftpConfig.IsActive)
                        {
                            using var stream = new MemoryStream(Encoding.ASCII.GetBytes(isoEncrypted));

                            (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileNameIso, _sftpConfig.Host,
                                _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                            filePathIso = fPath;
                        }
                        else
                        {
                            if (!Directory.Exists(subPathFolderPhotoFinger))
                            {
                                Directory.CreateDirectory(subPathFolderPhotoFinger);
                            }

                            filePathIso = subPathFolderPhotoFinger + fileNameIso;
                            File.WriteAllText(filePathIso, isoEncrypted);
                        }
                    }

                    if (photoFingerData == null)
                    {
                        photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = unitId,
                            CreatedByUnit = unitCode,
                            FileJariISO = isoEncrypted,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            TypeFinger = enroll.KtpTypeJariKanan,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        });
                    }
                    else
                    {
                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUID,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            //FileJari = photoFingerData.FileJari,
                            FileJariISO = photoFingerData.FileJariISO,
                            FileName = photoFingerData.FileName,
                            FileNameISO = photoFingerData.FileNameISO,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            PathFileISO = photoFingerData.PathFileISO,
                            TypeFinger = photoFingerData.TypeFinger
                        });

                        exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            Id = photoFingerData.Id,
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = photoFingerData.IsActive,
                            IsDeleted = photoFingerData.IsDeleted,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,//
                            PathFileISO = photoFingerData.PathFileISO,//
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUID = photoFingerData.CreatedByUID,
                            CreatedTime = DateTime.Now,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            FileName = photoFingerData.FileName,//
                            FileNameISO = photoFingerData.FileNameISO,//
                            FileJariISO = photoFingerData.FileJariISO,
                            TypeFinger = photoFingerData.TypeFinger,
                            UpdatedById = photoFingerData.UpdatedById,
                            UpdatedByNpp = photoFingerData.UpdatedByNpp,
                            UpdatedByUID = photoFingerData.UpdatedByUID,
                            UpdatedByUnit = photoFingerData.UpdatedByUnit,
                            UpdatedTime = photoFingerData.UpdatedTime,
                            NoPengajuan = PengajuanID
                        });

                        photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = unitId,
                            CreatedByUnit = unitCode,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            FileJariISO = isoEncrypted,
                            TypeFinger = enroll.KtpTypeJariKanan,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        });
                    }

                    if (isEmployee)
                    {
                        if (photoFingerDataEmployee == null)
                        {
                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = Id,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                PathFileISO = filePathIso,
                                CreatedByNpp = npp,
                                CreatedByUID = enroll.UID,
                                CreatedTime = DateTime.Now,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUID = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = unitId,
                                CreatedByUnit = unitCode,
                                FileJariISO = isoEncrypted,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKanan,
                                IsApprove = false,
                                NoPengajuan = PengajuanID
                            });
                        }
                        else
                        {
                            photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUID,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                FileJariISO = photoFingerDataEmployee.FileJariISO,
                                FileName = photoFingerDataEmployee.FileName,
                                FileNameISO = photoFingerDataEmployee.FileNameISO,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                PathFileISO = photoFingerDataEmployee.PathFileISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger
                            });

                            exPhotoFingerEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = photoFingerDataEmployee.IsActive,
                                IsDeleted = photoFingerDataEmployee.IsDeleted,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                PathFileISO = photoFingerDataEmployee.PathFileISO,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUID = photoFingerDataEmployee.CreatedByUID,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = photoFingerDataEmployee.UpdatedById,
                                UpdatedByNpp = photoFingerDataEmployee.UpdatedByNpp,
                                UpdatedByUID = photoFingerDataEmployee.UpdatedByUID,
                                UpdatedByUnit = photoFingerDataEmployee.UpdatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                FileJariISO = photoFingerDataEmployee.FileJariISO,
                                UpdatedTime = photoFingerDataEmployee.UpdatedTime,
                                FileName = photoFingerDataEmployee.FileName,
                                FileNameISO = photoFingerDataEmployee.FileNameISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger

                            });
                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                PathFileISO = filePathIso,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUID = photoFingerDataEmployee.CreatedByUID,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUID = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                FileJariISO = isoEncrypted,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKanan,
                                IsApprove = false,
                                NoPengajuan = PengajuanID
                            });
                        }
                    }
                }
                else
                {
                    #region get data if no payload but we have to replace all data with no data
                    var photoFingerData = await _profileRepository.GetPhotoFingerTemp(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                    if (photoFingerData != null)
                    {
                        exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = photoFingerData.IsActive,
                            IsDeleted = photoFingerData.IsDeleted,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            PathFileISO = photoFingerData.PathFileISO,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUID = photoFingerData.CreatedByUID,
                            CreatedTime = photoFingerData.CreatedTime,
                            UpdatedById = photoFingerData.UpdatedById,
                            UpdatedByNpp = photoFingerData.UpdatedByNpp,
                            UpdatedByUID = photoFingerData.UpdatedByUID,
                            UpdatedByUnit = photoFingerData.UpdatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            FileJariISO = photoFingerData.FileJariISO,
                            UpdatedTime = photoFingerData.UpdatedTime,
                            FileName = photoFingerData.FileName,
                            FileNameISO = photoFingerData.FileNameISO,
                            TypeFinger = photoFingerData.TypeFinger

                        });

                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUID,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            FileName = photoFingerData.FileName,
                            FileNameISO = photoFingerData.FileNameISO,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            TypeFinger = photoFingerData.TypeFinger
                        });
                    }

                    if (isEmployee)
                    {
                        var photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployeeTemp(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                        if (photoFingerDataEmployee != null)
                        {
                            exPhotoFingerEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = photoFingerDataEmployee.IsActive,
                                IsDeleted = photoFingerDataEmployee.IsDeleted,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                PathFileISO = photoFingerDataEmployee.PathFileISO,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUID = photoFingerDataEmployee.CreatedByUID,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = photoFingerDataEmployee.UpdatedById,
                                UpdatedByNpp = photoFingerDataEmployee.UpdatedByNpp,
                                UpdatedByUID = photoFingerDataEmployee.UpdatedByUID,
                                UpdatedByUnit = photoFingerDataEmployee.UpdatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                FileJariISO = photoFingerDataEmployee.FileJariISO,
                                UpdatedTime = photoFingerDataEmployee.UpdatedTime,
                                FileName = photoFingerDataEmployee.FileName,
                                FileNameISO = photoFingerDataEmployee.FileNameISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger

                            });

                            photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUID,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                //FileJari = photoFingerDataEmployee.FileJari,
                                FileName = photoFingerDataEmployee.FileName,
                                FileNameISO = photoFingerDataEmployee.FileNameISO,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                PathFileISO = photoFingerDataEmployee.PathFileISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger
                            });
                        }
                    }
                    #endregion

                    stringPerubahan = stringPerubahan + "Request Payload Finger Kanan Tidak Ditemukan" + " <br/>";
                }

                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKiri))
                {
                    var photoFingerData = await _profileRepository.GetPhotoFingerTemp(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);

                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee_Temp();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployeeTemp(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                    }

                    string imageEncrypted = enroll.KtpFingerKiri.Encrypt(Phrase.FileEncryption);

                    string filePath = "";
                    string filePathIso = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKiri.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";
                    string fileNameIso = "";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    string isoEncrypted = "";

                    if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKiriIso))
                    {
                        isoEncrypted = enroll.KtpFingerKiriIso.Encrypt(Phrase.FileEncryption);
                        fileNameIso = "PhotoFingerISO_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                        if (_sftpConfig.IsActive)
                        {
                            using var stream = new MemoryStream(Encoding.ASCII.GetBytes(isoEncrypted));

                            (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileNameIso, _sftpConfig.Host,
                                _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                            filePathIso = fPath;
                        }
                        else
                        {
                            if (!Directory.Exists(subPathFolderPhotoFinger))
                            {
                                Directory.CreateDirectory(subPathFolderPhotoFinger);
                            }

                            filePathIso = subPathFolderPhotoFinger + fileNameIso;
                            File.WriteAllText(filePathIso, isoEncrypted);
                        }
                    }

                    if (photoFingerData == null)
                    {
                        photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = unitId,
                            CreatedByUnit = unitCode,
                            FileJariISO = isoEncrypted,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            TypeFinger = enroll.KtpTypeJariKanan,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        });
                    }
                    else
                    {
                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUID,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            //FileJari = photoFingerData.FileJari,
                            FileJariISO = photoFingerData.FileJariISO,
                            FileName = photoFingerData.FileName,
                            FileNameISO = photoFingerData.FileNameISO,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            PathFileISO = photoFingerData.PathFileISO,
                            TypeFinger = photoFingerData.TypeFinger
                        });

                        exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            Id = photoFingerData.Id,
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = photoFingerData.IsActive,
                            IsDeleted = photoFingerData.IsDeleted,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,//
                            PathFileISO = photoFingerData.PathFileISO,//
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUID = photoFingerData.CreatedByUID,
                            CreatedTime = photoFingerData.CreatedTime,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            FileName = photoFingerData.FileName,//
                            FileNameISO = photoFingerData.FileNameISO,//
                            FileJariISO = photoFingerData.FileJariISO,
                            TypeFinger = photoFingerData.TypeFinger,
                            UpdatedById = photoFingerData.UpdatedById,
                            UpdatedByNpp = photoFingerData.UpdatedByNpp,
                            UpdatedByUID = photoFingerData.UpdatedByUID,
                            UpdatedByUnit = photoFingerData.UpdatedByUnit,
                            UpdatedTime = photoFingerData.UpdatedTime,
                            NoPengajuan = PengajuanID
                        });

                        photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = unitId,
                            CreatedByUnit = unitCode,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            FileJariISO = isoEncrypted,
                            TypeFinger = enroll.KtpTypeJariKiri,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        });
                    }

                    if (isEmployee)
                    {
                        if (photoFingerDataEmployee == null)
                        {
                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = Id,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                PathFileISO = filePathIso,
                                CreatedByNpp = npp,
                                CreatedByUID = enroll.UID,
                                CreatedTime = DateTime.Now,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUID = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = unitId,
                                CreatedByUnit = unitCode,
                                FileJariISO = isoEncrypted,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKiri,
                                IsApprove = false,
                                NoPengajuan = PengajuanID
                            });
                        }
                        else
                        {
                            photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUID,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                FileJariISO = photoFingerDataEmployee.FileJariISO,
                                FileName = photoFingerDataEmployee.FileName,
                                FileNameISO = photoFingerDataEmployee.FileNameISO,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                PathFileISO = photoFingerDataEmployee.PathFileISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger
                            });

                            exPhotoFingerEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = photoFingerDataEmployee.IsActive,
                                IsDeleted = photoFingerDataEmployee.IsDeleted,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                PathFileISO = photoFingerDataEmployee.PathFileISO,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUID = photoFingerDataEmployee.CreatedByUID,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = photoFingerDataEmployee.UpdatedById,
                                UpdatedByNpp = photoFingerDataEmployee.UpdatedByNpp,
                                UpdatedByUID = photoFingerDataEmployee.UpdatedByUID,
                                UpdatedByUnit = photoFingerDataEmployee.UpdatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                FileJariISO = photoFingerDataEmployee.FileJariISO,
                                UpdatedTime = photoFingerDataEmployee.UpdatedTime,
                                FileName = photoFingerDataEmployee.FileName,
                                FileNameISO = photoFingerDataEmployee.FileNameISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger

                            });
                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                PathFileISO = filePathIso,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUID = photoFingerDataEmployee.CreatedByUID,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUID = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                FileJariISO = isoEncrypted,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKiri,
                                IsApprove = false,
                                NoPengajuan = PengajuanID
                            });
                        }
                    }
                }
                else
                {
                    #region get data if no payload but we have to replace all data with no data
                    var photoFingerData = await _profileRepository.GetPhotoFingerTemp(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                    if (photoFingerData != null)
                    {
                        exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = photoFingerData.IsActive,
                            IsDeleted = photoFingerData.IsDeleted,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            PathFileISO = photoFingerData.PathFileISO,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUID = photoFingerData.CreatedByUID,
                            CreatedTime = photoFingerData.CreatedTime,
                            UpdatedById = photoFingerData.UpdatedById,
                            UpdatedByNpp = photoFingerData.UpdatedByNpp,
                            UpdatedByUID = photoFingerData.UpdatedByUID,
                            UpdatedByUnit = photoFingerData.UpdatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            FileJariISO = photoFingerData.FileJariISO,
                            UpdatedTime = photoFingerData.UpdatedTime,
                            FileName = photoFingerData.FileName,
                            FileNameISO = photoFingerData.FileNameISO,
                            TypeFinger = photoFingerData.TypeFinger

                        });

                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUID,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            FileName = photoFingerData.FileName,
                            FileNameISO = photoFingerData.FileNameISO,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            TypeFinger = photoFingerData.TypeFinger
                        });
                    }
                    if (isEmployee)
                    {
                        var photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployeeTemp(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                        if (photoFingerDataEmployee != null)
                        {
                            exPhotoFingerEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = photoFingerDataEmployee.IsActive,
                                IsDeleted = photoFingerDataEmployee.IsDeleted,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                PathFileISO = photoFingerDataEmployee.PathFileISO,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUID = photoFingerDataEmployee.CreatedByUID,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = photoFingerDataEmployee.UpdatedById,
                                UpdatedByNpp = photoFingerDataEmployee.UpdatedByNpp,
                                UpdatedByUID = photoFingerDataEmployee.UpdatedByUID,
                                UpdatedByUnit = photoFingerDataEmployee.UpdatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                FileJariISO = photoFingerDataEmployee.FileJariISO,
                                UpdatedTime = photoFingerDataEmployee.UpdatedTime,
                                FileName = photoFingerDataEmployee.FileName,
                                FileNameISO = photoFingerDataEmployee.FileNameISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger

                            });

                            photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUID,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                //FileJari = photoFingerDataEmployee.FileJari,
                                FileName = photoFingerDataEmployee.FileName,
                                FileNameISO = photoFingerDataEmployee.FileNameISO,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                PathFileISO = photoFingerDataEmployee.PathFileISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger
                            });
                        }
                    }
                    #endregion

                    stringPerubahan = stringPerubahan + "Request Payload Finger Kanan Tidak Ditemukan" + " <br/>";
                }
                #endregion

                var inboxTemp = new Tbl_Inbox_Enrollment_Temp()
                {
                    CreatedById = Id,
                    CreatedByNpp = npp,
                    CreatedByUnitCode = unitCode,
                    CreatedByUnitId = unitId,
                    CreatedTime = DateTime.Now,
                    ApprovedStatus = 1,
                    Status = 1,
                    NoPengajuan = PengajuanID,
                    ApprovedByEmployeeId = enroll.ApprovedByEmployeeId,
                    ApprovedByEmployeeId2 = enroll.ApprovedByEmployeeId2

                };

                var inboxTempDetail = new Tbl_Inbox_Enrollment_Temp_Detail()
                {
                    Notes = enroll.Notes,
                    SubmitById = Id,
                    SubmitByNpp = npp,
                    SubmitedByUnitCode = unitCode,
                    SubmitedByUnitId = unitId,
                    CreatedTime = DateTime.Now,
                    ApprovedStatus = 1,
                    Status = 1,
                    NoPengajuan = PengajuanID
                };
                var mappingNIk = new EnrollmentFRLog()
                {
                    NIK = dataDemografis.NIK,
                    CreatedById = Id,
                    CreatedByNpp = npp,
                    CreatedByUnitId = unitId,
                    CreatedTime = DateTime.Now,
                    MatchScore = enroll.MatchScore
                };
                var (status, msg) = await _enrollmentKTPRepository.InsertEnrollFlowNoMatching(mappingNIk, dataDemografis, logDemografi, photoKtp, photoKtpLog, photoSignature, photoSignatureLog,
                    photoCam, photoCamLog, photoFingers, photoFingerLogs, exPhotoKtp, exphotoSignatureData, exphotoCamData, exPhotoFinger, dataNpp, dataReaderLog, photoFingersEmployee, exPhotoFingerEmployee, inboxTemp, inboxTempDetail);

                #region Logging Reader Activity
                _ = _alatReaderRepository.CreateLogActivity2(dataReaderActivityLog);
                _ = _alatReaderRepository.CreateAlatReaderLog(dataReaderLog);
                #endregion

                if (status)
                {
                    return (_SuccessMessageConfig.NasabahSuksesUpdate, (int)ServiceResponseStatus.SUKSES, cekKTP.CIF);
                }
                else
                {
                    return (_ErrorMessageConfig.DemografiGagalEnroll, (int)ServiceResponseStatus.ERROR, msg + " " + stringPerubahan);
                }

            }
            #endregion
        }

        public async Task<(string msg, int code, string cif)> SubmitEnrollmentFingerEncryptedOnlyNoMatchingv2(bool isHitSOA, ApiSOA ReqSoa, EnrollKTPNoMatchingv2 enroll, int Id, string npp,
            string unitCode, int unitId, int roleId)
        {
            var PengajuanID = Guid.NewGuid().ToString();
            bool isEmployee = false;
            var _empData = await _enrollmentKTPRepository.IsEmployee(enroll.KtpNIK);
            if (_empData != null)
            {
                isEmployee = true;
            }

            var dataPenyelia = await _profileRepository.GetPenyelia(enroll.nppPenyelia, unitId);
            if (dataPenyelia == null) return (_ErrorMessageConfig.UserPenyeliaNotFound, (int)EnrollStatus.Inputan_tidak_lengkap, "");

            if (enroll.KtpTanggalLahir != null)
            {
                enroll.KtpTanggalLahir = enroll.KtpTanggalLahir.Replace(".", "");
                if (enroll.KtpTanggalLahir.Contains("/"))
                {
                    enroll.KtpTanggalLahir = enroll.KtpTanggalLahir.Replace("/", "-");
                }
                string[] arrayTanggl = enroll.KtpTanggalLahir.Split("-");
                string hari = "";
                string bulan = "";
                string tahun = "";

                if (arrayTanggl != null)
                {
                    if (arrayTanggl[0] != null)
                    {
                        if (arrayTanggl[0].Length != 2)
                        {
                            hari = "0" + arrayTanggl[0];

                        }
                        else
                        {
                            hari = arrayTanggl[0];

                        }
                    }

                    if (arrayTanggl[1] != null)
                    {
                        if (arrayTanggl[1].Length != 2)
                        {
                            bulan = "0" + arrayTanggl[1];

                        }
                        else
                        {
                            bulan = arrayTanggl[1];

                        }
                    }

                    if (arrayTanggl[2] != null)
                    {
                        tahun = arrayTanggl[2];
                    }
                }

                enroll.KtpTanggalLahir = hari + "-" + bulan + "-" + tahun;
            }

            const bool IsNewEnroll = true;
            string JamServer = DateTime.Now.ToString("ddMMyyyyHHmmss");
            bool IsNasabah = false;

            var cekKTP = await _profileRepository.GetDataDemografis(enroll.KtpNIK)
                .ConfigureAwait(false);

            if (cekKTP != null)
            {
                //return (_ErrorMessageConfig.NasabahPernahEnroll, (int)EnrollStatus.Sudah_di_enroll_sebelumnya, "");
                //var logDemografi = new Tbl_DataKTP_Demografis_Log
                //{
                //    Agama = cekKTP.Agama,
                //    Alamat = cekKTP.Alamat,
                //    AlamatGoogle = cekKTP.AlamatGoogle,
                //    AlamatLengkap = cekKTP.AlamatLengkap,
                //    CreatedById = cekKTP.CreatedById,
                //    CreatedByUID = cekKTP.CreatedByUID,
                //    CreatedByUnitId = cekKTP.CreatedByUnitId,
                //    CreatedTime = cekKTP.CreatedTime,
                //    Desa = cekKTP.Desa,
                //    GolonganDarah = cekKTP.GolonganDarah,
                //    JenisKelamin = cekKTP.JenisKelamin,
                //    Kecamatan = cekKTP.Kecamatan,
                //    Kelurahan = cekKTP.Kelurahan,
                //    Kewarganegaraan = cekKTP.Kewarganegaraan,
                //    KodePos = cekKTP.KodePos,
                //    Kota = cekKTP.Kota,
                //    Latitude = cekKTP.Latitude,
                //    Longitude = cekKTP.Longitude,
                //    MasaBerlaku = cekKTP.MasaBerlaku,
                //    Nama = cekKTP.Nama,
                //    NIK = cekKTP.NIK,
                //    Pekerjaan = cekKTP.Pekerjaan,
                //    Provinsi = cekKTP.Provinsi,
                //    RT = cekKTP.RT,
                //    RW = cekKTP.RW,
                //    StatusPerkawinan = cekKTP.StatusPerkawinan,
                //    TanggalLahir = cekKTP.TanggalLahir,
                //    TempatLahir = cekKTP.TempatLahir,
                //    CIF = cekKTP.CIF,
                //    CreatedByNpp = cekKTP.CreatedByNpp
                //};

                //var stringPerubahan = "";

                //if (cekKTP.Nama != enroll.KtpNama)
                //{
                //    stringPerubahan = stringPerubahan + "NAMA : " + cekKTP.Nama + " -> " + enroll.KtpNama + " <br/>";
                //    cekKTP.Nama = enroll.KtpNama;
                //}

                //if (cekKTP.TempatLahir != enroll.KtpTempatLahir)
                //{
                //    stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTP.TempatLahir + " -> " + enroll.KtpTempatLahir + " <br/>";
                //    cekKTP.TempatLahir = enroll.KtpTempatLahir;
                //}

                //if (enroll.KtpTanggalLahir != null)
                //{

                //    if (cekKTP.TempatLahir != enroll.KtpTempatLahir)
                //    {
                //        stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTP.TanggalLahir + " -> " + enroll.KtpTanggalLahir + " <br/>";
                //        cekKTP.TanggalLahir = DateTime.ParseExact(enroll.KtpTanggalLahir, "dd-MM-yyyy", CultureInfo.InvariantCulture);
                //    }

                //}

                //if (cekKTP.JenisKelamin != enroll.KtpJanisKelamin)
                //{
                //    stringPerubahan = stringPerubahan + "JENIS KELAMIN : " + cekKTP.JenisKelamin + " -> " + enroll.KtpJanisKelamin + " <br/>";
                //    cekKTP.JenisKelamin = enroll.KtpJanisKelamin;
                //}

                //if (cekKTP.GolonganDarah != enroll.KtpGolonganDarah)
                //{
                //    stringPerubahan = stringPerubahan + "GOLONGAN DARAH : " + cekKTP.GolonganDarah + " -> " + enroll.KtpGolonganDarah + " <br/>";
                //    cekKTP.GolonganDarah = enroll.KtpGolonganDarah;
                //}

                //if (cekKTP.Alamat != enroll.KtpAlamat)
                //{
                //    stringPerubahan = stringPerubahan + "ALAMAT : " + cekKTP.Alamat + " -> " + enroll.KtpAlamat + " <br/>";
                //    cekKTP.Alamat = enroll.KtpAlamat;
                //}

                //if (cekKTP.RT != enroll.KtpRT)
                //{
                //    stringPerubahan = stringPerubahan + "RT : " + cekKTP.RT + " -> " + enroll.KtpRT + " <br/>";
                //    cekKTP.RT = enroll.KtpRT;
                //}

                //if (cekKTP.RW != enroll.KtpRW)
                //{
                //    stringPerubahan = stringPerubahan + "RW : " + cekKTP.RW + " -> " + enroll.KtpRW + " <br/>";
                //    cekKTP.RW = enroll.KtpRW;
                //}

                //if (cekKTP.Kelurahan != enroll.KtpKelurahan)
                //{
                //    stringPerubahan = stringPerubahan + "KELURAHAN : " + cekKTP.Kelurahan + " -> " + enroll.KtpKelurahan + " <br/>";
                //    cekKTP.Kelurahan = enroll.KtpKelurahan;
                //}

                //if (cekKTP.Kecamatan != enroll.KtpKecamatan)
                //{
                //    stringPerubahan = stringPerubahan + "KECAMATAN : " + cekKTP.Kecamatan + " -> " + enroll.KtpKecamatan + " <br/>";
                //    cekKTP.Kecamatan = enroll.KtpKecamatan;
                //}

                //if (cekKTP.Kota != enroll.KtpKota)
                //{
                //    stringPerubahan = stringPerubahan + "KOTA/KABUPATEN : " + cekKTP.Kota + " -> " + enroll.KtpKota + " <br/>";
                //    cekKTP.Kota = enroll.KtpKota;
                //}

                //if (cekKTP.Provinsi != enroll.KtpProvinsi)
                //{
                //    stringPerubahan = stringPerubahan + "PROVINSI  : " + cekKTP.Provinsi + " -> " + enroll.KtpProvinsi + " <br/>";
                //    cekKTP.Provinsi = enroll.KtpProvinsi;
                //}

                //if (cekKTP.Agama != enroll.KtpAgama)
                //{
                //    stringPerubahan = stringPerubahan + "AGAMA  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                //    cekKTP.Agama = enroll.KtpAgama;
                //}

                //if (cekKTP.StatusPerkawinan != enroll.KtpStatusPerkawinan)
                //{
                //    stringPerubahan = stringPerubahan + "STATUS PERKAWINAN  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                //    cekKTP.StatusPerkawinan = enroll.KtpStatusPerkawinan;
                //}

                //if (cekKTP.Pekerjaan != enroll.KtpPekerjaan)
                //{
                //    stringPerubahan = stringPerubahan + "PEKERJAAN  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                //    cekKTP.Pekerjaan = enroll.KtpPekerjaan;
                //}

                //if (cekKTP.Kewarganegaraan != enroll.KtpKewarganegaraan)
                //{
                //    stringPerubahan = stringPerubahan + "KEWARGANEGARAAN  : " + cekKTP.Kewarganegaraan + " -> " + enroll.KtpKewarganegaraan + " <br/>";
                //    cekKTP.Kewarganegaraan = enroll.KtpKewarganegaraan;
                //}
                //if (cekKTP.MasaBerlaku != enroll.KtpMasaBerlaku)
                //{
                //    stringPerubahan = stringPerubahan + "MASA BERLAKU  : " + cekKTP.MasaBerlaku + " -> " + enroll.KtpMasaBerlaku + " <br/>";
                //    cekKTP.MasaBerlaku = enroll.KtpMasaBerlaku;
                //}

                //cekKTP.UpdatedTime = DateTime.Now;
                //cekKTP.UpdatedById = Id;
                //cekKTP.UpdatedByUID = enroll.UID;
                //cekKTP.UpdatedByUnitCode = unitCode;
                //cekKTP.UpdatedByUnitId = unitId;

                //await _profileRepository.UpdateDataDemografis(cekKTP)
                //    .ConfigureAwait(false);

                //if (string.IsNullOrWhiteSpace(stringPerubahan))
                //{
                //    return (_ErrorMessageConfig.NasabahPernahEnroll, (int)EnrollStatus.Sudah_di_enroll_sebelumnya, "");
                //}

                //_profileRepository.InsertDemografiLog(logDemografi);

                //return (stringPerubahan, (int)EnrollStatus.Berhasil_mengubah_beberapa_perubahan, "");
            }

            if (IsNewEnroll)
            {
                if (enroll?.KtpNIK == null) return (_ErrorMessageConfig.InputTidakLengkap, (int)EnrollStatus.Inputan_tidak_lengkap, "");

                var cifData = new ApiSOAResponse();
                #region Hit SOA And Loggging it
                if (isHitSOA == true)
                {
                    cifData = await _cifService.GetSOAByCif(ReqSoa)
                    .ConfigureAwait(false);

                    var status = 0;
                    if (cifData.cif != null)
                    {
                        status = 1;
                    }

                    var _log = new Tbl_ThirdPartyLog
                    {
                        FeatureName = "SubmitEnrollmentFingerEncryptedOnlyNoMatching",
                        HostUrl = ReqSoa.host,
                        Request = Newtonsoft.Json.JsonConvert.SerializeObject(ReqSoa),
                        Status = status,
                        Response = Newtonsoft.Json.JsonConvert.SerializeObject(cifData),
                        CreatedDate = System.DateTime.Now,
                        CreatedBy = npp
                    };

                    _ = _enrollmentKTPRepository.CreateThirdPartyLog(_log);
                }
                else
                {
                    try
                    {
                        var res = await _cifService.GetCIF(new NikDto { Nik = enroll.KtpNIK },
                        new NikDtoUrl { baseUrl = ReqSoa.baseUrlNonSoa, endpoint = ReqSoa.UrlEndPointNonSoa });
                        if (res.Data == null)
                        {
                            cifData.cif = null;
                        }
                        else
                        {
                            cifData.cif = res.Data.Cif;
                        };
                    }
                    catch (Exception ex)
                    {
                        cifData.cif = null;
                    }

                }
                #endregion

                if (!String.IsNullOrEmpty(cifData.cif))
                {
                    IsNasabah = true;
                    cifData.cif = cifData.cif.Trim();
                }

                var sysPathFolder = await _sysParameterRepository.GetPathFolder("PathFolderData");
                string pathFolder = sysPathFolder.Value;

                var dataDemografis = new Tbl_DataKTP_Demografis_Temp();

                var dataDemografisLog = new Tbl_DataKTP_Demografis_Log();

                var dataNpp = new Tbl_Mapping_Pegawai_KTP();

                if (cekKTP != null)
                {
                    dataDemografisLog = new Tbl_DataKTP_Demografis_Log
                    {
                        Agama = cekKTP.Agama,
                        Alamat = cekKTP.Alamat,
                        AlamatGoogle = cekKTP.AlamatGoogle,
                        AlamatLengkap = cekKTP.AlamatLengkap,
                        CreatedById = cekKTP.CreatedById,
                        CreatedByUID = cekKTP.CreatedByUID,
                        CreatedByUnitId = cekKTP.CreatedByUnitId,
                        CreatedTime = cekKTP.CreatedTime,
                        Desa = cekKTP.Desa,
                        GolonganDarah = cekKTP.GolonganDarah,
                        JenisKelamin = cekKTP.JenisKelamin,
                        Kecamatan = cekKTP.Kecamatan,
                        Kelurahan = cekKTP.Kelurahan,
                        Kewarganegaraan = cekKTP.Kewarganegaraan,
                        KodePos = cekKTP.KodePos,
                        Kota = cekKTP.Kota,
                        Latitude = cekKTP.Latitude,
                        Longitude = cekKTP.Longitude,
                        MasaBerlaku = cekKTP.MasaBerlaku,
                        Nama = cekKTP.Nama,
                        NIK = cekKTP.NIK,
                        Pekerjaan = cekKTP.Pekerjaan,
                        Provinsi = cekKTP.Provinsi,
                        RT = cekKTP.RT,
                        RW = cekKTP.RW,
                        StatusPerkawinan = cekKTP.StatusPerkawinan,
                        TanggalLahir = cekKTP.TanggalLahir,
                        TempatLahir = cekKTP.TempatLahir
                    };

                    cekKTP.Agama = enroll.KtpAgama;
                    cekKTP.Alamat = enroll.KtpAlamat;
                    cekKTP.AlamatGoogle = enroll.KtpAlamatConvertLatlong;
                    cekKTP.AlamatLengkap = enroll.KtpAlamatConvertLengkap;
                    if (string.IsNullOrWhiteSpace(cifData.cif))
                    {
                        cekKTP.CIF = cifData.cif;
                    }
                    cekKTP.GolonganDarah = enroll.KtpGolonganDarah;
                    cekKTP.JenisKelamin = enroll.KtpJanisKelamin;
                    cekKTP.Kecamatan = enroll.KtpKecamatan;
                    cekKTP.Kelurahan = enroll.KtpKelurahan;
                    cekKTP.Kewarganegaraan = enroll.KtpKewarganegaraan;
                    cekKTP.KodePos = enroll.KtpKodePos;
                    cekKTP.Kota = enroll.KtpKota;
                    cekKTP.Latitude = enroll.KtpLatitude;
                    cekKTP.Longitude = enroll.KtpLongitude;
                    cekKTP.MasaBerlaku = enroll.KtpMasaBerlaku;
                    cekKTP.Nama = enroll.KtpNama;
                    cekKTP.NIK = enroll.KtpNIK;
                    cekKTP.Pekerjaan = enroll.KtpPekerjaan;
                    cekKTP.Provinsi = enroll.KtpProvinsi;
                    cekKTP.RT = enroll.KtpRT;
                    cekKTP.RW = enroll.KtpRW;
                    cekKTP.StatusPerkawinan = enroll.KtpStatusPerkawinan;
                    cekKTP.TanggalLahir = string.IsNullOrWhiteSpace(enroll.KtpTanggalLahir) ? null : DateTime.ParseExact(enroll.KtpTanggalLahir, "dd-MM-yyyy", CultureInfo.InvariantCulture);
                    cekKTP.TempatLahir = enroll.KtpTempatLahir;
                    cekKTP.UpdatedById = Id;
                    cekKTP.UpdatedByNpp = npp;
                    cekKTP.UpdatedByUID = enroll.UID;
                    cekKTP.UpdatedTime = DateTime.Now;
                    cekKTP.UpdatedByUnitCode = unitCode;
                    cekKTP.UpdatedByUnitId = unitId;

                    dataDemografis = new Tbl_DataKTP_Demografis_Temp
                    {
                        Agama = cekKTP.Agama,
                        Alamat = cekKTP.Alamat,
                        AlamatGoogle = cekKTP.AlamatGoogle,
                        AlamatLengkap = cekKTP.AlamatLengkap,
                        CIF = (cifData.cif),
                        NIK = cekKTP.NIK,
                        CreatedById = Id,
                        IsActive = true,
                        IsDeleted = false,
                        JenisKelamin = cekKTP.JenisKelamin,
                        Kecamatan = cekKTP.Kecamatan,
                        Kelurahan = cekKTP.Kelurahan,
                        CreatedByUID = enroll.UID,
                        CreatedTime = DateTime.Now,
                        GolonganDarah = cekKTP.GolonganDarah,
                        Kewarganegaraan = cekKTP.Kewarganegaraan,
                        KodePos = cekKTP.KodePos,
                        Kota = cekKTP.Kota,
                        Latitude = cekKTP.Latitude,
                        Longitude = cekKTP.Longitude,
                        MasaBerlaku = cekKTP.MasaBerlaku,
                        Nama = cekKTP.Nama,
                        Pekerjaan = cekKTP.Pekerjaan,
                        Provinsi = cekKTP.Provinsi,
                        RT = cekKTP.RT,
                        RW = cekKTP.RW,
                        StatusPerkawinan = cekKTP.StatusPerkawinan,
                        TanggalLahir = cekKTP.TanggalLahir,
                        TempatLahir = cekKTP.TempatLahir,
                        CreatedByNpp = npp,
                        CreatedByUnitCode = unitCode,
                        CreatedByUnitId = unitId,
                        IsVerified = false,
                        IsNasabahTemp = string.IsNullOrWhiteSpace(cifData.cif),
                        IsApprove = false,
                        NoPengajuan = PengajuanID
                    };
                }
                else
                {
                    dataDemografis = new Tbl_DataKTP_Demografis_Temp
                    {
                        Agama = enroll.KtpAgama,
                        Alamat = enroll.KtpAlamat,
                        AlamatGoogle = enroll.KtpAlamatConvertLatlong,
                        AlamatLengkap = enroll.KtpAlamatConvertLengkap,
                        CIF = (cifData.cif),
                        NIK = enroll.KtpNIK,
                        CreatedById = Id,
                        IsActive = true,
                        IsDeleted = false,
                        JenisKelamin = enroll.KtpJanisKelamin,
                        Kecamatan = enroll.KtpKecamatan,
                        Kelurahan = enroll.KtpKelurahan,
                        CreatedByUID = enroll.UID,
                        CreatedTime = DateTime.Now,
                        GolonganDarah = enroll.KtpGolonganDarah,
                        Kewarganegaraan = enroll.KtpKewarganegaraan,
                        KodePos = enroll.KtpKodePos,
                        Kota = enroll.KtpKota,
                        Latitude = enroll.KtpLatitude,
                        Longitude = enroll.KtpLongitude,
                        MasaBerlaku = enroll.KtpMasaBerlaku,
                        Nama = enroll.KtpNama,
                        Pekerjaan = enroll.KtpPekerjaan,
                        Provinsi = enroll.KtpProvinsi,
                        RT = enroll.KtpRT,
                        RW = enroll.KtpRW,
                        StatusPerkawinan = enroll.KtpStatusPerkawinan,
                        TanggalLahir = string.IsNullOrWhiteSpace(enroll.KtpTanggalLahir) ? null : DateTime.ParseExact(enroll.KtpTanggalLahir, "dd-MM-yyyy", CultureInfo.InvariantCulture),
                        TempatLahir = enroll.KtpTempatLahir,
                        CreatedByNpp = npp,
                        CreatedByUnitCode = unitCode,
                        CreatedByUnitId = unitId,
                        IsVerified = false,
                        IsNasabahTemp = string.IsNullOrWhiteSpace(cifData.cif),
                        IsApprove = false,
                        NoPengajuan = PengajuanID
                    };

                    if (isEmployee)
                    {
                        dataNpp = new Tbl_Mapping_Pegawai_KTP
                        {
                            CreatedById = Id,
                            NIK = enroll.KtpNIK,
                            Npp = _empData.Npp,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now
                        };
                    }
                }

                var exPhotoKtp = new Tbl_DataKTP_Photo_Temp();

                var photoKtpLog = new Tbl_DataKTP_Photo_Log();

                var photoKtp = new Tbl_DataKTP_Photo_Temp();

                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoKTP))
                {
                    var photoKTPData = await _profileRepository.GetPhotoKtp(enroll.KtpNIK)
                        .ConfigureAwait(false);

                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpPhotoKTP);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderPhoto")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderFoto = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "Foto_" + enroll.KtpNIK + "_" + JamServer + ".jpg";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderFoto, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {

                        if (!Directory.Exists(subPathFolderFoto))
                        {
                            Directory.CreateDirectory(subPathFolderFoto);
                        }

                        filePath = subPathFolderFoto + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoKTPData != null)
                    {
                        //photoKtpLog.CreatedById = photoKTPData.CreatedById;
                        //photoKtpLog.CreatedByNpp = photoKTPData.CreatedByNpp;
                        //photoKtpLog.CreatedByUid = photoKTPData.CreatedByUid;
                        //photoKtpLog.CreatedByUnit = photoKTPData.CreatedByUnit;
                        //photoKtpLog.CreatedTime = photoKTPData.CreatedTime;
                        //photoKtpLog.FileName = photoKTPData.FileName;
                        //photoKtpLog.Nik = photoKTPData.Nik;
                        //photoKtpLog.PathFile = photoKTPData.PathFile;

                        exPhotoKtp = new Tbl_DataKTP_Photo_Temp
                        {
                            PathFile = photoKTPData.PathFile,
                            Nik = photoKTPData.Nik,
                            FileName = photoKTPData.FileName,
                            IsActive = photoKTPData.IsActive,
                            IsDeleted = photoKTPData.IsDeleted,
                            CreatedById = photoKTPData.CreatedById,
                            CreatedByNpp = photoKTPData.CreatedByNpp,
                            CreatedByUID = photoKTPData.CreatedByUid,
                            CreatedTime = photoKTPData.CreatedTime,
                            CreatedByUnit = photoKTPData.CreatedByUnit,
                            UpdatedById = photoKTPData.UpdatedById,
                            UpdatedByNpp = photoKTPData.UpdatedByNpp,
                            UpdatedByUID = photoKTPData.UpdatedByUid,
                            UpdatedByUnit = photoKTPData.UpdatedByUnit,
                            UpdatedTime = photoKTPData.UpdatedTime,
                            Id = photoKTPData.Id,
                            NoPengajuan = PengajuanID
                        };
                    }

                    photoKtp = new Tbl_DataKTP_Photo_Temp
                    {
                        PathFile = filePath,
                        Nik = enroll.KtpNIK,
                        FileName = fileName,
                        IsActive = true,
                        IsDeleted = false,
                        CreatedById = Id,
                        CreatedByNpp = npp,
                        CreatedByUID = enroll.UID,
                        CreatedByUnit = unitCode,
                        CreatedTime = DateTime.Now,
                        IsApprove = false,
                        NoPengajuan = PengajuanID
                    };
                }

                var exPhotoSignature = new Tbl_DataKTP_Signature_Temp();

                var photoSignatureLog = new Tbl_DataKTP_Signature_Log();

                var photoSignature = new Tbl_DataKTP_Signature_Temp();

                if (!string.IsNullOrWhiteSpace(enroll.KtpSignature))
                {
                    var photoSignatureData = await _profileRepository.GetPhotoSignature(enroll.KtpNIK)
                        .ConfigureAwait(false);

                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpSignature);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderSignature")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderSignature = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";
                    //string subPathFolderSignature = pathFolder + pathFolderFoto + enroll.KtpNIK;

                    string fileName = "Signature_" + enroll.KtpNIK + "_" + JamServer + ".jpg";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderSignature, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderSignature))
                        {
                            Directory.CreateDirectory(subPathFolderSignature);
                        }

                        filePath = subPathFolderSignature + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoSignatureData != null)
                    {
                        //photoSignatureLog.CreatedById = photoSignatureData.CreatedById;
                        //photoSignatureLog.CreatedByNpp = photoSignatureData.CreatedByNpp;
                        //photoSignatureLog.CreatedByUid = photoSignatureData.CreatedByUid;
                        //photoSignatureLog.CreatedByUnit = photoSignatureData.CreatedByUnit;
                        //photoSignatureLog.CreatedTime = photoSignatureData.CreatedTime;
                        //photoSignatureLog.FileName = photoSignatureData.FileName;
                        //photoSignatureLog.Nik = photoSignatureData.Nik;
                        //photoSignatureLog.PathFile = photoSignatureData.PathFile;

                        exPhotoSignature = new Tbl_DataKTP_Signature_Temp
                        {
                            CreatedById = photoSignatureData.CreatedById,
                            CreatedByNpp = photoSignatureData.CreatedByNpp,
                            IsActive = photoSignatureData.IsActive,
                            IsDeleted = photoSignatureData.IsDeleted,
                            Nik = photoSignatureData.Nik,
                            FileName = photoSignatureData.FileName,
                            CreatedByUID = photoSignatureData.CreatedByUid,
                            CreatedTime = photoSignatureData.CreatedTime,
                            PathFile = photoSignatureData.PathFile,
                            CreatedByUnit = photoSignatureData.CreatedByUnit,
                            UpdatedById = photoSignatureData.UpdatedById,
                            UpdatedByNpp = photoSignatureData.UpdatedByNpp,
                            UpdatedByUID = photoSignatureData.UpdatedByUid,
                            UpdatedByUnit = photoSignatureData.UpdatedByUnit,
                            UpdatedTime = photoSignatureData.UpdatedTime,
                            Id = photoSignatureData.Id,
                            NoPengajuan = PengajuanID
                        };
                    }

                    photoSignature = new Tbl_DataKTP_Signature_Temp
                    {
                        CreatedById = Id,
                        CreatedByNpp = npp,
                        IsActive = true,
                        IsDeleted = false,
                        Nik = enroll.KtpNIK,
                        FileName = fileName,
                        CreatedByUID = enroll.UID,
                        CreatedByUnit = unitCode,
                        CreatedTime = DateTime.Now,
                        PathFile = filePath,
                        NoPengajuan = PengajuanID
                    };
                }

                var exPhotoCam = new Tbl_DataKTP_PhotoCam_Temp();

                var photoCamLog = new Tbl_DataKTP_PhotoCam_Log();

                var photoCam = new Tbl_DataKTP_PhotoCam_Temp();

                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoCam))
                {
                    var photoCamData = await _profileRepository.GetPhotoCam(enroll.KtpNIK)
                        .ConfigureAwait(false);

                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpPhotoCam);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderWebcam")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string SubPathFolderPhotoCam = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";
                    //string SubPathFolderPhotoCam = pathFolder + pathFolderFoto + enroll.KtpNIK;

                    string fileName = "PhotoCam_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(SubPathFolderPhotoCam, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(SubPathFolderPhotoCam))
                        {
                            Directory.CreateDirectory(SubPathFolderPhotoCam);
                        }

                        filePath = SubPathFolderPhotoCam + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoCamData != null)
                    {
                        //photoCamLog.CreatedById = photoCamData.CreatedById;
                        //photoCamLog.CreatedByNpp = photoCamData.CreatedByNpp;
                        //photoCamLog.CreatedByUid = photoCamData.CreatedByUid;
                        //photoCamLog.CreatedByUnit = photoCamData.CreatedByUnit;
                        //photoCamLog.CreatedTime = photoCamData.CreatedTime;
                        //photoCamLog.FileName = photoCamData.FileName;
                        //photoCamLog.Nik = photoCamData.Nik;
                        //photoCamLog.PathFile = photoCamData.PathFile;

                        exPhotoCam = new Tbl_DataKTP_PhotoCam_Temp
                        {
                            Id = photoCamData.Id,
                            PathFile = photoCamData.PathFile,//
                            Nik = photoCamData.Nik,
                            FileName = photoCamData.FileName,//
                            CreatedTime = photoCamData.CreatedTime,
                            CreatedById = photoCamData.CreatedById,
                            IsActive = photoCamData.IsActive,
                            IsDeleted = photoCamData.IsDeleted,
                            CreatedByNpp = photoCamData.CreatedByNpp,
                            CreatedByUID = photoCamData.CreatedByUid,
                            CreatedByUnit = photoCamData.CreatedByUnit,
                            UpdatedById = photoCamData.UpdatedById,
                            UpdatedByNpp = photoCamData.UpdatedByNpp,
                            UpdatedByUID = photoCamData.UpdatedByUid,
                            UpdatedByUnit = photoCamData.UpdatedByUnit,
                            UpdatedTime = photoCamData.UpdatedTime,
                            NoPengajuan = PengajuanID
                        };
                    }

                    photoCam = new Tbl_DataKTP_PhotoCam_Temp
                    {
                        PathFile = filePath,//
                        Nik = enroll.KtpNIK,
                        FileName = fileName,//
                        CreatedTime = DateTime.Now,
                        CreatedById = Id,
                        IsActive = true,
                        IsDeleted = false,
                        CreatedByNpp = npp,
                        CreatedByUID = enroll.UID,
                        CreatedByUnit = unitCode,
                        IsApprove = false,
                        NoPengajuan = PengajuanID
                    };
                }

                var exPhotoFinger = new List<Tbl_DataKTP_Finger_Temp>();

                var exPhotoFingerEmployee = new List<Tbl_DataKTP_Finger_Employee_Temp>();

                var photoFingerLogs = new List<Tbl_DataKTP_Finger_Log>();

                var photoFingers = new List<Tbl_DataKTP_Finger_Temp>();

                var photoFingersEmployee = new List<Tbl_DataKTP_Finger_Employee_Temp>();

                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKanan))
                {

                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);

                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                    }

                    string imageEncrypted = enroll.KtpFingerKanan.Encrypt(Phrase.FileEncryption);

                    string filePath = "";
                    string filePathIso = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKanan.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";
                    string fileNameIso = "";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    string isoEncrypted = "";
                    if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKananIso))
                    {
                        isoEncrypted = enroll.KtpFingerKananIso.Encrypt(Phrase.FileEncryption);
                        fileNameIso = "PhotoFingerISO_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                        if (_sftpConfig.IsActive)
                        {
                            using var stream = new MemoryStream(Encoding.ASCII.GetBytes(isoEncrypted));

                            (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileNameIso, _sftpConfig.Host,
                                _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                            filePathIso = fPath;
                        }
                        else
                        {
                            if (!Directory.Exists(subPathFolderPhotoFinger))
                            {
                                Directory.CreateDirectory(subPathFolderPhotoFinger);
                            }

                            filePathIso = subPathFolderPhotoFinger + fileNameIso;
                            File.WriteAllText(filePathIso, isoEncrypted);
                        }
                    }

                    if (photoFingerData != null)
                    {
                        //photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        //{
                        //    CreatedById = photoFingerData.CreatedById,
                        //    CreatedByNpp = photoFingerData.CreatedByNpp,
                        //    CreatedByUid = photoFingerData.CreatedByUid,
                        //    CreatedByUnit = photoFingerData.CreatedByUnit,
                        //    CreatedByUnitId = photoFingerData.CreatedByUnitId,
                        //    CreatedTime = photoFingerData.CreatedTime,
                        //    //FileJari = photoFingerData.FileJari,
                        //    FileJariISO = photoFingerData.FileJariISO,
                        //    FileName = photoFingerData.FileName,
                        //    FileNameISO = photoFingerData.FileNameISO,
                        //    Nik = photoFingerData.Nik,
                        //    PathFile = photoFingerData.PathFile,
                        //    PathFileISO = photoFingerData.PathFileISO,
                        //    TypeFinger = photoFingerData.TypeFinger
                        //});

                        exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            Id = photoFingerData.Id,
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = photoFingerData.IsActive,
                            IsDeleted = photoFingerData.IsDeleted,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,//
                            PathFileISO = photoFingerData.PathFileISO,//
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUID = photoFingerData.CreatedByUid,
                            CreatedTime = DateTime.Now,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            FileName = photoFingerData.FileName,//
                            FileNameISO = photoFingerData.FileNameISO,//
                            FileJariISO = photoFingerData.FileJariISO,
                            TypeFinger = photoFingerData.TypeFinger,
                            UpdatedById = photoFingerData.UpdatedById,
                            UpdatedByNpp = photoFingerData.UpdatedByNpp,
                            UpdatedByUID = photoFingerData.UpdatedByUid,
                            UpdatedByUnit = photoFingerData.UpdatedByUnit,
                            UpdatedTime = photoFingerData.UpdatedTime,
                            NoPengajuan = PengajuanID
                        });
                    }

                    photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                    {
                        CreatedById = Id,
                        IsActive = true,
                        IsDeleted = false,
                        Nik = enroll.KtpNIK,
                        PathFile = filePath,//
                        PathFileISO = filePathIso,//
                        CreatedByNpp = npp,
                        CreatedByUID = enroll.UID,
                        CreatedTime = DateTime.Now,
                        FileName = fileName,//
                        FileNameISO = fileNameIso,//
                        FileJariISO = isoEncrypted,
                        TypeFinger = enroll.KtpTypeJariKanan,
                        IsApprove = false,
                        NoPengajuan = PengajuanID,
                        CreatedByUnit = unitCode,
                        CreatedByUnitId = unitId
                    });

                    if (isEmployee)
                    {
                        photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,//
                            PathFileISO = filePathIso,//
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            FileName = fileName,//
                            FileNameISO = fileNameIso,//
                            FileJariISO = isoEncrypted,
                            TypeFinger = enroll.KtpTypeJariKanan,
                            IsApprove = false,
                            NoPengajuan = PengajuanID,
                            CreatedByUnit = unitCode,
                            CreatedByUnitId = unitId
                        });
                    }
                }

                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKiri))
                {
                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);

                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                    }

                    string imageEncrypted = enroll.KtpFingerKiri.Encrypt(Phrase.FileEncryption);

                    string filePath = "";
                    string filePathIso = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKiri.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";
                    string fileNameIso = "";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }
                    string isoEncrypted = "";

                    if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKiriIso))
                    {
                        isoEncrypted = enroll.KtpFingerKiriIso.Encrypt(Phrase.FileEncryption);
                        fileNameIso = "PhotoFingerISO_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                        if (_sftpConfig.IsActive)
                        {
                            using var stream = new MemoryStream(Encoding.ASCII.GetBytes(isoEncrypted));

                            (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileNameIso, _sftpConfig.Host,
                                _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                            filePathIso = fPath;
                        }
                        else
                        {
                            if (!Directory.Exists(subPathFolderPhotoFinger))
                            {
                                Directory.CreateDirectory(subPathFolderPhotoFinger);
                            }

                            filePathIso = subPathFolderPhotoFinger + fileNameIso;
                            File.WriteAllText(filePathIso, isoEncrypted);
                        }
                    }

                    if (photoFingerData != null)
                    {
                        //photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        //{
                        //    CreatedById = photoFingerData.CreatedById,
                        //    CreatedByNpp = photoFingerData.CreatedByNpp,
                        //    CreatedByUid = photoFingerData.CreatedByUid,
                        //    CreatedByUnit = photoFingerData.CreatedByUnit,
                        //    CreatedByUnitId = photoFingerData.CreatedByUnitId,
                        //    CreatedTime = photoFingerData.CreatedTime,
                        //    //FileJari = photoFingerData.FileJari,
                        //    FileJariISO = photoFingerData.FileJariISO,
                        //    FileName = photoFingerData.FileName,
                        //    FileNameISO = photoFingerData.FileNameISO,
                        //    Nik = photoFingerData.Nik,
                        //    PathFile = photoFingerData.PathFile,
                        //    PathFileISO = photoFingerData.PathFileISO,
                        //    TypeFinger = photoFingerData.TypeFinger
                        //});

                        exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            Id = photoFingerData.Id,
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = photoFingerData.IsActive,
                            IsDeleted = photoFingerData.IsDeleted,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,//
                            PathFileISO = photoFingerData.PathFileISO,//
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUID = photoFingerData.CreatedByUid,
                            CreatedTime = DateTime.Now,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            FileName = photoFingerData.FileName,//
                            FileNameISO = photoFingerData.FileNameISO,//
                            FileJariISO = photoFingerData.FileJariISO,
                            TypeFinger = photoFingerData.TypeFinger,
                            UpdatedById = photoFingerData.UpdatedById,
                            UpdatedByNpp = photoFingerData.UpdatedByNpp,
                            UpdatedByUID = photoFingerData.UpdatedByUid,
                            UpdatedByUnit = photoFingerData.UpdatedByUnit,
                            UpdatedTime = photoFingerData.UpdatedTime,
                            NoPengajuan = PengajuanID
                        });
                    }

                    photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                    {
                        CreatedById = Id,
                        IsActive = true,
                        IsDeleted = false,
                        Nik = enroll.KtpNIK,
                        PathFile = filePath,//
                        PathFileISO = filePathIso,//
                        CreatedByNpp = npp,
                        CreatedByUID = enroll.UID,
                        CreatedTime = DateTime.Now,
                        FileName = fileName,//
                        FileNameISO = fileNameIso,//
                        FileJariISO = isoEncrypted,//
                        TypeFinger = enroll.KtpTypeJariKiri,
                        IsApprove = false,
                        NoPengajuan = PengajuanID,
                        CreatedByUnit = unitCode,
                        CreatedByUnitId = unitId
                    });

                    if (isEmployee)
                    {
                        photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,//
                            PathFileISO = filePathIso,//
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            FileName = fileName,//
                            FileNameISO = fileNameIso,//
                            FileJariISO = isoEncrypted,//
                            TypeFinger = enroll.KtpTypeJariKiri,
                            IsApprove = false,
                            NoPengajuan = PengajuanID,
                            CreatedByUnit = unitCode,
                            CreatedByUnitId = unitId
                        });
                    }
                }

                // to do: alat reader log
                var dataReader = await _dataReaderRepository.GetDatareaderUid(enroll.UID).ConfigureAwait(false);

                var dataReaderLog = new Tbl_MasterAlatReaderLog();

                if (dataReader != null)
                {
                    dataReaderLog = new Tbl_MasterAlatReaderLog
                    {
                        CreatedBy_Id = Id,
                        CreatedTime = DateTime.Now,
                        IsActive = true,
                        IsDeleted = false,
                        Nik = enroll.KtpNIK,
                        PegawaiId = Id,
                        Serial_Number = dataReader.SN_Unit,
                        Type = "Enroll No Matching",
                        Uid = enroll.UID,
                        UnitId = unitId
                    };
                }

                var inboxTemp = new Tbl_Inbox_Enrollment_Temp()
                {
                    CreatedById = Id,
                    CreatedByNpp = npp,
                    CreatedByUnitCode = unitCode,
                    CreatedByUnitId = unitId,
                    CreatedTime = DateTime.Now,
                    ApprovedStatus = 2,
                    Status = 2,
                    NoPengajuan = PengajuanID,
                    ApprovedByEmployeeId = int.Parse(dataPenyelia.Pegawai_Id),
                    ApprovedByEmployeeId2 = enroll.ApprovedByEmployeeId2

                };

                var inboxTempDetail = new Tbl_Inbox_Enrollment_Temp_Detail()
                {
                    Notes = enroll.Notes,
                    SubmitById = Id,
                    SubmitByNpp = npp,
                    SubmitedByUnitCode = unitCode,
                    SubmitedByUnitId = unitId,
                    CreatedTime = DateTime.Now,
                    ApprovedStatus = 1,
                    Status = 1,
                    NoPengajuan = PengajuanID
                };

                var inboxTempDetailPenyelia = new Tbl_Inbox_Enrollment_Temp_Detail()
                {
                    Notes = _SuccessMessageConfig.OtorisasiPenyelia,
                    SubmitById = int.Parse(dataPenyelia.Pegawai_Id),
                    SubmitByNpp = dataPenyelia.NIK,
                    SubmitedByUnitCode = unitCode,
                    SubmitedByUnitId = unitId,
                    CreatedTime = enroll.otorisasiPenyelia,
                    ApprovedStatus = 2,
                    Status = 2,
                    NoPengajuan = PengajuanID
                };

                var mappingNIk = new EnrollmentFRLog()
                {
                    NIK = enroll.KtpNIK,
                    CreatedById = Id,
                    CreatedByNpp = npp,
                    CreatedByUnitId = unitId,
                    CreatedTime = DateTime.Now,
                    MatchScore = enroll.MatchScore
                };

                var (result, msg) = await _enrollmentKTPRepository.InsertEnrollFlowNoMatchingv2(mappingNIk, dataDemografis, dataDemografisLog, photoKtp, photoKtpLog, photoSignature, photoSignatureLog,
                    photoCam, photoCamLog, photoFingers, photoFingerLogs, exPhotoKtp, exPhotoSignature, exPhotoCam, exPhotoFinger, dataNpp, dataReaderLog, photoFingersEmployee, exPhotoFingerEmployee, inboxTemp, inboxTempDetail, inboxTempDetailPenyelia);

                await _alatReaderRepository.CreateLogActivity2(new Tbl_MasterAlatReaderLogActvity
                {
                    CreatedBy_Id = Id,
                    IsActive = true,
                    IsDeleted = false,
                    KodeUnit = unitCode,
                    LastIP = enroll.IpAddress,
                    NIK = enroll.KtpNIK,
                    CreatedTime = DateTime.Now,
                    NppPegawai = npp,
                    PegawaiId = Id,
                    Type = "Enroll",
                    UID = enroll.UID,
                    UnitId = unitId
                });
            }

            if (IsNasabah)
            {
                return (_SuccessMessageConfig.NasabahSuksesEnrollNasabah, (int)EnrollStatus.Nasabah_Berhasil_di_enroll, cekKTP?.CIF);
            }
            else
            {
                return (_SuccessMessageConfig.NasabahSuksesEnrollNonNasabah, (int)EnrollStatus.Nasabah_Berhasil_di_enroll, cekKTP?.CIF);
            }
        }

        public async Task<(string msg, int code, string cif)> ReSubmitEnrollmentFingerEncryptedOnlyNoMatchingv2(bool isHitSOA, ApiSOA ReqSoa, EnrollKTPNoMatchingv2 enroll, int Id, string npp,
            string unitCode, int unitId)
        {
            var PengajuanID = Guid.NewGuid().ToString();
            var dataDemografis = new Tbl_DataKTP_Demografis_Temp();
            #region check data is employee or not
            bool isEmployee = false;
            var _empData = await _enrollmentKTPRepository.IsEmployee(enroll.KtpNIK);
            if (_empData != null)
            {
                isEmployee = true;
            }
            #endregion

            #region check UID
            var dataReader = await _dataReaderRepository.GetDatareaderUid(enroll.UID).ConfigureAwait(false);

            var dataReaderLog = new Tbl_MasterAlatReaderLog();
            var dataReaderActivityLog = new Tbl_MasterAlatReaderLogActvity();
            var dataNpp = new Tbl_Mapping_Pegawai_KTP();

            if (dataReader != null)
            {
                dataReaderLog = new Tbl_MasterAlatReaderLog
                {
                    CreatedBy_Id = Id,
                    CreatedTime = DateTime.Now,
                    IsActive = true,
                    IsDeleted = false,
                    Nik = enroll.KtpNIK,
                    PegawaiId = Id,
                    Serial_Number = dataReader.SN_Unit,
                    Type = "Updates Enroll",
                    Uid = enroll.UID
                };

                dataReaderActivityLog = new Tbl_MasterAlatReaderLogActvity
                {
                    CreatedBy_Id = Id,
                    IsActive = true,
                    IsDeleted = false,
                    KodeUnit = unitCode,
                    LastIP = enroll.IpAddress,
                    NIK = enroll.KtpNIK,
                    CreatedTime = DateTime.Now,
                    NppPegawai = npp,
                    PegawaiId = Id,
                    Type = "Updates Enroll",
                    UID = enroll.UID,
                    UnitId = unitId
                };
            }
            #endregion

            string JamServer = DateTime.Now.ToString("ddMMyyyyHHmmss");

            if (enroll.KtpTanggalLahir != null)
            {
                enroll.KtpTanggalLahir = enroll.KtpTanggalLahir.Replace(".", "");
                if (enroll.KtpTanggalLahir.Contains("/"))
                {
                    enroll.KtpTanggalLahir = enroll.KtpTanggalLahir.Replace("/", "-");
                }
                string[] arrayTanggl = enroll.KtpTanggalLahir.Split("-");
                string hari = "";
                string bulan = "";
                string tahun = "";

                if (arrayTanggl != null)
                {
                    if (arrayTanggl[0] != null)
                    {
                        if (arrayTanggl[0].Length != 2)
                        {
                            hari = "0" + arrayTanggl[0];

                        }
                        else
                        {
                            hari = arrayTanggl[0];

                        }
                    }

                    if (arrayTanggl[1] != null)
                    {
                        if (arrayTanggl[1].Length != 2)
                        {
                            bulan = "0" + arrayTanggl[1];

                        }
                        else
                        {
                            bulan = arrayTanggl[1];

                        }
                    }

                    if (arrayTanggl[2] != null)
                    {
                        tahun = arrayTanggl[2];
                    }
                }

                enroll.KtpTanggalLahir = hari + "-" + bulan + "-" + tahun;
            }

            var cekKTP = await _profileRepository.GetDataDemografis(enroll.KtpNIK)
                .ConfigureAwait(false);

            var dataPenyelia = await _profileRepository.GetPenyelia(enroll.nppPenyelia, unitId);
            if (dataPenyelia == null) return (_ErrorMessageConfig.UserPenyeliaNotFound, (int)EnrollStatus.Inputan_tidak_lengkap, "");

            #region update data ktp
            if (cekKTP != null)
            {
                #region update demografi
                var logDemografi = new Tbl_DataKTP_Demografis_Log
                {
                    Agama = cekKTP.Agama,
                    Alamat = cekKTP.Alamat,
                    AlamatGoogle = cekKTP.AlamatGoogle,
                    AlamatLengkap = cekKTP.AlamatLengkap,
                    CreatedById = cekKTP.CreatedById,
                    CreatedByUID = cekKTP.CreatedByUID,
                    CreatedByUnitId = cekKTP.CreatedByUnitId,
                    CreatedTime = cekKTP.CreatedTime,
                    Desa = cekKTP.Desa,
                    GolonganDarah = cekKTP.GolonganDarah,
                    JenisKelamin = cekKTP.JenisKelamin,
                    Kecamatan = cekKTP.Kecamatan,
                    Kelurahan = cekKTP.Kelurahan,
                    Kewarganegaraan = cekKTP.Kewarganegaraan,
                    KodePos = cekKTP.KodePos,
                    Kota = cekKTP.Kota,
                    Latitude = cekKTP.Latitude,
                    Longitude = cekKTP.Longitude,
                    MasaBerlaku = cekKTP.MasaBerlaku,
                    Nama = cekKTP.Nama,
                    NIK = cekKTP.NIK,
                    Pekerjaan = cekKTP.Pekerjaan,
                    Provinsi = cekKTP.Provinsi,
                    RT = cekKTP.RT,
                    RW = cekKTP.RW,
                    StatusPerkawinan = cekKTP.StatusPerkawinan,
                    TanggalLahir = cekKTP.TanggalLahir,
                    TempatLahir = cekKTP.TempatLahir,
                    CIF = cekKTP.CIF,
                    CreatedByNpp = cekKTP.CreatedByNpp
                };

                var stringPerubahan = "";

                if (cekKTP.Nama != enroll.KtpNama)
                {
                    stringPerubahan = stringPerubahan + "NAMA : " + cekKTP.Nama + " -> " + enroll.KtpNama + " <br/>";
                    cekKTP.Nama = enroll.KtpNama;
                }

                if (cekKTP.TempatLahir != enroll.KtpTempatLahir)
                {
                    stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTP.TempatLahir + " -> " + enroll.KtpTempatLahir + " <br/>";
                    cekKTP.TempatLahir = enroll.KtpTempatLahir;
                }

                if (enroll.KtpTanggalLahir != null)
                {
                    if (cekKTP.TempatLahir != enroll.KtpTempatLahir)
                    {
                        stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTP.TanggalLahir + " -> " + enroll.KtpTanggalLahir + " <br/>";
                        cekKTP.TanggalLahir = DateTime.ParseExact(enroll.KtpTanggalLahir, "dd-MM-yyyy", CultureInfo.InvariantCulture);
                    }
                }

                if (cekKTP.JenisKelamin != enroll.KtpJanisKelamin)
                {
                    stringPerubahan = stringPerubahan + "JENIS KELAMIN : " + cekKTP.JenisKelamin + " -> " + enroll.KtpJanisKelamin + " <br/>";
                    cekKTP.JenisKelamin = enroll.KtpJanisKelamin;
                }

                if (cekKTP.GolonganDarah != enroll.KtpGolonganDarah)
                {
                    stringPerubahan = stringPerubahan + "GOLONGAN DARAH : " + cekKTP.GolonganDarah + " -> " + enroll.KtpGolonganDarah + " <br/>";
                    cekKTP.GolonganDarah = enroll.KtpGolonganDarah;
                }

                if (cekKTP.Alamat != enroll.KtpAlamat)
                {
                    stringPerubahan = stringPerubahan + "ALAMAT : " + cekKTP.Alamat + " -> " + enroll.KtpAlamat + " <br/>";
                    cekKTP.Alamat = enroll.KtpAlamat;
                }

                if (cekKTP.RT != enroll.KtpRT)
                {
                    stringPerubahan = stringPerubahan + "RT : " + cekKTP.RT + " -> " + enroll.KtpRT + " <br/>";
                    cekKTP.RT = enroll.KtpRT;
                }

                if (cekKTP.RW != enroll.KtpRW)
                {
                    stringPerubahan = stringPerubahan + "RW : " + cekKTP.RW + " -> " + enroll.KtpRW + " <br/>";
                    cekKTP.RW = enroll.KtpRW;
                }

                if (cekKTP.Kelurahan != enroll.KtpKelurahan)
                {
                    stringPerubahan = stringPerubahan + "KELURAHAN : " + cekKTP.Kelurahan + " -> " + enroll.KtpKelurahan + " <br/>";
                    cekKTP.Kelurahan = enroll.KtpKelurahan;
                }

                if (cekKTP.Kecamatan != enroll.KtpKecamatan)
                {
                    stringPerubahan = stringPerubahan + "KECAMATAN : " + cekKTP.Kecamatan + " -> " + enroll.KtpKecamatan + " <br/>";
                    cekKTP.Kecamatan = enroll.KtpKecamatan;
                }

                if (cekKTP.Kota != enroll.KtpKota)
                {
                    stringPerubahan = stringPerubahan + "KOTA/KABUPATEN : " + cekKTP.Kota + " -> " + enroll.KtpKota + " <br/>";
                    cekKTP.Kota = enroll.KtpKota;
                }

                if (cekKTP.Provinsi != enroll.KtpProvinsi)
                {
                    stringPerubahan = stringPerubahan + "PROVINSI  : " + cekKTP.Provinsi + " -> " + enroll.KtpProvinsi + " <br/>";
                    cekKTP.Provinsi = enroll.KtpProvinsi;
                }

                if (cekKTP.Agama != enroll.KtpAgama)
                {
                    stringPerubahan = stringPerubahan + "AGAMA  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTP.Agama = enroll.KtpAgama;
                }

                if (cekKTP.StatusPerkawinan != enroll.KtpStatusPerkawinan)
                {
                    stringPerubahan = stringPerubahan + "STATUS PERKAWINAN  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTP.StatusPerkawinan = enroll.KtpStatusPerkawinan;
                }

                if (cekKTP.Pekerjaan != enroll.KtpPekerjaan)
                {
                    stringPerubahan = stringPerubahan + "PEKERJAAN  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTP.Pekerjaan = enroll.KtpPekerjaan;
                }

                if (cekKTP.Kewarganegaraan != enroll.KtpKewarganegaraan)
                {
                    stringPerubahan = stringPerubahan + "KEWARGANEGARAAN  : " + cekKTP.Kewarganegaraan + " -> " + enroll.KtpKewarganegaraan + " <br/>";
                    cekKTP.Kewarganegaraan = enroll.KtpKewarganegaraan;
                }
                if (cekKTP.MasaBerlaku != enroll.KtpMasaBerlaku)
                {
                    stringPerubahan = stringPerubahan + "MASA BERLAKU  : " + cekKTP.MasaBerlaku + " -> " + enroll.KtpMasaBerlaku + " <br/>";
                    cekKTP.MasaBerlaku = enroll.KtpMasaBerlaku;
                }
                if (cekKTP.CIF == null)
                {
                    var cifData = new ApiSOAResponse();
                    #region Hit SOA And Loggging it
                    if (isHitSOA == true)
                    {
                        cifData = await _cifService.GetSOAByCif(ReqSoa)
                        .ConfigureAwait(false);

                        var _status = 0;
                        if (cifData.cif != null)
                        {
                            _status = 1;
                        }

                        var _log = new Tbl_ThirdPartyLog
                        {
                            FeatureName = "ReSubmitEnrollmentFingerEncryptedNoMatching",
                            HostUrl = ReqSoa.host,
                            Request = Newtonsoft.Json.JsonConvert.SerializeObject(ReqSoa),
                            Status = _status,
                            Response = Newtonsoft.Json.JsonConvert.SerializeObject(cifData),
                            CreatedDate = System.DateTime.Now,
                            CreatedBy = npp
                        };

                        _ = _enrollmentKTPRepository.CreateThirdPartyLog(_log);
                    }
                    else
                    {
                        try
                        {
                            var res = await _cifService.GetCIF(new NikDto { Nik = enroll.KtpNIK },
                            new NikDtoUrl { baseUrl = ReqSoa.baseUrlNonSoa, endpoint = ReqSoa.UrlEndPointNonSoa });
                            if (res.Data == null)
                            {
                                cifData.cif = null;
                            }
                            else
                            {
                                cifData.cif = res.Data.Cif;
                            };
                        }
                        catch (Exception ex)
                        {
                            cifData.cif = null;
                        }
                    }
                    #endregion

                    if (!String.IsNullOrEmpty(cifData.cif))
                    {
                        cifData.cif = cifData.cif.Trim();
                    }

                    stringPerubahan = stringPerubahan + "CIF  : " + cekKTP.CIF + " -> " + cifData.cif + " <br/>";
                    cekKTP.CIF = cifData.cif;
                }

                cekKTP.UpdatedTime = DateTime.Now;
                cekKTP.UpdatedById = Id;
                cekKTP.UpdatedByUID = enroll.UID;
                cekKTP.UpdatedByUnitCode = unitCode;
                cekKTP.UpdatedByUnitId = unitId;
                cekKTP.UpdatedByNpp = npp;

                var tanggalLahirNew = DateTime.ParseExact(cekKTP.TanggalLahir?.ToString("dd-MM-yyyy"), "dd-MM-yyyy", CultureInfo.InvariantCulture);

                dataDemografis = new Tbl_DataKTP_Demografis_Temp
                {
                    Agama = cekKTP.Agama,
                    Alamat = cekKTP.Alamat,
                    AlamatGoogle = cekKTP.AlamatGoogle,
                    AlamatLengkap = cekKTP.AlamatLengkap,
                    CIF = cekKTP.CIF,
                    NIK = cekKTP.NIK,
                    CreatedById = Id,
                    IsActive = true,
                    IsDeleted = false,
                    JenisKelamin = cekKTP.JenisKelamin,
                    Kecamatan = cekKTP.Kecamatan,
                    Kelurahan = cekKTP.Kelurahan,
                    CreatedByUID = cekKTP.CreatedByUID,
                    CreatedTime = cekKTP.CreatedTime,
                    GolonganDarah = cekKTP.GolonganDarah,
                    Kewarganegaraan = cekKTP.Kewarganegaraan,
                    KodePos = cekKTP.KodePos,
                    Kota = cekKTP.Kota,
                    Latitude = cekKTP.Latitude,
                    Longitude = cekKTP.Longitude,
                    MasaBerlaku = cekKTP.MasaBerlaku,
                    Nama = cekKTP.Nama,
                    Pekerjaan = cekKTP.Pekerjaan,
                    Provinsi = cekKTP.Provinsi,
                    RT = cekKTP.RT,
                    RW = cekKTP.RW,
                    StatusPerkawinan = cekKTP.StatusPerkawinan,
                    TanggalLahir = string.IsNullOrWhiteSpace(cekKTP.TanggalLahir.ToString()) ? null : DateTime.ParseExact(cekKTP.TanggalLahir?.ToString("dd-MM-yyyy"), "dd-MM-yyyy", CultureInfo.InvariantCulture),
                    TempatLahir = cekKTP.TempatLahir,
                    CreatedByNpp = cekKTP.CreatedByNpp,
                    CreatedByUnitCode = cekKTP.CreatedByUnitCode,
                    CreatedByUnitId = cekKTP.CreatedByUnitId,
                    IsVerified = false,
                    IsNasabahTemp = string.IsNullOrWhiteSpace(cekKTP.CIF),
                    IsApprove = false,
                    NoPengajuan = PengajuanID,
                    UpdatedTime = DateTime.Now,
                    UpdatedById = Id,
                    UpdatedByUID = enroll.UID,
                    UpdatedByUnitCode = unitCode,
                    UpdatedByUnitId = unitId,
                    UpdatedByNpp = npp,
            };

                if (string.IsNullOrWhiteSpace(stringPerubahan))
                {
                    stringPerubahan = stringPerubahan + "Data Demografi tidak ada perubahan" + " <br/>";
                }
                #endregion

                if (isEmployee)
                {
                    var _mappingData = await _enrollmentKTPRepository.MappingNppNikByNik(enroll.KtpNIK);
                    if (_mappingData == null)
                    {
                        dataNpp = new Tbl_Mapping_Pegawai_KTP
                        {
                            CreatedById = Id,
                            NIK = enroll.KtpNIK,
                            Npp = _empData.Npp,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            CreatedByUnit = unitCode,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            UpdatedTime = DateTime.Now,
                        };
                    }
                    else
                    {
                        dataNpp = _mappingData;
                        dataNpp.UpdatedByNpp = npp;
                        dataNpp.UpdatedByUID = enroll.UID;
                        dataNpp.UpdatedByUnit = unitCode;
                        dataNpp.UpdatedTime = DateTime.Now;
                    }
                }

                var sysPathFolder = await _sysParameterRepository.GetPathFolder("PathFolderData");
                string pathFolder = sysPathFolder.Value;

                var photoKtpLog = new Tbl_DataKTP_Photo_Log();
                var photoKTPData = await _profileRepository.GetPhotoKtp(enroll.KtpNIK)
                        .ConfigureAwait(false);
                //var exPhotoKtp = photoKTPData;

                var exPhotoKtp = new Tbl_DataKTP_Photo_Temp();

                var photoKtp = new Tbl_DataKTP_Photo_Temp();

                #region update Photo KTP
                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoKTP))
                {
                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpPhotoKTP);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderPhoto")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderFoto = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "Foto_" + enroll.KtpNIK + "_" + JamServer + ".jpg";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderFoto, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderFoto))
                        {
                            Directory.CreateDirectory(subPathFolderFoto);
                        }

                        filePath = subPathFolderFoto + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoKTPData == null)
                    {
                        photoKtp = new Tbl_DataKTP_Photo_Temp
                        {
                            PathFile = filePath,
                            Nik = enroll.KtpNIK,
                            FileName = fileName,
                            IsActive = true,
                            IsDeleted = false,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            UpdatedTime = DateTime.Now,
                            CreatedById = Id,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedByUnit = unitCode,
                            CreatedTime = DateTime.Now,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        };
                    }
                    else
                    {
                        //photoKtpLog.CreatedById = photoKTPData.CreatedById;
                        //photoKtpLog.CreatedByNpp = photoKTPData.CreatedByNpp;
                        //photoKtpLog.CreatedByUid = photoKTPData.CreatedByUid;
                        //photoKtpLog.CreatedByUnit = photoKTPData.CreatedByUnit;
                        //photoKtpLog.CreatedTime = photoKTPData.CreatedTime;
                        //photoKtpLog.FileName = photoKTPData.FileName;
                        //photoKtpLog.Nik = photoKTPData.Nik;
                        //photoKtpLog.PathFile = photoKTPData.PathFile;

                        //exPhotoKtp = new Tbl_DataKTP_Photo_Temp
                        //{
                        //    PathFile = photoKTPData.PathFile,
                        //    Nik = photoKTPData.Nik,
                        //    FileName = photoKTPData.FileName,
                        //    IsActive = photoKTPData.IsActive,
                        //    IsDeleted = photoKTPData.IsDeleted,
                        //    CreatedById = photoKTPData.CreatedById,
                        //    CreatedByNpp = photoKTPData.CreatedByNpp,
                        //    CreatedByUID = photoKTPData.CreatedByUid,
                        //    CreatedTime = photoKTPData.CreatedTime,
                        //    CreatedByUnit = photoKTPData.CreatedByUnit,
                        //    UpdatedById = photoKTPData.UpdatedById,
                        //    UpdatedByNpp = photoKTPData.UpdatedByNpp,
                        //    UpdatedByUID = photoKTPData.UpdatedByUid,
                        //    UpdatedByUnit = photoKTPData.UpdatedByUnit,
                        //    UpdatedTime = photoKTPData.UpdatedTime,
                        //    Id = photoKTPData.Id,
                        //    NoPengajuan = PengajuanID
                        //};

                        photoKtp.PathFile = filePath;
                        photoKtp.Nik = enroll.KtpNIK;
                        photoKtp.FileName = fileName;
                        photoKtp.IsActive = true;
                        photoKtp.IsDeleted = false;
                        photoKtp.UpdatedById = Id;
                        photoKtp.UpdatedByNpp = npp;
                        photoKtp.UpdatedByUID = enroll.UID;
                        photoKtp.UpdatedByUnit = unitCode;
                        photoKtp.UpdatedTime = DateTime.Now;
                        photoKtp.NoPengajuan = PengajuanID;
                        photoKtp.IsApprove = false;

                        photoKtp.CreatedById = photoKTPData.CreatedById;
                        photoKtp.CreatedByNpp = photoKTPData.CreatedByNpp;
                        photoKtp.CreatedByUID = photoKTPData.CreatedByUid;
                        photoKtp.CreatedByUnit = photoKTPData.CreatedByUnit;
                        photoKtp.CreatedTime = photoKTPData.CreatedTime;
                    }
                }
                else
                {
                    stringPerubahan = stringPerubahan + "Request Payload Photo Tidak Ditemukan" + " <br/>";
                }
                #endregion

                var photoSignatureLog = new Tbl_DataKTP_Signature_Log();
                var photoSignatureData = await _profileRepository.GetPhotoSignature(enroll.KtpNIK)
                        .ConfigureAwait(false);
                //var exphotoSignatureData = photoSignatureData;

                var exPhotoSignature = new Tbl_DataKTP_Signature_Temp();
                var photoSignature = new Tbl_DataKTP_Signature_Temp();

                #region update signature
                if (!string.IsNullOrWhiteSpace(enroll.KtpSignature))
                {
                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpSignature);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderSignature")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderSignature = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "Signature_" + enroll.KtpNIK + "_" + JamServer + ".jpg";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderSignature, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderSignature))
                        {
                            Directory.CreateDirectory(subPathFolderSignature);
                        }

                        filePath = subPathFolderSignature + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoSignatureData == null)
                    {
                        photoSignature = new Tbl_DataKTP_Signature_Temp
                        {
                            CreatedById = Id,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            CreatedByUnit = unitCode,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedTime = DateTime.Now,
                            UpdatedByUnit = unitCode,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            FileName = fileName,
                            PathFile = filePath,
                            NoPengajuan = PengajuanID,
                            IsApprove = false
                        };
                    }
                    else
                    {
                        //photoSignatureLog.CreatedById = photoSignatureData.CreatedById;
                        //photoSignatureLog.CreatedByNpp = photoSignatureData.CreatedByNpp;
                        //photoSignatureLog.CreatedByUid = photoSignatureData.CreatedByUid;
                        //photoSignatureLog.CreatedByUnit = photoSignatureData.CreatedByUnit;
                        //photoSignatureLog.CreatedTime = photoSignatureData.CreatedTime;
                        //photoSignatureLog.FileName = photoSignatureData.FileName;
                        //photoSignatureLog.Nik = photoSignatureData.Nik;
                        //photoSignatureLog.PathFile = photoSignatureData.PathFile;

                        //exPhotoSignature = new Tbl_DataKTP_Signature_Temp
                        //{
                        //    CreatedById = photoSignatureData.CreatedById,
                        //    CreatedByNpp = photoSignatureData.CreatedByNpp,
                        //    IsActive = photoSignatureData.IsActive,
                        //    IsDeleted = photoSignatureData.IsDeleted,
                        //    Nik = photoSignatureData.Nik,
                        //    FileName = photoSignatureData.FileName,
                        //    CreatedByUID = photoSignatureData.CreatedByUid,
                        //    CreatedTime = photoSignatureData.CreatedTime,
                        //    PathFile = photoSignatureData.PathFile,
                        //    CreatedByUnit = photoSignatureData.CreatedByUnit,
                        //    UpdatedById = photoSignatureData.UpdatedById,
                        //    UpdatedByNpp = photoSignatureData.UpdatedByNpp,
                        //    UpdatedByUID = photoSignatureData.UpdatedByUid,
                        //    UpdatedByUnit = photoSignatureData.UpdatedByUnit,
                        //    UpdatedTime = photoSignatureData.UpdatedTime,
                        //    Id = photoSignatureData.Id,
                        //    NoPengajuan = PengajuanID
                        //};

                        photoSignature.UpdatedById = Id;
                        photoSignature.UpdatedByNpp = npp;
                        photoSignature.UpdatedByUID = enroll.UID;
                        photoSignature.UpdatedByUnit = unitCode;
                        photoSignature.UpdatedTime = DateTime.Now;
                        photoSignature.IsActive = true;
                        photoSignature.IsDeleted = false;
                        photoSignature.Nik = enroll.KtpNIK;
                        photoSignature.FileName = fileName;
                        photoSignature.PathFile = filePath;
                        photoSignature.NoPengajuan = PengajuanID;
                        photoSignature.IsApprove = false;

                        photoSignature.CreatedById = photoSignatureData.CreatedById;
                        photoSignature.CreatedByNpp = photoSignatureData.CreatedByNpp;
                        photoSignature.CreatedByUID = photoSignatureData.CreatedByUid;
                        photoSignature.CreatedByUnit = photoSignatureData.CreatedByUnit;
                        photoSignature.CreatedTime = photoSignatureData.CreatedTime;
                    }
                }
                else
                {
                    stringPerubahan = stringPerubahan + "Request Payload Signature Tidak Ditemukan" + " <br/>";
                }
                #endregion

                var photoCamLog = new Tbl_DataKTP_PhotoCam_Log();
                var photoCamData = await _profileRepository.GetPhotoCam(enroll.KtpNIK)
                        .ConfigureAwait(false);
                //var exphotoCamData = photoCamData;

                var exPhotoCam = new Tbl_DataKTP_PhotoCam_Temp();
                var photoCam = new Tbl_DataKTP_PhotoCam_Temp();
                #region update photo cam
                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoCam))
                {
                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpPhotoCam);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderWebcam")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string SubPathFolderPhotoCam = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "PhotoCam_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(SubPathFolderPhotoCam, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(SubPathFolderPhotoCam))
                        {
                            Directory.CreateDirectory(SubPathFolderPhotoCam);
                        }

                        filePath = SubPathFolderPhotoCam + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoCamData == null)
                    {


                        photoCam = new Tbl_DataKTP_PhotoCam_Temp
                        {
                            PathFile = filePath,
                            Nik = enroll.KtpNIK,
                            FileName = fileName,
                            CreatedTime = DateTime.Now,
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedByUnit = unitCode,
                            IsApprove = false,
                            NoPengajuan = PengajuanID,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedTime = DateTime.Now,
                            UpdatedByUnit = unitCode
                        };

                    }
                    else
                    {
                        //photoCamLog.CreatedById = photoCamData.CreatedById;
                        //photoCamLog.CreatedByNpp = photoCamData.CreatedByNpp;
                        //photoCamLog.CreatedByUid = photoCamData.CreatedByUid;
                        //photoCamLog.CreatedByUnit = photoCamData.CreatedByUnit;
                        //photoCamLog.CreatedTime = photoCamData.CreatedTime;
                        //photoCamLog.FileName = photoCamData.FileName;
                        //photoCamLog.Nik = photoCamData.Nik;
                        //photoCamLog.PathFile = photoCamData.PathFile;

                        //exPhotoCam = new Tbl_DataKTP_PhotoCam_Temp
                        //{
                        //    Id = photoCamData.Id,
                        //    PathFile = photoCamData.PathFile,//
                        //    Nik = photoCamData.Nik,
                        //    FileName = photoCamData.FileName,//
                        //    CreatedTime = photoCamData.CreatedTime,
                        //    CreatedById = photoCamData.CreatedById,
                        //    IsActive = photoCamData.IsActive,
                        //    IsDeleted = photoCamData.IsDeleted,
                        //    CreatedByNpp = photoCamData.CreatedByNpp,
                        //    CreatedByUID = photoCamData.CreatedByUid,
                        //    CreatedByUnit = photoCamData.CreatedByUnit,
                        //    UpdatedById = photoCamData.UpdatedById,
                        //    UpdatedByNpp = photoCamData.UpdatedByNpp,
                        //    UpdatedByUID = photoCamData.UpdatedByUid,
                        //    UpdatedByUnit = photoCamData.UpdatedByUnit,
                        //    UpdatedTime = photoCamData.UpdatedTime,
                        //    NoPengajuan = PengajuanID
                        //};

                        photoCam.PathFile = filePath;
                        photoCam.Nik = enroll.KtpNIK;
                        photoCam.FileName = fileName;
                        photoCam.IsActive = true;
                        photoCam.IsDeleted = false;
                        photoCam.UpdatedById = Id;
                        photoCam.UpdatedByNpp = npp;
                        photoCam.UpdatedByUID = enroll.UID;
                        photoCam.UpdatedByUnit = unitCode;
                        photoCam.UpdatedTime = DateTime.Now;
                        photoCam.NoPengajuan = PengajuanID;
                        photoCam.IsApprove = false;

                        photoCam.CreatedById = photoCamData.CreatedById;
                        photoCam.CreatedByNpp = photoCamData.CreatedByNpp;
                        photoCam.CreatedByUID = photoCamData.CreatedByUid;
                        photoCam.CreatedByUnit = photoCamData.CreatedByUnit;
                        photoCam.CreatedTime = photoCamData.CreatedTime;
                    }
                }
                else
                {
                    stringPerubahan = stringPerubahan + "Request Payload Photo Cam Tidak Ditemukan" + " <br/>";
                }
                #endregion

                #region finger
                var exPhotoFinger = new List<Tbl_DataKTP_Finger_Temp>();

                var exPhotoFingerEmployee = new List<Tbl_DataKTP_Finger_Employee_Temp>();

                var photoFingerLogs = new List<Tbl_DataKTP_Finger_Log>();

                var photoFingers = new List<Tbl_DataKTP_Finger_Temp>();

                var photoFingersEmployee = new List<Tbl_DataKTP_Finger_Employee_Temp>();

                var photoFingersEmployeeLogs = new List<Tbl_DataKTP_Finger_Employee_Log>();

                var fingerBefore = new Tbl_DataKTP_Finger();
                var fingerEmployeeBefore = new Tbl_DataKTP_Finger_Employee();

                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKanan))
                {

                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);

                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                    }

                    string imageEncrypted = enroll.KtpFingerKanan.Encrypt(Phrase.FileEncryption);

                    string filePath = "";
                    string filePathIso = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKanan.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";
                    string fileNameIso = "";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    string isoEncrypted = "";

                    if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKananIso))
                    {
                        isoEncrypted = enroll.KtpFingerKananIso.Encrypt(Phrase.FileEncryption);
                        fileNameIso = "PhotoFingerISO_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                        if (_sftpConfig.IsActive)
                        {
                            using var stream = new MemoryStream(Encoding.ASCII.GetBytes(isoEncrypted));

                            (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileNameIso, _sftpConfig.Host,
                                _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                            filePathIso = fPath;
                        }
                        else
                        {
                            if (!Directory.Exists(subPathFolderPhotoFinger))
                            {
                                Directory.CreateDirectory(subPathFolderPhotoFinger);
                            }

                            filePathIso = subPathFolderPhotoFinger + fileNameIso;
                            File.WriteAllText(filePathIso, isoEncrypted);
                        }
                    }

                    if (photoFingerData == null)
                    {
                        //photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                        //{
                        //    CreatedById = Id,
                        //    IsActive = true,
                        //    IsDeleted = false,
                        //    Nik = enroll.KtpNIK,
                        //    PathFile = filePath,
                        //    PathFileISO = filePathIso,
                        //    CreatedByNpp = npp,
                        //    CreatedByUID = enroll.UID,
                        //    CreatedTime = DateTime.Now,
                        //    UpdatedById = Id,
                        //    UpdatedByNpp = npp,
                        //    UpdatedByUID = enroll.UID,
                        //    UpdatedByUnit = unitCode,
                        //    CreatedByUnitId = unitId,
                        //    CreatedByUnit = unitCode,
                        //    FileJariISO = isoEncrypted,
                        //    UpdatedTime = DateTime.Now,
                        //    FileName = fileName,
                        //    FileNameISO = fileNameIso,
                        //    TypeFinger = enroll.KtpTypeJariKanan,
                        //    IsApprove = false,
                        //    NoPengajuan = PengajuanID
                        //});

                        photoFingerData = new Tbl_DataKTP_Finger
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = npp,
                            CreatedTime = DateTime.Now,
                            CreatedByUnit = unitCode,
                            CreatedByUnitId = unitId,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            FileJariISO = isoEncrypted,
                            TypeFinger = enroll.KtpTypeJariKanan
                        };

                        //Tbl_DataKTP_Finger_Log fingerBeforeLogs = photoFingerLogs.FirstOrDefault(x => x.TypeFinger.Contains("Kanan"));

                        //if (fingerBeforeLogs != null)
                        //{
                        //    photoFingerData.CreatedById = fingerBeforeLogs.CreatedById;
                        //    photoFingerData.CreatedByNpp = fingerBeforeLogs.CreatedByNpp;
                        //    photoFingerData.CreatedByUid = fingerBeforeLogs.CreatedByUid;
                        //    photoFingerData.CreatedTime = fingerBeforeLogs.CreatedTime;
                        //    photoFingerData.CreatedByUnit = fingerBeforeLogs.CreatedByUnit;
                        //    photoFingerData.CreatedByUnitId = fingerBeforeLogs.CreatedByUnitId;
                        //}

                        fingerBefore = await _profileRepository.GetPhotoFingerLike(enroll.KtpNIK, "kanan");

                        if (fingerBefore != null)
                        {
                            photoFingerData.CreatedById = fingerBefore.CreatedById;
                            photoFingerData.CreatedByNpp = fingerBefore.CreatedByNpp;
                            photoFingerData.CreatedByUid = fingerBefore.CreatedByUid;
                            photoFingerData.CreatedTime = fingerBefore.CreatedTime;
                            photoFingerData.CreatedByUnit = fingerBefore.CreatedByUnit;
                            photoFingerData.CreatedByUnitId = fingerBefore.CreatedByUnitId;
                        }

                        photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUID = photoFingerData.CreatedByUid,
                            CreatedTime = photoFingerData.CreatedTime,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            //FileJari = photoFingerData.FileJari,
                            FileJariISO = isoEncrypted,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            TypeFinger = enroll.KtpTypeJariKanan,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        });
                    }
                    else
                    {
                        //photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        //{
                        //    CreatedById = photoFingerData.CreatedById,
                        //    CreatedByNpp = photoFingerData.CreatedByNpp,
                        //    CreatedByUid = photoFingerData.CreatedByUid,
                        //    CreatedByUnit = photoFingerData.CreatedByUnit,
                        //    CreatedByUnitId = photoFingerData.CreatedByUnitId,
                        //    CreatedTime = photoFingerData.CreatedTime,
                        //    //FileJari = photoFingerData.FileJari,
                        //    FileJariISO = photoFingerData.FileJariISO,
                        //    FileName = photoFingerData.FileName,
                        //    FileNameISO = photoFingerData.FileNameISO,
                        //    Nik = photoFingerData.Nik,
                        //    PathFile = photoFingerData.PathFile,
                        //    PathFileISO = photoFingerData.PathFileISO,
                        //    TypeFinger = photoFingerData.TypeFinger
                        //});

                        //exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        //{
                        //    Id = photoFingerData.Id,
                        //    CreatedById = photoFingerData.CreatedById,
                        //    IsActive = photoFingerData.IsActive,
                        //    IsDeleted = photoFingerData.IsDeleted,
                        //    Nik = photoFingerData.Nik,
                        //    PathFile = photoFingerData.PathFile,//
                        //    PathFileISO = photoFingerData.PathFileISO,//
                        //    CreatedByNpp = photoFingerData.CreatedByNpp,
                        //    CreatedByUID = photoFingerData.CreatedByUid,
                        //    CreatedTime = DateTime.Now,
                        //    CreatedByUnit = photoFingerData.CreatedByUnit,
                        //    CreatedByUnitId = photoFingerData.CreatedByUnitId,
                        //    FileName = photoFingerData.FileName,//
                        //    FileNameISO = photoFingerData.FileNameISO,//
                        //    FileJariISO = photoFingerData.FileJariISO,
                        //    TypeFinger = photoFingerData.TypeFinger,
                        //    UpdatedById = photoFingerData.UpdatedById,
                        //    UpdatedByNpp = photoFingerData.UpdatedByNpp,
                        //    UpdatedByUID = photoFingerData.UpdatedByUid,
                        //    UpdatedByUnit = photoFingerData.UpdatedByUnit,
                        //    UpdatedTime = photoFingerData.UpdatedTime,
                        //    NoPengajuan = PengajuanID
                        //});

                        photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUID = photoFingerData.CreatedByUid,
                            CreatedTime = photoFingerData.CreatedTime,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            FileJariISO = isoEncrypted,
                            TypeFinger = enroll.KtpTypeJariKanan,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        });
                    }

                    if (isEmployee)
                    {
                        if (photoFingerDataEmployee == null)
                        {
                            //Tbl_DataKTP_Finger_Employee_Log fingerEmployeeBeforeLogs = photoFingersEmployeeLogs.FirstOrDefault(x => x.TypeFinger.Contains("Kanan"));

                            photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee
                            {
                                //CreatedById = fingerEmployeeBeforeLogs.CreatedById,
                                //CreatedByNpp = fingerEmployeeBeforeLogs.CreatedByNpp,
                                //CreatedByUid = fingerEmployeeBeforeLogs.CreatedByUid,
                                //CreatedTime = fingerEmployeeBeforeLogs.CreatedTime,
                                //CreatedByUnit = fingerEmployeeBeforeLogs.CreatedByUnit,
                                //CreatedByUnitId = fingerEmployeeBeforeLogs.CreatedByUnitId,

                                CreatedById = Id,
                                CreatedByNpp = npp,
                                CreatedByUid = enroll.UID,
                                CreatedTime = DateTime.Now,
                                CreatedByUnit = unitCode,
                                CreatedByUnitId = unitId,
                            };

                            fingerEmployeeBefore = await _profileRepository.GetPhotoFingerEmployeeLike(enroll.KtpNIK, "kanan");

                            if (fingerEmployeeBefore != null)
                            {
                                photoFingerDataEmployee.CreatedById = fingerEmployeeBefore.CreatedById;
                                photoFingerDataEmployee.CreatedByNpp = fingerEmployeeBefore.CreatedByNpp;
                                photoFingerDataEmployee.CreatedByUid = fingerEmployeeBefore.CreatedByUid;
                                photoFingerDataEmployee.CreatedTime = fingerEmployeeBefore.CreatedTime;
                                photoFingerDataEmployee.CreatedByUnit = fingerEmployeeBefore.CreatedByUnit;
                                photoFingerDataEmployee.CreatedByUnitId = fingerEmployeeBefore.CreatedByUnitId;
                            }

                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                PathFileISO = filePathIso,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUID = photoFingerDataEmployee.CreatedByUid,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUID = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                FileJariISO = isoEncrypted,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKanan,
                                IsApprove = false,
                                NoPengajuan = PengajuanID
                            });
                        }
                        else
                        {
                            //photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            //{
                            //    CreatedById = photoFingerDataEmployee.CreatedById,
                            //    CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                            //    CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                            //    CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                            //    CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                            //    CreatedTime = photoFingerDataEmployee.CreatedTime,
                            //    FileJariISO = photoFingerDataEmployee.FileJariISO,
                            //    FileName = photoFingerDataEmployee.FileName,
                            //    FileNameISO = photoFingerDataEmployee.FileNameISO,
                            //    Nik = photoFingerDataEmployee.Nik,
                            //    PathFile = photoFingerDataEmployee.PathFile,
                            //    PathFileISO = photoFingerDataEmployee.PathFileISO,
                            //    TypeFinger = photoFingerDataEmployee.TypeFinger
                            //});

                            //exPhotoFingerEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp {
                            //    CreatedById = photoFingerDataEmployee.CreatedById,
                            //    IsActive = photoFingerDataEmployee.IsActive,
                            //    IsDeleted = photoFingerDataEmployee.IsDeleted,
                            //    Nik = photoFingerDataEmployee.Nik,
                            //    PathFile = photoFingerDataEmployee.PathFile,
                            //    PathFileISO = photoFingerDataEmployee.PathFileISO,
                            //    CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                            //    CreatedByUID = photoFingerDataEmployee.CreatedByUid,
                            //    CreatedTime = photoFingerDataEmployee.CreatedTime,
                            //    UpdatedById = photoFingerDataEmployee.UpdatedById,
                            //    UpdatedByNpp = photoFingerDataEmployee.UpdatedByNpp,
                            //    UpdatedByUID = photoFingerDataEmployee.UpdatedByUid,
                            //    UpdatedByUnit = photoFingerDataEmployee.UpdatedByUnit,
                            //    CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                            //    CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                            //    FileJariISO = photoFingerDataEmployee.FileJariISO,
                            //    UpdatedTime = photoFingerDataEmployee.UpdatedTime,
                            //    FileName = photoFingerDataEmployee.FileName,
                            //    FileNameISO = photoFingerDataEmployee.FileNameISO,
                            //    TypeFinger = photoFingerDataEmployee.TypeFinger

                            //});
                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                PathFileISO = filePathIso,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUID = photoFingerDataEmployee.CreatedByUid,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUID = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                FileJariISO = isoEncrypted,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKanan,
                                IsApprove = false,
                                NoPengajuan = PengajuanID
                            });
                        }
                    }
                }
                else
                {
                    #region get data if no payload but we have to replace all data with no data
                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                    if (photoFingerData != null)
                    {
                        //exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        //{
                        //    CreatedById = photoFingerData.CreatedById,
                        //    IsActive = photoFingerData.IsActive,
                        //    IsDeleted = photoFingerData.IsDeleted,
                        //    Nik = photoFingerData.Nik,
                        //    PathFile = photoFingerData.PathFile,
                        //    PathFileISO = photoFingerData.PathFileISO,
                        //    CreatedByNpp = photoFingerData.CreatedByNpp,
                        //    CreatedByUID = photoFingerData.CreatedByUid,
                        //    CreatedTime = photoFingerData.CreatedTime,
                        //    UpdatedById = photoFingerData.UpdatedById,
                        //    UpdatedByNpp = photoFingerData.UpdatedByNpp,
                        //    UpdatedByUID = photoFingerData.UpdatedByUid,
                        //    UpdatedByUnit = photoFingerData.UpdatedByUnit,
                        //    CreatedByUnitId = photoFingerData.CreatedByUnitId,
                        //    CreatedByUnit = photoFingerData.CreatedByUnit,
                        //    FileJariISO = photoFingerData.FileJariISO,
                        //    UpdatedTime = photoFingerData.UpdatedTime,
                        //    FileName = photoFingerData.FileName,
                        //    FileNameISO = photoFingerData.FileNameISO,
                        //    TypeFinger = photoFingerData.TypeFinger

                        //});

                        //photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        //{
                        //    CreatedById = photoFingerData.CreatedById,
                        //    CreatedByNpp = photoFingerData.CreatedByNpp,
                        //    CreatedByUid = photoFingerData.CreatedByUid,
                        //    CreatedByUnit = photoFingerData.CreatedByUnit,
                        //    CreatedByUnitId = photoFingerData.CreatedByUnitId,
                        //    CreatedTime = photoFingerData.CreatedTime,
                        //    FileName = photoFingerData.FileName,
                        //    FileNameISO = photoFingerData.FileNameISO,
                        //    Nik = photoFingerData.Nik,
                        //    PathFile = photoFingerData.PathFile,
                        //    TypeFinger = photoFingerData.TypeFinger
                        //});
                    }

                    if (isEmployee)
                    {
                        var photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                        if (photoFingerDataEmployee != null)
                        {
                            //exPhotoFingerEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            //{
                            //    CreatedById = photoFingerDataEmployee.CreatedById,
                            //    IsActive = photoFingerDataEmployee.IsActive,
                            //    IsDeleted = photoFingerDataEmployee.IsDeleted,
                            //    Nik = photoFingerDataEmployee.Nik,
                            //    PathFile = photoFingerDataEmployee.PathFile,
                            //    PathFileISO = photoFingerDataEmployee.PathFileISO,
                            //    CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                            //    CreatedByUID = photoFingerDataEmployee.CreatedByUid,
                            //    CreatedTime = photoFingerDataEmployee.CreatedTime,
                            //    UpdatedById = photoFingerDataEmployee.UpdatedById,
                            //    UpdatedByNpp = photoFingerDataEmployee.UpdatedByNpp,
                            //    UpdatedByUID = photoFingerDataEmployee.UpdatedByUid,
                            //    UpdatedByUnit = photoFingerDataEmployee.UpdatedByUnit,
                            //    CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                            //    CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                            //    FileJariISO = photoFingerDataEmployee.FileJariISO,
                            //    UpdatedTime = photoFingerDataEmployee.UpdatedTime,
                            //    FileName = photoFingerDataEmployee.FileName,
                            //    FileNameISO = photoFingerDataEmployee.FileNameISO,
                            //    TypeFinger = photoFingerDataEmployee.TypeFinger

                            //});

                            //photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            //{
                            //    CreatedById = photoFingerDataEmployee.CreatedById,
                            //    CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                            //    CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                            //    CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                            //    CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                            //    CreatedTime = photoFingerDataEmployee.CreatedTime,
                            //    //FileJari = photoFingerDataEmployee.FileJari,
                            //    FileName = photoFingerDataEmployee.FileName,
                            //    FileNameISO = photoFingerDataEmployee.FileNameISO,
                            //    Nik = photoFingerDataEmployee.Nik,
                            //    PathFile = photoFingerDataEmployee.PathFile,
                            //    PathFileISO = photoFingerDataEmployee.PathFileISO,
                            //    TypeFinger = photoFingerDataEmployee.TypeFinger
                            //});
                        }
                    }
                    #endregion

                    stringPerubahan = stringPerubahan + "Request Payload Finger Kanan Tidak Ditemukan" + " <br/>";
                }

                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKiri))
                {
                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);

                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                    }

                    string imageEncrypted = enroll.KtpFingerKiri.Encrypt(Phrase.FileEncryption);

                    string filePath = "";
                    string filePathIso = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKiri.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";
                    string fileNameIso = "";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    string isoEncrypted = "";

                    if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKiriIso))
                    {
                        isoEncrypted = enroll.KtpFingerKiriIso.Encrypt(Phrase.FileEncryption);
                        fileNameIso = "PhotoFingerISO_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                        if (_sftpConfig.IsActive)
                        {
                            using var stream = new MemoryStream(Encoding.ASCII.GetBytes(isoEncrypted));

                            (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileNameIso, _sftpConfig.Host,
                                _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                            filePathIso = fPath;
                        }
                        else
                        {
                            if (!Directory.Exists(subPathFolderPhotoFinger))
                            {
                                Directory.CreateDirectory(subPathFolderPhotoFinger);
                            }

                            filePathIso = subPathFolderPhotoFinger + fileNameIso;
                            File.WriteAllText(filePathIso, isoEncrypted);
                        }
                    }

                    if (photoFingerData == null)
                    {
                        photoFingerData = new Tbl_DataKTP_Finger
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = npp,
                            CreatedByUid = enroll.UID,
                            CreatedTime = DateTime.Now,
                            CreatedByUnit = unitCode,
                            CreatedByUnitId = unitId,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            FileJariISO = isoEncrypted,
                            TypeFinger = enroll.KtpTypeJariKiri
                        };

                        //Tbl_DataKTP_Finger_Log fingerBeforeLogs = photoFingerLogs.FirstOrDefault(x => x.TypeFinger.Contains("Kiri"));

                        //if (fingerBeforeLogs != null)
                        //{
                        //    photoFingerData.CreatedById = fingerBeforeLogs.CreatedById;
                        //    photoFingerData.CreatedByNpp = fingerBeforeLogs.CreatedByNpp;
                        //    photoFingerData.CreatedByUid = fingerBeforeLogs.CreatedByUid;
                        //    photoFingerData.CreatedTime = fingerBeforeLogs.CreatedTime;
                        //    photoFingerData.CreatedByUnit = fingerBeforeLogs.CreatedByUnit;
                        //    photoFingerData.CreatedByUnitId = fingerBeforeLogs.CreatedByUnitId;
                        //}

                        fingerBefore = await _profileRepository.GetPhotoFingerLike(enroll.KtpNIK, "kiri");

                        if (fingerBefore != null)
                        {
                            photoFingerData.CreatedById = fingerBefore.CreatedById;
                            photoFingerData.CreatedByNpp = fingerBefore.CreatedByNpp;
                            photoFingerData.CreatedByUid = fingerBefore.CreatedByUid;
                            photoFingerData.CreatedTime = fingerBefore.CreatedTime;
                            photoFingerData.CreatedByUnit = fingerBefore.CreatedByUnit;
                            photoFingerData.CreatedByUnitId = fingerBefore.CreatedByUnitId;
                        }

                        photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUID = photoFingerData.CreatedByUid,
                            CreatedTime = photoFingerData.CreatedTime,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            FileJariISO = isoEncrypted,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            TypeFinger = enroll.KtpTypeJariKiri,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        });
                    }
                    else
                    {
                        //photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        //{
                        //    CreatedById = photoFingerData.CreatedById,
                        //    CreatedByNpp = photoFingerData.CreatedByNpp,
                        //    CreatedByUid = photoFingerData.CreatedByUid,
                        //    CreatedByUnit = photoFingerData.CreatedByUnit,
                        //    CreatedByUnitId = photoFingerData.CreatedByUnitId,
                        //    CreatedTime = photoFingerData.CreatedTime,
                        //    //FileJari = photoFingerData.FileJari,
                        //    FileJariISO = photoFingerData.FileJariISO,
                        //    FileName = photoFingerData.FileName,
                        //    FileNameISO = photoFingerData.FileNameISO,
                        //    Nik = photoFingerData.Nik,
                        //    PathFile = photoFingerData.PathFile,
                        //    PathFileISO = photoFingerData.PathFileISO,
                        //    TypeFinger = photoFingerData.TypeFinger
                        //});

                        //exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        //{
                        //    Id = photoFingerData.Id,
                        //    CreatedById = photoFingerData.CreatedById,
                        //    IsActive = photoFingerData.IsActive,
                        //    IsDeleted = photoFingerData.IsDeleted,
                        //    Nik = photoFingerData.Nik,
                        //    PathFile = photoFingerData.PathFile,//
                        //    PathFileISO = photoFingerData.PathFileISO,//
                        //    CreatedByNpp = photoFingerData.CreatedByNpp,
                        //    CreatedByUID = photoFingerData.CreatedByUid,
                        //    CreatedTime = photoFingerData.CreatedTime,
                        //    CreatedByUnit = photoFingerData.CreatedByUnit,
                        //    CreatedByUnitId = photoFingerData.CreatedByUnitId,
                        //    FileName = photoFingerData.FileName,//
                        //    FileNameISO = photoFingerData.FileNameISO,//
                        //    FileJariISO = photoFingerData.FileJariISO,
                        //    TypeFinger = photoFingerData.TypeFinger,
                        //    UpdatedById = photoFingerData.UpdatedById,
                        //    UpdatedByNpp = photoFingerData.UpdatedByNpp,
                        //    UpdatedByUID = photoFingerData.UpdatedByUid,
                        //    UpdatedByUnit = photoFingerData.UpdatedByUnit,
                        //    UpdatedTime = photoFingerData.UpdatedTime,
                        //    NoPengajuan = PengajuanID
                        //});

                        photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUID = photoFingerData.CreatedByUid,
                            CreatedTime = photoFingerData.CreatedTime,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            FileJariISO = isoEncrypted,
                            TypeFinger = enroll.KtpTypeJariKiri,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        });
                    }

                    if (isEmployee)
                    {
                        if (photoFingerDataEmployee == null)
                        {
                            //Tbl_DataKTP_Finger_Employee_Log fingerEmployeeBeforeLogs = photoFingersEmployeeLogs.FirstOrDefault(x => x.TypeFinger.Contains("Kiri"));

                            photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee
                            {
                                //CreatedById = fingerEmployeeBeforeLogs.CreatedById,
                                //CreatedByNpp = fingerEmployeeBeforeLogs.CreatedByNpp,
                                //CreatedByUid = fingerEmployeeBeforeLogs.CreatedByUid,
                                //CreatedTime = fingerEmployeeBeforeLogs.CreatedTime,
                                //CreatedByUnit = fingerEmployeeBeforeLogs.CreatedByUnit,
                                //CreatedByUnitId = fingerEmployeeBeforeLogs.CreatedByUnitId,

                                CreatedById = Id,
                                CreatedByNpp = npp,
                                CreatedByUid = enroll.UID,
                                CreatedTime = DateTime.Now,
                                CreatedByUnit = unitCode,
                                CreatedByUnitId = unitId,
                            };


                            //if (fingerEmployeeBeforeLogs != null)
                            //{
                            //    photoFingerDataEmployee.CreatedById = fingerEmployeeBeforeLogs.CreatedById;
                            //    photoFingerDataEmployee.CreatedByNpp = fingerEmployeeBeforeLogs.CreatedByNpp;
                            //    photoFingerDataEmployee.CreatedByUid = fingerEmployeeBeforeLogs.CreatedByUid;
                            //    photoFingerDataEmployee.CreatedTime = fingerEmployeeBeforeLogs.CreatedTime;
                            //    photoFingerDataEmployee.CreatedByUnit = fingerEmployeeBeforeLogs.CreatedByUnit;
                            //    photoFingerDataEmployee.CreatedByUnitId = fingerEmployeeBeforeLogs.CreatedByUnitId;
                            //}

                            fingerEmployeeBefore = await _profileRepository.GetPhotoFingerEmployeeLike(enroll.KtpNIK, "kiri");

                            if (fingerEmployeeBefore != null)
                            {
                                photoFingerDataEmployee.CreatedById = fingerEmployeeBefore.CreatedById;
                                photoFingerDataEmployee.CreatedByNpp = fingerEmployeeBefore.CreatedByNpp;
                                photoFingerDataEmployee.CreatedByUid = fingerEmployeeBefore.CreatedByUid;
                                photoFingerDataEmployee.CreatedTime = fingerEmployeeBefore.CreatedTime;
                                photoFingerDataEmployee.CreatedByUnit = fingerEmployeeBefore.CreatedByUnit;
                                photoFingerDataEmployee.CreatedByUnitId = fingerEmployeeBefore.CreatedByUnitId;
                            }

                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                PathFileISO = filePathIso,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUID = photoFingerDataEmployee.CreatedByUid,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUID = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                FileJariISO = isoEncrypted,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKiri,
                                IsApprove = false,
                                NoPengajuan = PengajuanID
                            });
                        }
                        else
                        {
                            //photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            //{
                            //    CreatedById = photoFingerDataEmployee.CreatedById,
                            //    CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                            //    CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                            //    CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                            //    CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                            //    CreatedTime = photoFingerDataEmployee.CreatedTime,
                            //    FileJariISO = photoFingerDataEmployee.FileJariISO,
                            //    FileName = photoFingerDataEmployee.FileName,
                            //    FileNameISO = photoFingerDataEmployee.FileNameISO,
                            //    Nik = photoFingerDataEmployee.Nik,
                            //    PathFile = photoFingerDataEmployee.PathFile,
                            //    PathFileISO = photoFingerDataEmployee.PathFileISO,
                            //    TypeFinger = photoFingerDataEmployee.TypeFinger
                            //});

                            //exPhotoFingerEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            //{
                            //    CreatedById = photoFingerDataEmployee.CreatedById,
                            //    IsActive = photoFingerDataEmployee.IsActive,
                            //    IsDeleted = photoFingerDataEmployee.IsDeleted,
                            //    Nik = photoFingerDataEmployee.Nik,
                            //    PathFile = photoFingerDataEmployee.PathFile,
                            //    PathFileISO = photoFingerDataEmployee.PathFileISO,
                            //    CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                            //    CreatedByUID = photoFingerDataEmployee.CreatedByUid,
                            //    CreatedTime = photoFingerDataEmployee.CreatedTime,
                            //    UpdatedById = photoFingerDataEmployee.UpdatedById,
                            //    UpdatedByNpp = photoFingerDataEmployee.UpdatedByNpp,
                            //    UpdatedByUID = photoFingerDataEmployee.UpdatedByUid,
                            //    UpdatedByUnit = photoFingerDataEmployee.UpdatedByUnit,
                            //    CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                            //    CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                            //    FileJariISO = photoFingerDataEmployee.FileJariISO,
                            //    UpdatedTime = photoFingerDataEmployee.UpdatedTime,
                            //    FileName = photoFingerDataEmployee.FileName,
                            //    FileNameISO = photoFingerDataEmployee.FileNameISO,
                            //    TypeFinger = photoFingerDataEmployee.TypeFinger

                            //});
                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                PathFileISO = filePathIso,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUID = photoFingerDataEmployee.CreatedByUid,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUID = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                FileJariISO = isoEncrypted,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKiri,
                                IsApprove = false,
                                NoPengajuan = PengajuanID
                            });
                        }
                    }
                }
                else
                {
                    #region get data if no payload but we have to replace all data with no data
                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                    if (photoFingerData != null)
                    {
                        exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = photoFingerData.IsActive,
                            IsDeleted = photoFingerData.IsDeleted,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            PathFileISO = photoFingerData.PathFileISO,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUID = photoFingerData.CreatedByUid,
                            CreatedTime = photoFingerData.CreatedTime,
                            UpdatedById = photoFingerData.UpdatedById,
                            UpdatedByNpp = photoFingerData.UpdatedByNpp,
                            UpdatedByUID = photoFingerData.UpdatedByUid,
                            UpdatedByUnit = photoFingerData.UpdatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            FileJariISO = photoFingerData.FileJariISO,
                            UpdatedTime = photoFingerData.UpdatedTime,
                            FileName = photoFingerData.FileName,
                            FileNameISO = photoFingerData.FileNameISO,
                            TypeFinger = photoFingerData.TypeFinger

                        });

                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUid,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            FileName = photoFingerData.FileName,
                            FileNameISO = photoFingerData.FileNameISO,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            TypeFinger = photoFingerData.TypeFinger
                        });
                    }
                    if (isEmployee)
                    {
                        var photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                        if (photoFingerDataEmployee != null)
                        {
                            //exPhotoFingerEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            //{
                            //    CreatedById = photoFingerDataEmployee.CreatedById,
                            //    IsActive = photoFingerDataEmployee.IsActive,
                            //    IsDeleted = photoFingerDataEmployee.IsDeleted,
                            //    Nik = photoFingerDataEmployee.Nik,
                            //    PathFile = photoFingerDataEmployee.PathFile,
                            //    PathFileISO = photoFingerDataEmployee.PathFileISO,
                            //    CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                            //    CreatedByUID = photoFingerDataEmployee.CreatedByUid,
                            //    CreatedTime = photoFingerDataEmployee.CreatedTime,
                            //    UpdatedById = photoFingerDataEmployee.UpdatedById,
                            //    UpdatedByNpp = photoFingerDataEmployee.UpdatedByNpp,
                            //    UpdatedByUID = photoFingerDataEmployee.UpdatedByUid,
                            //    UpdatedByUnit = photoFingerDataEmployee.UpdatedByUnit,
                            //    CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                            //    CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                            //    FileJariISO = photoFingerDataEmployee.FileJariISO,
                            //    UpdatedTime = photoFingerDataEmployee.UpdatedTime,
                            //    FileName = photoFingerDataEmployee.FileName,
                            //    FileNameISO = photoFingerDataEmployee.FileNameISO,
                            //    TypeFinger = photoFingerDataEmployee.TypeFinger

                            //});

                            //photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            //{
                            //    CreatedById = photoFingerDataEmployee.CreatedById,
                            //    CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                            //    CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                            //    CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                            //    CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                            //    CreatedTime = photoFingerDataEmployee.CreatedTime,
                            //    //FileJari = photoFingerDataEmployee.FileJari,
                            //    FileName = photoFingerDataEmployee.FileName,
                            //    FileNameISO = photoFingerDataEmployee.FileNameISO,
                            //    Nik = photoFingerDataEmployee.Nik,
                            //    PathFile = photoFingerDataEmployee.PathFile,
                            //    PathFileISO = photoFingerDataEmployee.PathFileISO,
                            //    TypeFinger = photoFingerDataEmployee.TypeFinger
                            //});
                        }
                    }
                    #endregion

                    stringPerubahan = stringPerubahan + "Request Payload Finger Kanan Tidak Ditemukan" + " <br/>";
                }
                #endregion

                var inboxTemp = new Tbl_Inbox_Enrollment_Temp()
                {
                    CreatedById = Id,
                    CreatedByNpp = npp,
                    CreatedByUnitCode = unitCode,
                    CreatedByUnitId = unitId,
                    CreatedTime = DateTime.Now,
                    ApprovedStatus = 2,
                    Status = 2,
                    NoPengajuan = PengajuanID,
                    //ApprovedByEmployeeId = dataPenyelia.PegawaiId,
                    ApprovedByEmployeeId = Int32.Parse(dataPenyelia.Pegawai_Id),
                    ApprovedByEmployeeId2 = enroll.ApprovedByEmployeeId2

                };

                var inboxTempDetail = new Tbl_Inbox_Enrollment_Temp_Detail()
                {
                    Notes = enroll.Notes,
                    SubmitById = Id,
                    SubmitByNpp = npp,
                    SubmitedByUnitCode = unitCode,
                    SubmitedByUnitId = unitId,
                    CreatedTime = DateTime.Now,
                    ApprovedStatus = 1,
                    Status = 1,
                    NoPengajuan = PengajuanID
                };

                var inboxTempDetailPenyelia = new Tbl_Inbox_Enrollment_Temp_Detail()
                {
                    Notes = _SuccessMessageConfig.OtorisasiPenyelia,
                    SubmitById = int.Parse(dataPenyelia.Pegawai_Id),
                    SubmitByNpp = dataPenyelia.NIK,
                    SubmitedByUnitCode = unitCode,
                    SubmitedByUnitId = unitId,
                    CreatedTime = enroll.otorisasiPenyelia,
                    ApprovedStatus = 2,
                    Status = 2,
                    NoPengajuan = PengajuanID
                };

                var mappingNIk = new EnrollmentFRLog()
                {
                    NIK = enroll.KtpNIK,
                    CreatedById = Id,
                    CreatedByNpp = npp,
                    CreatedByUnitId = unitId,
                    CreatedTime = DateTime.Now,
                    MatchScore = enroll.MatchScore
                };

                var (status, msg) = await _enrollmentKTPRepository.InsertEnrollFlowNoMatchingv2(mappingNIk, dataDemografis, logDemografi, photoKtp, photoKtpLog, photoSignature, photoSignatureLog,
                    photoCam, photoCamLog, photoFingers, photoFingerLogs, exPhotoKtp, exPhotoSignature, exPhotoCam, exPhotoFinger, dataNpp, dataReaderLog, photoFingersEmployee, exPhotoFingerEmployee, inboxTemp, inboxTempDetail, inboxTempDetailPenyelia);

                #region Logging Reader Activity
                _ = _alatReaderRepository.CreateLogActivity2(dataReaderActivityLog);
                _ = _alatReaderRepository.CreateAlatReaderLog(dataReaderLog);
                #endregion

                if (status)
                {
                    return (_SuccessMessageConfig.NasabahSuksesUpdate, (int)ServiceResponseStatus.SUKSES, cekKTP.CIF);
                }
                else
                {
                    return (_ErrorMessageConfig.DemografiGagalEnroll, (int)ServiceResponseStatus.ERROR, msg + " " + stringPerubahan);
                }
            }
            else
            {

                var cekKTPTemp = await _profileRepository.GetDataDemografisTemp(enroll.KtpNIK)
                .ConfigureAwait(false);

                if (cekKTPTemp == null) return (_ErrorMessageConfig.DemografiTidakDitemukan, (int)ServiceResponseStatus.Data_Empty, "");


                #region update demografi
                var logDemografi = new Tbl_DataKTP_Demografis_Log
                {
                    Agama = cekKTPTemp.Agama,
                    Alamat = cekKTPTemp.Alamat,
                    AlamatGoogle = cekKTPTemp.AlamatGoogle,
                    AlamatLengkap = cekKTPTemp.AlamatLengkap,
                    CreatedById = cekKTPTemp.CreatedById,
                    CreatedByUID = cekKTPTemp.CreatedByUID,
                    CreatedByUnitId = cekKTPTemp.CreatedByUnitId,
                    CreatedTime = cekKTPTemp.CreatedTime,
                    Desa = cekKTPTemp.Desa,
                    GolonganDarah = cekKTPTemp.GolonganDarah,
                    JenisKelamin = cekKTPTemp.JenisKelamin,
                    Kecamatan = cekKTPTemp.Kecamatan,
                    Kelurahan = cekKTPTemp.Kelurahan,
                    Kewarganegaraan = cekKTPTemp.Kewarganegaraan,
                    KodePos = cekKTPTemp.KodePos,
                    Kota = cekKTPTemp.Kota,
                    Latitude = cekKTPTemp.Latitude,
                    Longitude = cekKTPTemp.Longitude,
                    MasaBerlaku = cekKTPTemp.MasaBerlaku,
                    Nama = cekKTPTemp.Nama,
                    NIK = cekKTPTemp.NIK,
                    Pekerjaan = cekKTPTemp.Pekerjaan,
                    Provinsi = cekKTPTemp.Provinsi,
                    RT = cekKTPTemp.RT,
                    RW = cekKTPTemp.RW,
                    StatusPerkawinan = cekKTPTemp.StatusPerkawinan,
                    TanggalLahir = cekKTPTemp.TanggalLahir,
                    TempatLahir = cekKTPTemp.TempatLahir,
                    CIF = cekKTPTemp.CIF,
                    CreatedByNpp = cekKTPTemp.CreatedByNpp
                };

                var stringPerubahan = "";

                if (cekKTPTemp.Nama != enroll.KtpNama)
                {
                    stringPerubahan = stringPerubahan + "NAMA : " + cekKTPTemp.Nama + " -> " + enroll.KtpNama + " <br/>";
                    cekKTPTemp.Nama = enroll.KtpNama;
                }

                if (cekKTPTemp.TempatLahir != enroll.KtpTempatLahir)
                {
                    stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTPTemp.TempatLahir + " -> " + enroll.KtpTempatLahir + " <br/>";
                    cekKTPTemp.TempatLahir = enroll.KtpTempatLahir;
                }

                if (enroll.KtpTanggalLahir != null)
                {
                    if (cekKTPTemp.TempatLahir != enroll.KtpTempatLahir)
                    {
                        stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTPTemp.TanggalLahir + " -> " + enroll.KtpTanggalLahir + " <br/>";
                        cekKTPTemp.TanggalLahir = DateTime.ParseExact(enroll.KtpTanggalLahir, "MM-dd-yyyy", CultureInfo.InvariantCulture);
                    }
                }

                if (cekKTPTemp.JenisKelamin != enroll.KtpJanisKelamin)
                {
                    stringPerubahan = stringPerubahan + "JENIS KELAMIN : " + cekKTPTemp.JenisKelamin + " -> " + enroll.KtpJanisKelamin + " <br/>";
                    cekKTPTemp.JenisKelamin = enroll.KtpJanisKelamin;
                }

                if (cekKTPTemp.GolonganDarah != enroll.KtpGolonganDarah)
                {
                    stringPerubahan = stringPerubahan + "GOLONGAN DARAH : " + cekKTPTemp.GolonganDarah + " -> " + enroll.KtpGolonganDarah + " <br/>";
                    cekKTPTemp.GolonganDarah = enroll.KtpGolonganDarah;
                }

                if (cekKTPTemp.Alamat != enroll.KtpAlamat)
                {
                    stringPerubahan = stringPerubahan + "ALAMAT : " + cekKTPTemp.Alamat + " -> " + enroll.KtpAlamat + " <br/>";
                    cekKTPTemp.Alamat = enroll.KtpAlamat;
                }

                if (cekKTPTemp.RT != enroll.KtpRT)
                {
                    stringPerubahan = stringPerubahan + "RT : " + cekKTPTemp.RT + " -> " + enroll.KtpRT + " <br/>";
                    cekKTPTemp.RT = enroll.KtpRT;
                }

                if (cekKTPTemp.RW != enroll.KtpRW)
                {
                    stringPerubahan = stringPerubahan + "RW : " + cekKTPTemp.RW + " -> " + enroll.KtpRW + " <br/>";
                    cekKTPTemp.RW = enroll.KtpRW;
                }

                if (cekKTPTemp.Kelurahan != enroll.KtpKelurahan)
                {
                    stringPerubahan = stringPerubahan + "KELURAHAN : " + cekKTPTemp.Kelurahan + " -> " + enroll.KtpKelurahan + " <br/>";
                    cekKTPTemp.Kelurahan = enroll.KtpKelurahan;
                }

                if (cekKTPTemp.Kecamatan != enroll.KtpKecamatan)
                {
                    stringPerubahan = stringPerubahan + "KECAMATAN : " + cekKTPTemp.Kecamatan + " -> " + enroll.KtpKecamatan + " <br/>";
                    cekKTPTemp.Kecamatan = enroll.KtpKecamatan;
                }

                if (cekKTPTemp.Kota != enroll.KtpKota)
                {
                    stringPerubahan = stringPerubahan + "KOTA/KABUPATEN : " + cekKTPTemp.Kota + " -> " + enroll.KtpKota + " <br/>";
                    cekKTPTemp.Kota = enroll.KtpKota;
                }

                if (cekKTPTemp.Provinsi != enroll.KtpProvinsi)
                {
                    stringPerubahan = stringPerubahan + "PROVINSI  : " + cekKTPTemp.Provinsi + " -> " + enroll.KtpProvinsi + " <br/>";
                    cekKTPTemp.Provinsi = enroll.KtpProvinsi;
                }

                if (cekKTPTemp.Agama != enroll.KtpAgama)
                {
                    stringPerubahan = stringPerubahan + "AGAMA  : " + cekKTPTemp.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTPTemp.Agama = enroll.KtpAgama;
                }

                if (cekKTPTemp.StatusPerkawinan != enroll.KtpStatusPerkawinan)
                {
                    stringPerubahan = stringPerubahan + "STATUS PERKAWINAN  : " + cekKTPTemp.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTPTemp.StatusPerkawinan = enroll.KtpStatusPerkawinan;
                }

                if (cekKTPTemp.Pekerjaan != enroll.KtpPekerjaan)
                {
                    stringPerubahan = stringPerubahan + "PEKERJAAN  : " + cekKTPTemp.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTPTemp.Pekerjaan = enroll.KtpPekerjaan;
                }

                if (cekKTPTemp.Kewarganegaraan != enroll.KtpKewarganegaraan)
                {
                    stringPerubahan = stringPerubahan + "KEWARGANEGARAAN  : " + cekKTPTemp.Kewarganegaraan + " -> " + enroll.KtpKewarganegaraan + " <br/>";
                    cekKTPTemp.Kewarganegaraan = enroll.KtpKewarganegaraan;
                }
                if (cekKTPTemp.MasaBerlaku != enroll.KtpMasaBerlaku)
                {
                    stringPerubahan = stringPerubahan + "MASA BERLAKU  : " + cekKTPTemp.MasaBerlaku + " -> " + enroll.KtpMasaBerlaku + " <br/>";
                    cekKTPTemp.MasaBerlaku = enroll.KtpMasaBerlaku;
                }
                if (cekKTPTemp.CIF == null)
                {
                    var cifData = new ApiSOAResponse();
                    #region Hit SOA And Loggging it
                    if (isHitSOA == true)
                    {
                        cifData = await _cifService.GetSOAByCif(ReqSoa)
                        .ConfigureAwait(false);

                        var _status = 0;
                        if (cifData.cif != null)
                        {
                            _status = 1;
                        }

                        var _log = new Tbl_ThirdPartyLog
                        {
                            FeatureName = "ReSubmitEnrollmentFingerEncryptedNoMatching",
                            HostUrl = ReqSoa.host,
                            Request = Newtonsoft.Json.JsonConvert.SerializeObject(ReqSoa),
                            Status = _status,
                            Response = Newtonsoft.Json.JsonConvert.SerializeObject(cifData),
                            CreatedDate = System.DateTime.Now,
                            CreatedBy = npp
                        };

                        _ = _enrollmentKTPRepository.CreateThirdPartyLog(_log);
                    }
                    else
                    {
                        try
                        {
                            var res = await _cifService.GetCIF(new NikDto { Nik = enroll.KtpNIK },
                            new NikDtoUrl { baseUrl = ReqSoa.baseUrlNonSoa, endpoint = ReqSoa.UrlEndPointNonSoa });
                            if (res.Data == null)
                            {
                                cifData.cif = null;
                            }
                            else
                            {
                                cifData.cif = res.Data.Cif;
                            };
                        }
                        catch (Exception ex)
                        {
                            cifData.cif = null;
                        }
                    }
                    #endregion

                    if (!String.IsNullOrEmpty(cifData.cif))
                    {
                        cifData.cif = cifData.cif.Trim();
                    }

                    stringPerubahan = stringPerubahan + "CIF  : " + cekKTPTemp.CIF + " -> " + cifData.cif + " <br/>";
                    cekKTPTemp.CIF = cifData.cif;
                }

                cekKTPTemp.UpdatedTime = DateTime.Now;
                cekKTPTemp.UpdatedById = Id;
                cekKTPTemp.UpdatedByUID = enroll.UID;
                cekKTPTemp.UpdatedByUnitCode = unitCode;
                cekKTPTemp.UpdatedByUnitId = unitId;
                cekKTPTemp.UpdatedByNpp = npp;


                dataDemografis = new Tbl_DataKTP_Demografis_Temp
                {
                    Agama = cekKTPTemp.Agama,
                    Alamat = cekKTPTemp.Alamat,
                    AlamatGoogle = cekKTPTemp.AlamatGoogle,
                    AlamatLengkap = cekKTPTemp.AlamatLengkap,
                    CIF = cekKTPTemp.CIF,
                    NIK = cekKTPTemp.NIK,
                    CreatedById = Id,
                    IsActive = true,
                    IsDeleted = false,
                    JenisKelamin = cekKTPTemp.JenisKelamin,
                    Kecamatan = cekKTPTemp.Kecamatan,
                    Kelurahan = cekKTPTemp.Kelurahan,
                    CreatedByUID = enroll.UID,
                    CreatedTime = DateTime.Now,
                    GolonganDarah = cekKTPTemp.GolonganDarah,
                    Kewarganegaraan = cekKTPTemp.Kewarganegaraan,
                    KodePos = cekKTPTemp.KodePos,
                    Kota = cekKTPTemp.Kota,
                    Latitude = cekKTPTemp.Latitude,
                    Longitude = cekKTPTemp.Longitude,
                    MasaBerlaku = cekKTPTemp.MasaBerlaku,
                    Nama = cekKTPTemp.Nama,
                    Pekerjaan = cekKTPTemp.Pekerjaan,
                    Provinsi = cekKTPTemp.Provinsi,
                    RT = cekKTPTemp.RT,
                    RW = cekKTPTemp.RW,
                    StatusPerkawinan = cekKTPTemp.StatusPerkawinan,
                    TanggalLahir = string.IsNullOrWhiteSpace(cekKTPTemp.TanggalLahir.ToString()) ? null : DateTime.ParseExact(cekKTPTemp.TanggalLahir.ToString(), "dd-MM-yyyy", CultureInfo.InvariantCulture),
                    TempatLahir = cekKTPTemp.TempatLahir,
                    CreatedByNpp = npp,
                    CreatedByUnitCode = unitCode,
                    CreatedByUnitId = unitId,
                    IsVerified = false,
                    IsNasabahTemp = string.IsNullOrWhiteSpace(cekKTPTemp.CIF),
                    IsApprove = false,
                    NoPengajuan = PengajuanID,
                    Id = cekKTPTemp.Id
                };

                if (string.IsNullOrWhiteSpace(stringPerubahan))
                {
                    stringPerubahan = stringPerubahan + "Data Demografi tidak ada perubahan" + " <br/>";
                }
                #endregion

                if (isEmployee)
                {
                    var _mappingData = await _enrollmentKTPRepository.MappingNppNikByNik(enroll.KtpNIK);
                    if (_mappingData == null)
                    {
                        dataNpp = new Tbl_Mapping_Pegawai_KTP
                        {
                            CreatedById = Id,
                            NIK = enroll.KtpNIK,
                            Npp = _empData.Npp,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            CreatedByUnit = unitCode,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            UpdatedTime = DateTime.Now,
                        };
                    }
                    else
                    {
                        dataNpp = _mappingData;
                        dataNpp.UpdatedByNpp = npp;
                        dataNpp.UpdatedByUID = enroll.UID;
                        dataNpp.UpdatedByUnit = unitCode;
                        dataNpp.UpdatedTime = DateTime.Now;
                    }
                }

                var sysPathFolder = await _sysParameterRepository.GetPathFolder("PathFolderData");
                string pathFolder = sysPathFolder.Value;

                var photoKtpLog = new Tbl_DataKTP_Photo_Log();
                var photoKTPData = await _profileRepository.GetPhotoKtpTemp(enroll.KtpNIK)
                        .ConfigureAwait(false);
                var exPhotoKtp = photoKTPData;

                //var exPhotoKtp = new Tbl_DataKTP_Photo_Temp();

                var photoKtp = new Tbl_DataKTP_Photo_Temp();

                #region update Photo KTP
                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoKTP))
                {
                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpPhotoKTP);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderPhoto")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderFoto = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "Foto_" + enroll.KtpNIK + "_" + JamServer + ".jpg";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderFoto, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderFoto))
                        {
                            Directory.CreateDirectory(subPathFolderFoto);
                        }

                        filePath = subPathFolderFoto + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoKTPData == null)
                    {
                        photoKtp = new Tbl_DataKTP_Photo_Temp
                        {
                            PathFile = filePath,
                            Nik = enroll.KtpNIK,
                            FileName = fileName,
                            IsActive = true,
                            IsDeleted = false,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            UpdatedTime = DateTime.Now,
                            CreatedById = Id,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedByUnit = unitCode,
                            CreatedTime = DateTime.Now,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        };
                    }
                    else
                    {
                        photoKtpLog.CreatedById = photoKTPData.CreatedById;
                        photoKtpLog.CreatedByNpp = photoKTPData.CreatedByNpp;
                        photoKtpLog.CreatedByUid = photoKTPData.CreatedByUID;
                        photoKtpLog.CreatedByUnit = photoKTPData.CreatedByUnit;
                        photoKtpLog.CreatedTime = photoKTPData.CreatedTime;
                        photoKtpLog.FileName = photoKTPData.FileName;
                        photoKtpLog.Nik = photoKTPData.Nik;
                        photoKtpLog.PathFile = photoKTPData.PathFile;

                        photoKTPData.PathFile = filePath;
                        photoKTPData.Nik = enroll.KtpNIK;
                        photoKTPData.FileName = fileName;
                        photoKTPData.IsActive = true;
                        photoKTPData.IsDeleted = false;
                        photoKTPData.UpdatedById = Id;
                        photoKTPData.UpdatedByNpp = npp;
                        photoKTPData.UpdatedByUID = enroll.UID;
                        photoKTPData.UpdatedByUnit = unitCode;
                        photoKTPData.UpdatedTime = DateTime.Now;
                        photoKTPData.NoPengajuan = PengajuanID;
                        photoKTPData.IsApprove = false;
                    }
                }
                else
                {
                    stringPerubahan = stringPerubahan + "Request Payload Photo Tidak Ditemukan" + " <br/>";
                }
                #endregion

                var photoSignatureLog = new Tbl_DataKTP_Signature_Log();
                var photoSignatureData = await _profileRepository.GetPhotoSignatureTemp(enroll.KtpNIK)
                        .ConfigureAwait(false);
                var exphotoSignatureData = photoSignatureData;

                //var exPhotoSignature = new Tbl_DataKTP_Signature_Temp();
                var photoSignature = new Tbl_DataKTP_Signature_Temp();

                #region update signature
                if (!string.IsNullOrWhiteSpace(enroll.KtpSignature))
                {
                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpSignature);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderSignature")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderSignature = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "Signature_" + enroll.KtpNIK + "_" + JamServer + ".jpg";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderSignature, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderSignature))
                        {
                            Directory.CreateDirectory(subPathFolderSignature);
                        }

                        filePath = subPathFolderSignature + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoSignatureData == null)
                    {
                        photoSignature = new Tbl_DataKTP_Signature_Temp
                        {
                            CreatedById = Id,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            CreatedByUnit = unitCode,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedTime = DateTime.Now,
                            UpdatedByUnit = unitCode,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            FileName = fileName,
                            PathFile = filePath,
                            NoPengajuan = PengajuanID,
                            IsApprove = false
                        };
                    }
                    else
                    {
                        photoSignatureLog.CreatedById = photoSignatureData.CreatedById;
                        photoSignatureLog.CreatedByNpp = photoSignatureData.CreatedByNpp;
                        photoSignatureLog.CreatedByUid = photoSignatureData.CreatedByUID;
                        photoSignatureLog.CreatedByUnit = photoSignatureData.CreatedByUnit;
                        photoSignatureLog.CreatedTime = photoSignatureData.CreatedTime;
                        photoSignatureLog.FileName = photoSignatureData.FileName;
                        photoSignatureLog.Nik = photoSignatureData.Nik;
                        photoSignatureLog.PathFile = photoSignatureData.PathFile;

                        photoSignatureData.UpdatedById = Id;
                        photoSignatureData.UpdatedByNpp = npp;
                        photoSignatureData.UpdatedByUID = enroll.UID;
                        photoSignatureData.UpdatedTime = DateTime.Now;
                        photoSignatureData.IsActive = true;
                        photoSignatureData.IsDeleted = false;
                        photoSignatureData.Nik = enroll.KtpNIK;
                        photoSignatureData.FileName = fileName;
                        photoSignatureData.PathFile = filePath;
                        photoSignatureData.NoPengajuan = PengajuanID;
                        photoSignatureData.IsApprove = false;

                    }
                }
                else
                {
                    stringPerubahan = stringPerubahan + "Request Payload Signature Tidak Ditemukan" + " <br/>";
                }
                #endregion

                var photoCamLog = new Tbl_DataKTP_PhotoCam_Log();
                var photoCamData = await _profileRepository.GetPhotoCamTemp(enroll.KtpNIK)
                        .ConfigureAwait(false);
                var exphotoCamData = photoCamData;

                //var exPhotoCam = new Tbl_DataKTP_PhotoCam_Temp();
                var photoCam = new Tbl_DataKTP_PhotoCam_Temp();
                #region update photo cam
                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoCam))
                {
                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpPhotoCam);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderWebcam")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string SubPathFolderPhotoCam = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "PhotoCam_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(SubPathFolderPhotoCam, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(SubPathFolderPhotoCam))
                        {
                            Directory.CreateDirectory(SubPathFolderPhotoCam);
                        }

                        filePath = SubPathFolderPhotoCam + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoCamData == null)
                    {
                        photoCam = new Tbl_DataKTP_PhotoCam_Temp
                        {
                            PathFile = filePath,
                            Nik = enroll.KtpNIK,
                            FileName = fileName,
                            CreatedTime = DateTime.Now,
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedByUnit = unitCode,
                            IsApprove = false,
                            NoPengajuan = PengajuanID,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedTime = DateTime.Now,
                            UpdatedByUnit = unitCode
                        };

                    }
                    else
                    {
                        photoCamLog.CreatedById = photoCamData.CreatedById;
                        photoCamLog.CreatedByNpp = photoCamData.CreatedByNpp;
                        photoCamLog.CreatedByUid = photoCamData.CreatedByUID;
                        photoCamLog.CreatedByUnit = photoCamData.CreatedByUnit;
                        photoCamLog.CreatedTime = photoCamData.CreatedTime;
                        photoCamLog.FileName = photoCamData.FileName;
                        photoCamLog.Nik = photoCamData.Nik;
                        photoCamLog.PathFile = photoCamData.PathFile;

                        photoCamData.PathFile = filePath;
                        photoCamData.Nik = enroll.KtpNIK;
                        photoCamData.FileName = fileName;
                        photoCamData.IsActive = true;
                        photoCamData.IsDeleted = false;
                        photoCamData.UpdatedById = Id;
                        photoCamData.UpdatedByNpp = npp;
                        photoCamData.UpdatedByUID = enroll.UID;
                        photoCamData.UpdatedTime = DateTime.Now;
                        photoCamData.NoPengajuan = PengajuanID;
                        photoCamData.IsApprove = false;

                    }
                }
                else
                {
                    stringPerubahan = stringPerubahan + "Request Payload Photo Cam Tidak Ditemukan" + " <br/>";
                }
                #endregion

                #region finger
                var exPhotoFinger = new List<Tbl_DataKTP_Finger_Temp>();

                var exPhotoFingerEmployee = new List<Tbl_DataKTP_Finger_Employee_Temp>();

                var photoFingerLogs = new List<Tbl_DataKTP_Finger_Log>();

                var photoFingers = new List<Tbl_DataKTP_Finger_Temp>();

                var photoFingersEmployee = new List<Tbl_DataKTP_Finger_Employee_Temp>();

                var photoFingersEmployeeLogs = new List<Tbl_DataKTP_Finger_Employee_Log>();

                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKanan))
                {

                    var photoFingerData = await _profileRepository.GetPhotoFingerTemp(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);

                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee_Temp();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployeeTemp(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                    }

                    string imageEncrypted = enroll.KtpFingerKanan.Encrypt(Phrase.FileEncryption);

                    string filePath = "";
                    string filePathIso = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKanan.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";
                    string fileNameIso = "";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    string isoEncrypted = "";

                    if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKananIso))
                    {
                        isoEncrypted = enroll.KtpFingerKananIso.Encrypt(Phrase.FileEncryption);
                        fileNameIso = "PhotoFingerISO_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                        if (_sftpConfig.IsActive)
                        {
                            using var stream = new MemoryStream(Encoding.ASCII.GetBytes(isoEncrypted));

                            (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileNameIso, _sftpConfig.Host,
                                _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                            filePathIso = fPath;
                        }
                        else
                        {
                            if (!Directory.Exists(subPathFolderPhotoFinger))
                            {
                                Directory.CreateDirectory(subPathFolderPhotoFinger);
                            }

                            filePathIso = subPathFolderPhotoFinger + fileNameIso;
                            File.WriteAllText(filePathIso, isoEncrypted);
                        }
                    }

                    if (photoFingerData == null)
                    {
                        photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = unitId,
                            CreatedByUnit = unitCode,
                            FileJariISO = isoEncrypted,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            TypeFinger = enroll.KtpTypeJariKanan,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        });
                    }
                    else
                    {
                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUID,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            //FileJari = photoFingerData.FileJari,
                            FileJariISO = photoFingerData.FileJariISO,
                            FileName = photoFingerData.FileName,
                            FileNameISO = photoFingerData.FileNameISO,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            PathFileISO = photoFingerData.PathFileISO,
                            TypeFinger = photoFingerData.TypeFinger
                        });

                        exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            Id = photoFingerData.Id,
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = photoFingerData.IsActive,
                            IsDeleted = photoFingerData.IsDeleted,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,//
                            PathFileISO = photoFingerData.PathFileISO,//
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUID = photoFingerData.CreatedByUID,
                            CreatedTime = DateTime.Now,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            FileName = photoFingerData.FileName,//
                            FileNameISO = photoFingerData.FileNameISO,//
                            FileJariISO = photoFingerData.FileJariISO,
                            TypeFinger = photoFingerData.TypeFinger,
                            UpdatedById = photoFingerData.UpdatedById,
                            UpdatedByNpp = photoFingerData.UpdatedByNpp,
                            UpdatedByUID = photoFingerData.UpdatedByUID,
                            UpdatedByUnit = photoFingerData.UpdatedByUnit,
                            UpdatedTime = photoFingerData.UpdatedTime,
                            NoPengajuan = PengajuanID
                        });

                        photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = unitId,
                            CreatedByUnit = unitCode,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            FileJariISO = isoEncrypted,
                            TypeFinger = enroll.KtpTypeJariKanan,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        });
                    }

                    if (isEmployee)
                    {
                        if (photoFingerDataEmployee == null)
                        {
                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = Id,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                PathFileISO = filePathIso,
                                CreatedByNpp = npp,
                                CreatedByUID = enroll.UID,
                                CreatedTime = DateTime.Now,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUID = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = unitId,
                                CreatedByUnit = unitCode,
                                FileJariISO = isoEncrypted,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKanan,
                                IsApprove = false,
                                NoPengajuan = PengajuanID
                            });
                        }
                        else
                        {
                            photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUID,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                FileJariISO = photoFingerDataEmployee.FileJariISO,
                                FileName = photoFingerDataEmployee.FileName,
                                FileNameISO = photoFingerDataEmployee.FileNameISO,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                PathFileISO = photoFingerDataEmployee.PathFileISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger
                            });

                            exPhotoFingerEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = photoFingerDataEmployee.IsActive,
                                IsDeleted = photoFingerDataEmployee.IsDeleted,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                PathFileISO = photoFingerDataEmployee.PathFileISO,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUID = photoFingerDataEmployee.CreatedByUID,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = photoFingerDataEmployee.UpdatedById,
                                UpdatedByNpp = photoFingerDataEmployee.UpdatedByNpp,
                                UpdatedByUID = photoFingerDataEmployee.UpdatedByUID,
                                UpdatedByUnit = photoFingerDataEmployee.UpdatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                FileJariISO = photoFingerDataEmployee.FileJariISO,
                                UpdatedTime = photoFingerDataEmployee.UpdatedTime,
                                FileName = photoFingerDataEmployee.FileName,
                                FileNameISO = photoFingerDataEmployee.FileNameISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger

                            });
                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                PathFileISO = filePathIso,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUID = photoFingerDataEmployee.CreatedByUID,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUID = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                FileJariISO = isoEncrypted,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKanan,
                                IsApprove = false,
                                NoPengajuan = PengajuanID
                            });
                        }
                    }
                }
                else
                {
                    #region get data if no payload but we have to replace all data with no data
                    var photoFingerData = await _profileRepository.GetPhotoFingerTemp(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                    if (photoFingerData != null)
                    {
                        exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = photoFingerData.IsActive,
                            IsDeleted = photoFingerData.IsDeleted,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            PathFileISO = photoFingerData.PathFileISO,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUID = photoFingerData.CreatedByUID,
                            CreatedTime = photoFingerData.CreatedTime,
                            UpdatedById = photoFingerData.UpdatedById,
                            UpdatedByNpp = photoFingerData.UpdatedByNpp,
                            UpdatedByUID = photoFingerData.UpdatedByUID,
                            UpdatedByUnit = photoFingerData.UpdatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            FileJariISO = photoFingerData.FileJariISO,
                            UpdatedTime = photoFingerData.UpdatedTime,
                            FileName = photoFingerData.FileName,
                            FileNameISO = photoFingerData.FileNameISO,
                            TypeFinger = photoFingerData.TypeFinger

                        });

                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUID,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            FileName = photoFingerData.FileName,
                            FileNameISO = photoFingerData.FileNameISO,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            TypeFinger = photoFingerData.TypeFinger
                        });
                    }

                    if (isEmployee)
                    {
                        var photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployeeTemp(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                        if (photoFingerDataEmployee != null)
                        {
                            exPhotoFingerEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = photoFingerDataEmployee.IsActive,
                                IsDeleted = photoFingerDataEmployee.IsDeleted,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                PathFileISO = photoFingerDataEmployee.PathFileISO,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUID = photoFingerDataEmployee.CreatedByUID,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = photoFingerDataEmployee.UpdatedById,
                                UpdatedByNpp = photoFingerDataEmployee.UpdatedByNpp,
                                UpdatedByUID = photoFingerDataEmployee.UpdatedByUID,
                                UpdatedByUnit = photoFingerDataEmployee.UpdatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                FileJariISO = photoFingerDataEmployee.FileJariISO,
                                UpdatedTime = photoFingerDataEmployee.UpdatedTime,
                                FileName = photoFingerDataEmployee.FileName,
                                FileNameISO = photoFingerDataEmployee.FileNameISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger

                            });

                            photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUID,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                //FileJari = photoFingerDataEmployee.FileJari,
                                FileName = photoFingerDataEmployee.FileName,
                                FileNameISO = photoFingerDataEmployee.FileNameISO,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                PathFileISO = photoFingerDataEmployee.PathFileISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger
                            });
                        }
                    }
                    #endregion

                    stringPerubahan = stringPerubahan + "Request Payload Finger Kanan Tidak Ditemukan" + " <br/>";
                }

                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKiri))
                {
                    var photoFingerData = await _profileRepository.GetPhotoFingerTemp(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);

                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee_Temp();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployeeTemp(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                    }

                    string imageEncrypted = enroll.KtpFingerKiri.Encrypt(Phrase.FileEncryption);

                    string filePath = "";
                    string filePathIso = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKiri.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";
                    string fileNameIso = "";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    string isoEncrypted = "";

                    if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKiriIso))
                    {
                        isoEncrypted = enroll.KtpFingerKiriIso.Encrypt(Phrase.FileEncryption);
                        fileNameIso = "PhotoFingerISO_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                        if (_sftpConfig.IsActive)
                        {
                            using var stream = new MemoryStream(Encoding.ASCII.GetBytes(isoEncrypted));

                            (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileNameIso, _sftpConfig.Host,
                                _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                            filePathIso = fPath;
                        }
                        else
                        {
                            if (!Directory.Exists(subPathFolderPhotoFinger))
                            {
                                Directory.CreateDirectory(subPathFolderPhotoFinger);
                            }

                            filePathIso = subPathFolderPhotoFinger + fileNameIso;
                            File.WriteAllText(filePathIso, isoEncrypted);
                        }
                    }

                    if (photoFingerData == null)
                    {
                        photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = unitId,
                            CreatedByUnit = unitCode,
                            FileJariISO = isoEncrypted,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            TypeFinger = enroll.KtpTypeJariKanan,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        });
                    }
                    else
                    {
                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUID,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            //FileJari = photoFingerData.FileJari,
                            FileJariISO = photoFingerData.FileJariISO,
                            FileName = photoFingerData.FileName,
                            FileNameISO = photoFingerData.FileNameISO,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            PathFileISO = photoFingerData.PathFileISO,
                            TypeFinger = photoFingerData.TypeFinger
                        });

                        exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            Id = photoFingerData.Id,
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = photoFingerData.IsActive,
                            IsDeleted = photoFingerData.IsDeleted,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,//
                            PathFileISO = photoFingerData.PathFileISO,//
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUID = photoFingerData.CreatedByUID,
                            CreatedTime = photoFingerData.CreatedTime,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            FileName = photoFingerData.FileName,//
                            FileNameISO = photoFingerData.FileNameISO,//
                            FileJariISO = photoFingerData.FileJariISO,
                            TypeFinger = photoFingerData.TypeFinger,
                            UpdatedById = photoFingerData.UpdatedById,
                            UpdatedByNpp = photoFingerData.UpdatedByNpp,
                            UpdatedByUID = photoFingerData.UpdatedByUID,
                            UpdatedByUnit = photoFingerData.UpdatedByUnit,
                            UpdatedTime = photoFingerData.UpdatedTime,
                            NoPengajuan = PengajuanID
                        });

                        photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = unitId,
                            CreatedByUnit = unitCode,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            FileJariISO = isoEncrypted,
                            TypeFinger = enroll.KtpTypeJariKiri,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        });
                    }

                    if (isEmployee)
                    {
                        if (photoFingerDataEmployee == null)
                        {
                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = Id,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                PathFileISO = filePathIso,
                                CreatedByNpp = npp,
                                CreatedByUID = enroll.UID,
                                CreatedTime = DateTime.Now,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUID = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = unitId,
                                CreatedByUnit = unitCode,
                                FileJariISO = isoEncrypted,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKiri,
                                IsApprove = false,
                                NoPengajuan = PengajuanID
                            });
                        }
                        else
                        {
                            photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUID,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                FileJariISO = photoFingerDataEmployee.FileJariISO,
                                FileName = photoFingerDataEmployee.FileName,
                                FileNameISO = photoFingerDataEmployee.FileNameISO,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                PathFileISO = photoFingerDataEmployee.PathFileISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger
                            });

                            exPhotoFingerEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = photoFingerDataEmployee.IsActive,
                                IsDeleted = photoFingerDataEmployee.IsDeleted,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                PathFileISO = photoFingerDataEmployee.PathFileISO,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUID = photoFingerDataEmployee.CreatedByUID,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = photoFingerDataEmployee.UpdatedById,
                                UpdatedByNpp = photoFingerDataEmployee.UpdatedByNpp,
                                UpdatedByUID = photoFingerDataEmployee.UpdatedByUID,
                                UpdatedByUnit = photoFingerDataEmployee.UpdatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                FileJariISO = photoFingerDataEmployee.FileJariISO,
                                UpdatedTime = photoFingerDataEmployee.UpdatedTime,
                                FileName = photoFingerDataEmployee.FileName,
                                FileNameISO = photoFingerDataEmployee.FileNameISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger

                            });
                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                PathFileISO = filePathIso,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUID = photoFingerDataEmployee.CreatedByUID,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUID = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                FileJariISO = isoEncrypted,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKiri,
                                IsApprove = false,
                                NoPengajuan = PengajuanID
                            });
                        }
                    }
                }
                else
                {
                    #region get data if no payload but we have to replace all data with no data
                    var photoFingerData = await _profileRepository.GetPhotoFingerTemp(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                    if (photoFingerData != null)
                    {
                        exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = photoFingerData.IsActive,
                            IsDeleted = photoFingerData.IsDeleted,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            PathFileISO = photoFingerData.PathFileISO,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUID = photoFingerData.CreatedByUID,
                            CreatedTime = photoFingerData.CreatedTime,
                            UpdatedById = photoFingerData.UpdatedById,
                            UpdatedByNpp = photoFingerData.UpdatedByNpp,
                            UpdatedByUID = photoFingerData.UpdatedByUID,
                            UpdatedByUnit = photoFingerData.UpdatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            FileJariISO = photoFingerData.FileJariISO,
                            UpdatedTime = photoFingerData.UpdatedTime,
                            FileName = photoFingerData.FileName,
                            FileNameISO = photoFingerData.FileNameISO,
                            TypeFinger = photoFingerData.TypeFinger

                        });

                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUID,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            FileName = photoFingerData.FileName,
                            FileNameISO = photoFingerData.FileNameISO,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            TypeFinger = photoFingerData.TypeFinger
                        });
                    }
                    if (isEmployee)
                    {
                        var photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployeeTemp(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                        if (photoFingerDataEmployee != null)
                        {
                            exPhotoFingerEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = photoFingerDataEmployee.IsActive,
                                IsDeleted = photoFingerDataEmployee.IsDeleted,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                PathFileISO = photoFingerDataEmployee.PathFileISO,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUID = photoFingerDataEmployee.CreatedByUID,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = photoFingerDataEmployee.UpdatedById,
                                UpdatedByNpp = photoFingerDataEmployee.UpdatedByNpp,
                                UpdatedByUID = photoFingerDataEmployee.UpdatedByUID,
                                UpdatedByUnit = photoFingerDataEmployee.UpdatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                FileJariISO = photoFingerDataEmployee.FileJariISO,
                                UpdatedTime = photoFingerDataEmployee.UpdatedTime,
                                FileName = photoFingerDataEmployee.FileName,
                                FileNameISO = photoFingerDataEmployee.FileNameISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger

                            });

                            photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUID,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                //FileJari = photoFingerDataEmployee.FileJari,
                                FileName = photoFingerDataEmployee.FileName,
                                FileNameISO = photoFingerDataEmployee.FileNameISO,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                PathFileISO = photoFingerDataEmployee.PathFileISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger
                            });
                        }
                    }
                    #endregion

                    stringPerubahan = stringPerubahan + "Request Payload Finger Kanan Tidak Ditemukan" + " <br/>";
                }
                #endregion

                var inboxTemp = new Tbl_Inbox_Enrollment_Temp()
                {
                    CreatedById = Id,
                    CreatedByNpp = npp,
                    CreatedByUnitCode = unitCode,
                    CreatedByUnitId = unitId,
                    CreatedTime = DateTime.Now,
                    ApprovedStatus = 2,
                    Status = 2,
                    NoPengajuan = PengajuanID,
                    ApprovedByEmployeeId = dataPenyelia.PegawaiId,
                    ApprovedByEmployeeId2 = enroll.ApprovedByEmployeeId2

                };

                var inboxTempDetail = new Tbl_Inbox_Enrollment_Temp_Detail()
                {
                    Notes = enroll.Notes,
                    SubmitById = Id,
                    SubmitByNpp = npp,
                    SubmitedByUnitCode = unitCode,
                    SubmitedByUnitId = unitId,
                    CreatedTime = DateTime.Now,
                    ApprovedStatus = 1,
                    Status = 1,
                    NoPengajuan = PengajuanID
                };

                var inboxTempDetailPenyelia = new Tbl_Inbox_Enrollment_Temp_Detail()
                {
                    Notes = _SuccessMessageConfig.OtorisasiPenyelia,
                    SubmitById = int.Parse(dataPenyelia.Pegawai_Id),
                    SubmitByNpp = dataPenyelia.NIK,
                    SubmitedByUnitCode = unitCode,
                    SubmitedByUnitId = unitId,
                    CreatedTime = enroll.otorisasiPenyelia,
                    ApprovedStatus = 2,
                    Status = 2,
                    NoPengajuan = PengajuanID
                };

                var mappingNIk = new EnrollmentFRLog()
                {
                    NIK = dataDemografis.NIK,
                    CreatedById = Id,
                    CreatedByNpp = npp,
                    CreatedByUnitId = unitId,
                    CreatedTime = DateTime.Now,
                    MatchScore = enroll.MatchScore
                };
                var (status, msg) = await _enrollmentKTPRepository.InsertEnrollFlowNoMatchingv2(mappingNIk, dataDemografis, logDemografi, photoKtp, photoKtpLog, photoSignature, photoSignatureLog,
                    photoCam, photoCamLog, photoFingers, photoFingerLogs, exPhotoKtp, exphotoSignatureData, exphotoCamData, exPhotoFinger, dataNpp, dataReaderLog, photoFingersEmployee, exPhotoFingerEmployee, inboxTemp, inboxTempDetail, inboxTempDetailPenyelia);

                #region Logging Reader Activity
                _ = _alatReaderRepository.CreateLogActivity2(dataReaderActivityLog);
                _ = _alatReaderRepository.CreateAlatReaderLog(dataReaderLog);
                #endregion

                if (status)
                {
                    return (_SuccessMessageConfig.NasabahSuksesUpdate, (int)ServiceResponseStatus.SUKSES, cekKTP.CIF);
                }
                else
                {
                    return (_ErrorMessageConfig.DemografiGagalEnroll, (int)ServiceResponseStatus.ERROR, msg + " " + stringPerubahan);
                }

            }
            #endregion
        }

        #endregion

        #region Enroll IKD
        public async Task<(string msg, int code, string cif)> SubmitEnrollmentFingerEncryptedOnlyIKD(bool isHitSOA, ApiSOA ReqSoa, EnrollKTPNoMatching enroll, int Id, string npp,
            string unitCode, int unitId, int roleId)
        {
            var PengajuanID = Guid.NewGuid().ToString();
            bool isEmployee = false;
            var _empData = await _enrollmentKTPRepository.IsEmployee(enroll.KtpNIK);
            if (_empData != null)
            {
                isEmployee = true;
            }

            if (enroll.KtpTanggalLahir != null)
            {
                enroll.KtpTanggalLahir = enroll.KtpTanggalLahir.Replace(".", "");
                if (enroll.KtpTanggalLahir.Contains("/"))
                {
                    enroll.KtpTanggalLahir = enroll.KtpTanggalLahir.Replace("/", "-");
                }
                string[] arrayTanggl = enroll.KtpTanggalLahir.Split("-");
                string hari = "";
                string bulan = "";
                string tahun = "";

                if (arrayTanggl != null)
                {
                    if (arrayTanggl[0] != null)
                    {
                        if (arrayTanggl[0].Length != 2)
                        {
                            hari = "0" + arrayTanggl[0];

                        }
                        else
                        {
                            hari = arrayTanggl[0];

                        }
                    }

                    if (arrayTanggl[1] != null)
                    {
                        if (arrayTanggl[1].Length != 2)
                        {
                            bulan = "0" + arrayTanggl[1];

                        }
                        else
                        {
                            bulan = arrayTanggl[1];

                        }
                    }

                    if (arrayTanggl[2] != null)
                    {
                        tahun = arrayTanggl[2];
                    }
                }

                enroll.KtpTanggalLahir = hari + "-" + bulan + "-" + tahun;
            }

            const bool IsNewEnroll = true;
            string JamServer = DateTime.Now.ToString("ddMMyyyyHHmmss");
            bool IsNasabah = false;

            var cekKTP = await _profileRepository.GetDataDemografis(enroll.KtpNIK)
                .ConfigureAwait(false);

            if (cekKTP != null)
            {
                //var logDemografi = new Tbl_DataKTP_Demografis_Log
                //{
                //    Agama = cekKTP.Agama,
                //    Alamat = cekKTP.Alamat,
                //    AlamatGoogle = cekKTP.AlamatGoogle,
                //    AlamatLengkap = cekKTP.AlamatLengkap,
                //    CreatedById = cekKTP.CreatedById,
                //    CreatedByUID = cekKTP.CreatedByUID,
                //    CreatedByUnitId = cekKTP.CreatedByUnitId,
                //    CreatedTime = cekKTP.CreatedTime,
                //    Desa = cekKTP.Desa,
                //    GolonganDarah = cekKTP.GolonganDarah,
                //    JenisKelamin = cekKTP.JenisKelamin,
                //    Kecamatan = cekKTP.Kecamatan,
                //    Kelurahan = cekKTP.Kelurahan,
                //    Kewarganegaraan = cekKTP.Kewarganegaraan,
                //    KodePos = cekKTP.KodePos,
                //    Kota = cekKTP.Kota,
                //    Latitude = cekKTP.Latitude,
                //    Longitude = cekKTP.Longitude,
                //    MasaBerlaku = cekKTP.MasaBerlaku,
                //    Nama = cekKTP.Nama,
                //    NIK = cekKTP.NIK,
                //    Pekerjaan = cekKTP.Pekerjaan,
                //    Provinsi = cekKTP.Provinsi,
                //    RT = cekKTP.RT,
                //    RW = cekKTP.RW,
                //    StatusPerkawinan = cekKTP.StatusPerkawinan,
                //    TanggalLahir = cekKTP.TanggalLahir,
                //    TempatLahir = cekKTP.TempatLahir,
                //    CIF = cekKTP.CIF,
                //    CreatedByNpp = cekKTP.CreatedByNpp
                //};

                //var stringPerubahan = "";

                //if (cekKTP.Nama != enroll.KtpNama)
                //{
                //    stringPerubahan = stringPerubahan + "NAMA : " + cekKTP.Nama + " -> " + enroll.KtpNama + " <br/>";
                //    cekKTP.Nama = enroll.KtpNama;
                //}

                //if (cekKTP.TempatLahir != enroll.KtpTempatLahir)
                //{
                //    stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTP.TempatLahir + " -> " + enroll.KtpTempatLahir + " <br/>";
                //    cekKTP.TempatLahir = enroll.KtpTempatLahir;
                //}

                //if (enroll.KtpTanggalLahir != null)
                //{

                //    if (cekKTP.TempatLahir != enroll.KtpTempatLahir)
                //    {
                //        stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTP.TanggalLahir + " -> " + enroll.KtpTanggalLahir + " <br/>";
                //        cekKTP.TanggalLahir = DateTime.ParseExact(enroll.KtpTanggalLahir, "dd-MM-yyyy", CultureInfo.InvariantCulture);
                //    }

                //}

                //if (cekKTP.JenisKelamin != enroll.KtpJanisKelamin)
                //{
                //    stringPerubahan = stringPerubahan + "JENIS KELAMIN : " + cekKTP.JenisKelamin + " -> " + enroll.KtpJanisKelamin + " <br/>";
                //    cekKTP.JenisKelamin = enroll.KtpJanisKelamin;
                //}

                //if (cekKTP.GolonganDarah != enroll.KtpGolonganDarah)
                //{
                //    stringPerubahan = stringPerubahan + "GOLONGAN DARAH : " + cekKTP.GolonganDarah + " -> " + enroll.KtpGolonganDarah + " <br/>";
                //    cekKTP.GolonganDarah = enroll.KtpGolonganDarah;
                //}

                //if (cekKTP.Alamat != enroll.KtpAlamat)
                //{
                //    stringPerubahan = stringPerubahan + "ALAMAT : " + cekKTP.Alamat + " -> " + enroll.KtpAlamat + " <br/>";
                //    cekKTP.Alamat = enroll.KtpAlamat;
                //}

                //if (cekKTP.RT != enroll.KtpRT)
                //{
                //    stringPerubahan = stringPerubahan + "RT : " + cekKTP.RT + " -> " + enroll.KtpRT + " <br/>";
                //    cekKTP.RT = enroll.KtpRT;
                //}

                //if (cekKTP.RW != enroll.KtpRW)
                //{
                //    stringPerubahan = stringPerubahan + "RW : " + cekKTP.RW + " -> " + enroll.KtpRW + " <br/>";
                //    cekKTP.RW = enroll.KtpRW;
                //}

                //if (cekKTP.Kelurahan != enroll.KtpKelurahan)
                //{
                //    stringPerubahan = stringPerubahan + "KELURAHAN : " + cekKTP.Kelurahan + " -> " + enroll.KtpKelurahan + " <br/>";
                //    cekKTP.Kelurahan = enroll.KtpKelurahan;
                //}

                //if (cekKTP.Kecamatan != enroll.KtpKecamatan)
                //{
                //    stringPerubahan = stringPerubahan + "KECAMATAN : " + cekKTP.Kecamatan + " -> " + enroll.KtpKecamatan + " <br/>";
                //    cekKTP.Kecamatan = enroll.KtpKecamatan;
                //}

                //if (cekKTP.Kota != enroll.KtpKota)
                //{
                //    stringPerubahan = stringPerubahan + "KOTA/KABUPATEN : " + cekKTP.Kota + " -> " + enroll.KtpKota + " <br/>";
                //    cekKTP.Kota = enroll.KtpKota;
                //}

                //if (cekKTP.Provinsi != enroll.KtpProvinsi)
                //{
                //    stringPerubahan = stringPerubahan + "PROVINSI  : " + cekKTP.Provinsi + " -> " + enroll.KtpProvinsi + " <br/>";
                //    cekKTP.Provinsi = enroll.KtpProvinsi;
                //}

                //if (cekKTP.Agama != enroll.KtpAgama)
                //{
                //    stringPerubahan = stringPerubahan + "AGAMA  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                //    cekKTP.Agama = enroll.KtpAgama;
                //}

                //if (cekKTP.StatusPerkawinan != enroll.KtpStatusPerkawinan)
                //{
                //    stringPerubahan = stringPerubahan + "STATUS PERKAWINAN  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                //    cekKTP.StatusPerkawinan = enroll.KtpStatusPerkawinan;
                //}

                //if (cekKTP.Pekerjaan != enroll.KtpPekerjaan)
                //{
                //    stringPerubahan = stringPerubahan + "PEKERJAAN  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                //    cekKTP.Pekerjaan = enroll.KtpPekerjaan;
                //}

                //if (cekKTP.Kewarganegaraan != enroll.KtpKewarganegaraan)
                //{
                //    stringPerubahan = stringPerubahan + "KEWARGANEGARAAN  : " + cekKTP.Kewarganegaraan + " -> " + enroll.KtpKewarganegaraan + " <br/>";
                //    cekKTP.Kewarganegaraan = enroll.KtpKewarganegaraan;
                //}
                //if (cekKTP.MasaBerlaku != enroll.KtpMasaBerlaku)
                //{
                //    stringPerubahan = stringPerubahan + "MASA BERLAKU  : " + cekKTP.MasaBerlaku + " -> " + enroll.KtpMasaBerlaku + " <br/>";
                //    cekKTP.MasaBerlaku = enroll.KtpMasaBerlaku;
                //}

                //cekKTP.UpdatedTime = DateTime.Now;
                //cekKTP.UpdatedById = Id;
                //cekKTP.UpdatedByUID = enroll.UID;
                //cekKTP.UpdatedByUnitCode = unitCode;
                //cekKTP.UpdatedByUnitId = unitId;

                //await _profileRepository.UpdateDataDemografis(cekKTP)
                //    .ConfigureAwait(false);

                //if (string.IsNullOrWhiteSpace(stringPerubahan))
                //{
                //    return (_ErrorMessageConfig.NasabahPernahEnroll, (int)EnrollStatus.Sudah_di_enroll_sebelumnya, "");
                //}

                //_profileRepository.InsertDemografiLog(logDemografi);

                //return (stringPerubahan, (int)EnrollStatus.Berhasil_mengubah_beberapa_perubahan, "");
            }

            if (IsNewEnroll)
            {
                if (enroll?.KtpNIK == null) return (_ErrorMessageConfig.InputTidakLengkap, (int)EnrollStatus.Inputan_tidak_lengkap, "");

                var cifData = new ApiSOAResponse();
                #region Hit SOA And Loggging it
                if (isHitSOA == true)
                {
                    cifData = await _cifService.GetSOAByCif(ReqSoa)
                    .ConfigureAwait(false);

                    var status = 0;
                    if (cifData.cif != null)
                    {
                        status = 1;
                    }

                    var _log = new Tbl_ThirdPartyLog
                    {
                        FeatureName = "SubmitEnrollmentFingerEncryptedOnlyNoMatching",
                        HostUrl = ReqSoa.host,
                        Request = Newtonsoft.Json.JsonConvert.SerializeObject(ReqSoa),
                        Status = status,
                        Response = Newtonsoft.Json.JsonConvert.SerializeObject(cifData),
                        CreatedDate = System.DateTime.Now,
                        CreatedBy = npp
                    };

                    _ = _enrollmentKTPRepository.CreateThirdPartyLog(_log);
                }
                else
                {
                    try
                    {
                        var res = await _cifService.GetCIF(new NikDto { Nik = enroll.KtpNIK },
                        new NikDtoUrl { baseUrl = ReqSoa.baseUrlNonSoa, endpoint = ReqSoa.UrlEndPointNonSoa });
                        if (res.Data == null)
                        {
                            cifData.cif = null;
                        }
                        else
                        {
                            cifData.cif = res.Data.Cif;
                        };
                    }
                    catch (Exception ex)
                    {
                        cifData.cif = null;
                    }

                }
                #endregion

                if (!String.IsNullOrEmpty(cifData.cif))
                {
                    IsNasabah = true;
                    cifData.cif = cifData.cif.Trim();
                }

                var sysPathFolder = await _sysParameterRepository.GetPathFolder("PathFolderData");
                string pathFolder = sysPathFolder.Value;

                var dataDemografis = new Tbl_DataKTP_Demografis_Temp();

                var dataDemografisLog = new Tbl_DataKTP_Demografis_Log();

                var dataNpp = new Tbl_Mapping_Pegawai_KTP();

                if (cekKTP != null)
                {
                    //dataDemografisLog = new Tbl_DataKTP_Demografis_Log
                    //{
                    //    Agama = cekKTP.Agama,
                    //    Alamat = cekKTP.Alamat,
                    //    AlamatGoogle = cekKTP.AlamatGoogle,
                    //    AlamatLengkap = cekKTP.AlamatLengkap,
                    //    CreatedById = cekKTP.CreatedById,
                    //    CreatedByUID = cekKTP.CreatedByUID,
                    //    CreatedByUnitId = cekKTP.CreatedByUnitId,
                    //    CreatedTime = cekKTP.CreatedTime,
                    //    Desa = cekKTP.Desa,
                    //    GolonganDarah = cekKTP.GolonganDarah,
                    //    JenisKelamin = cekKTP.JenisKelamin,
                    //    Kecamatan = cekKTP.Kecamatan,
                    //    Kelurahan = cekKTP.Kelurahan,
                    //    Kewarganegaraan = cekKTP.Kewarganegaraan,
                    //    KodePos = cekKTP.KodePos,
                    //    Kota = cekKTP.Kota,
                    //    Latitude = cekKTP.Latitude,
                    //    Longitude = cekKTP.Longitude,
                    //    MasaBerlaku = cekKTP.MasaBerlaku,
                    //    Nama = cekKTP.Nama,
                    //    NIK = cekKTP.NIK,
                    //    Pekerjaan = cekKTP.Pekerjaan,
                    //    Provinsi = cekKTP.Provinsi,
                    //    RT = cekKTP.RT,
                    //    RW = cekKTP.RW,
                    //    StatusPerkawinan = cekKTP.StatusPerkawinan,
                    //    TanggalLahir = cekKTP.TanggalLahir,
                    //    TempatLahir = cekKTP.TempatLahir
                    //};

                    cekKTP.Agama = enroll.KtpAgama;
                    cekKTP.Alamat = enroll.KtpAlamat;
                    cekKTP.AlamatGoogle = enroll.KtpAlamatConvertLatlong;
                    cekKTP.AlamatLengkap = enroll.KtpAlamatConvertLengkap;
                    if (string.IsNullOrWhiteSpace(cifData.cif))
                    {
                        cekKTP.CIF = cifData.cif;
                    }
                    cekKTP.GolonganDarah = enroll.KtpGolonganDarah;
                    cekKTP.JenisKelamin = enroll.KtpJanisKelamin;
                    cekKTP.Kecamatan = enroll.KtpKecamatan;
                    cekKTP.Kelurahan = enroll.KtpKelurahan;
                    cekKTP.Kewarganegaraan = enroll.KtpKewarganegaraan;
                    cekKTP.KodePos = enroll.KtpKodePos;
                    cekKTP.Kota = enroll.KtpKota;
                    cekKTP.Latitude = enroll.KtpLatitude;
                    cekKTP.Longitude = enroll.KtpLongitude;
                    cekKTP.MasaBerlaku = enroll.KtpMasaBerlaku;
                    cekKTP.Nama = enroll.KtpNama;
                    cekKTP.NIK = enroll.KtpNIK;
                    cekKTP.Pekerjaan = enroll.KtpPekerjaan;
                    cekKTP.Provinsi = enroll.KtpProvinsi;
                    cekKTP.RT = enroll.KtpRT;
                    cekKTP.RW = enroll.KtpRW;
                    cekKTP.StatusPerkawinan = enroll.KtpStatusPerkawinan;
                    cekKTP.TanggalLahir = string.IsNullOrWhiteSpace(enroll.KtpTanggalLahir) ? null : DateTime.ParseExact(enroll.KtpTanggalLahir, "dd-MM-yyyy", CultureInfo.InvariantCulture);
                    cekKTP.TempatLahir = enroll.KtpTempatLahir;
                    cekKTP.UpdatedById = Id;
                    cekKTP.UpdatedByNpp = npp;
                    cekKTP.UpdatedByUID = enroll.UID;
                    cekKTP.UpdatedTime = DateTime.Now;
                    cekKTP.UpdatedByUnitCode = unitCode;
                    cekKTP.UpdatedByUnitId = unitId;
                }
                else
                {
                    dataDemografis = new Tbl_DataKTP_Demografis_Temp
                    {
                        Agama = enroll.KtpAgama,
                        Alamat = enroll.KtpAlamat,
                        AlamatGoogle = enroll.KtpAlamatConvertLatlong,
                        AlamatLengkap = enroll.KtpAlamatConvertLengkap,
                        CIF = (cifData.cif),
                        NIK = enroll.KtpNIK,
                        CreatedById = Id,
                        IsActive = true,
                        IsDeleted = false,
                        JenisKelamin = enroll.KtpJanisKelamin,
                        Kecamatan = enroll.KtpKecamatan,
                        Kelurahan = enroll.KtpKelurahan,
                        CreatedByUID = enroll.UID,
                        CreatedTime = DateTime.Now,
                        GolonganDarah = enroll.KtpGolonganDarah,
                        Kewarganegaraan = enroll.KtpKewarganegaraan,
                        KodePos = enroll.KtpKodePos,
                        Kota = enroll.KtpKota,
                        Latitude = enroll.KtpLatitude,
                        Longitude = enroll.KtpLongitude,
                        MasaBerlaku = enroll.KtpMasaBerlaku,
                        Nama = enroll.KtpNama,
                        Pekerjaan = enroll.KtpPekerjaan,
                        Provinsi = enroll.KtpProvinsi,
                        RT = enroll.KtpRT,
                        RW = enroll.KtpRW,
                        StatusPerkawinan = enroll.KtpStatusPerkawinan,
                        TanggalLahir = string.IsNullOrWhiteSpace(enroll.KtpTanggalLahir) ? null : DateTime.ParseExact(enroll.KtpTanggalLahir, "dd-MM-yyyy", CultureInfo.InvariantCulture),
                        TempatLahir = enroll.KtpTempatLahir,
                        CreatedByNpp = npp,
                        CreatedByUnitCode = unitCode,
                        CreatedByUnitId = unitId,
                        IsVerified = false,
                        IsNasabahTemp = string.IsNullOrWhiteSpace(cifData.cif),
                        IsApprove = false,
                        NoPengajuan = PengajuanID
                    };

                    if (isEmployee)
                    {
                        dataNpp = new Tbl_Mapping_Pegawai_KTP
                        {
                            CreatedById = Id,
                            NIK = enroll.KtpNIK,
                            Npp = _empData.Npp,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now
                        };
                    }
                }

                var exPhotoKtp = new Tbl_DataKTP_Photo_Temp();

                var photoKtpLog = new Tbl_DataKTP_Photo_Log();

                var photoKtp = new Tbl_DataKTP_Photo_Temp();

                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoKTP))
                {
                    var photoKTPData = await _profileRepository.GetPhotoKtp(enroll.KtpNIK)
                        .ConfigureAwait(false);

                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpPhotoKTP);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderPhoto")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderFoto = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "Foto_" + enroll.KtpNIK + "_" + JamServer + ".jpg";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderFoto, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {

                        if (!Directory.Exists(subPathFolderFoto))
                        {
                            Directory.CreateDirectory(subPathFolderFoto);
                        }

                        filePath = subPathFolderFoto + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoKTPData != null)
                    {
                        //photoKtpLog.CreatedById = photoKTPData.CreatedById;
                        //photoKtpLog.CreatedByNpp = photoKTPData.CreatedByNpp;
                        //photoKtpLog.CreatedByUid = photoKTPData.CreatedByUid;
                        //photoKtpLog.CreatedByUnit = photoKTPData.CreatedByUnit;
                        //photoKtpLog.CreatedTime = photoKTPData.CreatedTime;
                        //photoKtpLog.FileName = photoKTPData.FileName;
                        //photoKtpLog.Nik = photoKTPData.Nik;
                        //photoKtpLog.PathFile = photoKTPData.PathFile;

                        exPhotoKtp = new Tbl_DataKTP_Photo_Temp
                        {
                            PathFile = photoKTPData.PathFile,
                            Nik = photoKTPData.Nik,
                            FileName = photoKTPData.FileName,
                            IsActive = photoKTPData.IsActive,
                            IsDeleted = photoKTPData.IsDeleted,
                            CreatedById = photoKTPData.CreatedById,
                            CreatedByNpp = photoKTPData.CreatedByNpp,
                            CreatedByUID = photoKTPData.CreatedByUid,
                            CreatedTime = photoKTPData.CreatedTime,
                            CreatedByUnit = photoKTPData.CreatedByUnit,
                            UpdatedById = photoKTPData.UpdatedById,
                            UpdatedByNpp = photoKTPData.UpdatedByNpp,
                            UpdatedByUID = photoKTPData.UpdatedByUid,
                            UpdatedByUnit = photoKTPData.UpdatedByUnit,
                            UpdatedTime = photoKTPData.UpdatedTime,
                            Id = photoKTPData.Id,
                            NoPengajuan = PengajuanID
                        };
                    }

                    photoKtp = new Tbl_DataKTP_Photo_Temp
                    {
                        PathFile = filePath,
                        Nik = enroll.KtpNIK,
                        FileName = fileName,
                        IsActive = true,
                        IsDeleted = false,
                        CreatedById = Id,
                        CreatedByNpp = npp,
                        CreatedByUID = enroll.UID,
                        CreatedTime = DateTime.Now,
                        IsApprove = false,
                        NoPengajuan = PengajuanID
                    };
                }

                var exPhotoSignature = new Tbl_DataKTP_Signature_Temp();

                var photoSignatureLog = new Tbl_DataKTP_Signature_Log();

                var photoSignature = new Tbl_DataKTP_Signature_Temp();

                if (!string.IsNullOrWhiteSpace(enroll.KtpSignature))
                {
                    var photoSignatureData = await _profileRepository.GetPhotoSignature(enroll.KtpNIK)
                        .ConfigureAwait(false);

                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpSignature);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderSignature")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderSignature = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";
                    //string subPathFolderSignature = pathFolder + pathFolderFoto + enroll.KtpNIK;

                    string fileName = "Signature_" + enroll.KtpNIK + "_" + JamServer + ".jpg";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderSignature, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderSignature))
                        {
                            Directory.CreateDirectory(subPathFolderSignature);
                        }

                        filePath = subPathFolderSignature + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoSignatureData != null)
                    {
                        //photoSignatureLog.CreatedById = photoSignatureData.CreatedById;
                        //photoSignatureLog.CreatedByNpp = photoSignatureData.CreatedByNpp;
                        //photoSignatureLog.CreatedByUid = photoSignatureData.CreatedByUid;
                        //photoSignatureLog.CreatedByUnit = photoSignatureData.CreatedByUnit;
                        //photoSignatureLog.CreatedTime = photoSignatureData.CreatedTime;
                        //photoSignatureLog.FileName = photoSignatureData.FileName;
                        //photoSignatureLog.Nik = photoSignatureData.Nik;
                        //photoSignatureLog.PathFile = photoSignatureData.PathFile;

                        exPhotoSignature = new Tbl_DataKTP_Signature_Temp
                        {
                            CreatedById = photoSignatureData.CreatedById,
                            CreatedByNpp = photoSignatureData.CreatedByNpp,
                            IsActive = photoSignatureData.IsActive,
                            IsDeleted = photoSignatureData.IsDeleted,
                            Nik = photoSignatureData.Nik,
                            FileName = photoSignatureData.FileName,
                            CreatedByUID = photoSignatureData.CreatedByUid,
                            CreatedTime = photoSignatureData.CreatedTime,
                            PathFile = photoSignatureData.PathFile,
                            CreatedByUnit = photoSignatureData.CreatedByUnit,
                            UpdatedById = photoSignatureData.UpdatedById,
                            UpdatedByNpp = photoSignatureData.UpdatedByNpp,
                            UpdatedByUID = photoSignatureData.UpdatedByUid,
                            UpdatedByUnit = photoSignatureData.UpdatedByUnit,
                            UpdatedTime = photoSignatureData.UpdatedTime,
                            Id = photoSignatureData.Id,
                            NoPengajuan = PengajuanID
                        };
                    }

                    photoSignature = new Tbl_DataKTP_Signature_Temp
                    {
                        CreatedById = Id,
                        CreatedByNpp = npp,
                        IsActive = true,
                        IsDeleted = false,
                        Nik = enroll.KtpNIK,
                        FileName = fileName,
                        CreatedByUID = enroll.UID,
                        CreatedTime = DateTime.Now,
                        PathFile = filePath,
                        NoPengajuan = PengajuanID
                    };
                }

                var exPhotoCam = new Tbl_DataKTP_PhotoCam_Temp();

                var photoCamLog = new Tbl_DataKTP_PhotoCam_Log();

                var photoCam = new Tbl_DataKTP_PhotoCam_Temp();

                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoCam))
                {
                    var photoCamData = await _profileRepository.GetPhotoCam(enroll.KtpNIK)
                        .ConfigureAwait(false);

                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpPhotoCam);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderWebcam")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string SubPathFolderPhotoCam = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";
                    //string SubPathFolderPhotoCam = pathFolder + pathFolderFoto + enroll.KtpNIK;

                    string fileName = "PhotoCam_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(SubPathFolderPhotoCam, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(SubPathFolderPhotoCam))
                        {
                            Directory.CreateDirectory(SubPathFolderPhotoCam);
                        }

                        filePath = SubPathFolderPhotoCam + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoCamData != null)
                    {
                        //photoCamLog.CreatedById = photoCamData.CreatedById;
                        //photoCamLog.CreatedByNpp = photoCamData.CreatedByNpp;
                        //photoCamLog.CreatedByUid = photoCamData.CreatedByUid;
                        //photoCamLog.CreatedByUnit = photoCamData.CreatedByUnit;
                        //photoCamLog.CreatedTime = photoCamData.CreatedTime;
                        //photoCamLog.FileName = photoCamData.FileName;
                        //photoCamLog.Nik = photoCamData.Nik;
                        //photoCamLog.PathFile = photoCamData.PathFile;

                        exPhotoCam = new Tbl_DataKTP_PhotoCam_Temp
                        {
                            Id = photoCamData.Id,
                            PathFile = photoCamData.PathFile,//
                            Nik = photoCamData.Nik,
                            FileName = photoCamData.FileName,//
                            CreatedTime = photoCamData.CreatedTime,
                            CreatedById = photoCamData.CreatedById,
                            IsActive = photoCamData.IsActive,
                            IsDeleted = photoCamData.IsDeleted,
                            CreatedByNpp = photoCamData.CreatedByNpp,
                            CreatedByUID = photoCamData.CreatedByUid,
                            CreatedByUnit = photoCamData.CreatedByUnit,
                            UpdatedById = photoCamData.UpdatedById,
                            UpdatedByNpp = photoCamData.UpdatedByNpp,
                            UpdatedByUID = photoCamData.UpdatedByUid,
                            UpdatedByUnit = photoCamData.UpdatedByUnit,
                            UpdatedTime = photoCamData.UpdatedTime,
                            NoPengajuan = PengajuanID
                        };
                    }

                    photoCam = new Tbl_DataKTP_PhotoCam_Temp
                    {
                        PathFile = filePath,//
                        Nik = enroll.KtpNIK,
                        FileName = fileName,//
                        CreatedTime = DateTime.Now,
                        CreatedById = Id,
                        IsActive = true,
                        IsDeleted = false,
                        CreatedByNpp = npp,
                        CreatedByUID = enroll.UID,
                        IsApprove = false,
                        NoPengajuan = PengajuanID
                    };
                }

                var exPhotoFinger = new List<Tbl_DataKTP_Finger_Temp>();

                var exPhotoFingerEmployee = new List<Tbl_DataKTP_Finger_Employee_Temp>();

                var photoFingerLogs = new List<Tbl_DataKTP_Finger_Log>();

                var photoFingers = new List<Tbl_DataKTP_Finger_Temp>();

                var photoFingersEmployee = new List<Tbl_DataKTP_Finger_Employee_Temp>();

                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKanan))
                {

                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);

                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                    }

                    string imageEncrypted = enroll.KtpFingerKanan.Encrypt(Phrase.FileEncryption);

                    string filePath = "";
                    string filePathIso = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKanan.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";
                    string fileNameIso = "";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    string isoEncrypted = "";
                    if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKananIso))
                    {
                        isoEncrypted = enroll.KtpFingerKananIso.Encrypt(Phrase.FileEncryption);
                        fileNameIso = "PhotoFingerISO_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                        if (_sftpConfig.IsActive)
                        {
                            using var stream = new MemoryStream(Encoding.ASCII.GetBytes(isoEncrypted));

                            (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileNameIso, _sftpConfig.Host,
                                _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                            filePathIso = fPath;
                        }
                        else
                        {
                            if (!Directory.Exists(subPathFolderPhotoFinger))
                            {
                                Directory.CreateDirectory(subPathFolderPhotoFinger);
                            }

                            filePathIso = subPathFolderPhotoFinger + fileNameIso;
                            File.WriteAllText(filePathIso, isoEncrypted);
                        }
                    }

                    if (photoFingerData != null)
                    {
                        //photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        //{
                        //    CreatedById = photoFingerData.CreatedById,
                        //    CreatedByNpp = photoFingerData.CreatedByNpp,
                        //    CreatedByUid = photoFingerData.CreatedByUid,
                        //    CreatedByUnit = photoFingerData.CreatedByUnit,
                        //    CreatedByUnitId = photoFingerData.CreatedByUnitId,
                        //    CreatedTime = photoFingerData.CreatedTime,
                        //    //FileJari = photoFingerData.FileJari,
                        //    FileJariISO = photoFingerData.FileJariISO,
                        //    FileName = photoFingerData.FileName,
                        //    FileNameISO = photoFingerData.FileNameISO,
                        //    Nik = photoFingerData.Nik,
                        //    PathFile = photoFingerData.PathFile,
                        //    PathFileISO = photoFingerData.PathFileISO,
                        //    TypeFinger = photoFingerData.TypeFinger
                        //});

                        exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            Id = photoFingerData.Id,
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = photoFingerData.IsActive,
                            IsDeleted = photoFingerData.IsDeleted,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,//
                            PathFileISO = photoFingerData.PathFileISO,//
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUID = photoFingerData.CreatedByUid,
                            CreatedTime = DateTime.Now,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            FileName = photoFingerData.FileName,//
                            FileNameISO = photoFingerData.FileNameISO,//
                            FileJariISO = photoFingerData.FileJariISO,
                            TypeFinger = photoFingerData.TypeFinger,
                            UpdatedById = photoFingerData.UpdatedById,
                            UpdatedByNpp = photoFingerData.UpdatedByNpp,
                            UpdatedByUID = photoFingerData.UpdatedByUid,
                            UpdatedByUnit = photoFingerData.UpdatedByUnit,
                            UpdatedTime = photoFingerData.UpdatedTime,
                            NoPengajuan = PengajuanID
                        });
                    }

                    photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                    {
                        CreatedById = Id,
                        IsActive = true,
                        IsDeleted = false,
                        Nik = enroll.KtpNIK,
                        PathFile = filePath,//
                        PathFileISO = filePathIso,//
                        CreatedByNpp = npp,
                        CreatedByUID = enroll.UID,
                        CreatedTime = DateTime.Now,
                        FileName = fileName,//
                        FileNameISO = fileNameIso,//
                        FileJariISO = isoEncrypted,
                        TypeFinger = enroll.KtpTypeJariKanan,
                        IsApprove = false,
                        NoPengajuan = PengajuanID
                    });

                    if (isEmployee)
                    {
                        photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,//
                            PathFileISO = filePathIso,//
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            FileName = fileName,//
                            FileNameISO = fileNameIso,//
                            FileJariISO = isoEncrypted,
                            TypeFinger = enroll.KtpTypeJariKanan,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        });
                    }
                }

                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKiri))
                {
                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);

                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                    }

                    string imageEncrypted = enroll.KtpFingerKiri.Encrypt(Phrase.FileEncryption);

                    string filePath = "";
                    string filePathIso = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKiri.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";
                    string fileNameIso = "";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }
                    string isoEncrypted = "";

                    if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKiriIso))
                    {
                        isoEncrypted = enroll.KtpFingerKiriIso.Encrypt(Phrase.FileEncryption);
                        fileNameIso = "PhotoFingerISO_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                        if (_sftpConfig.IsActive)
                        {
                            using var stream = new MemoryStream(Encoding.ASCII.GetBytes(isoEncrypted));

                            (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileNameIso, _sftpConfig.Host,
                                _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                            filePathIso = fPath;
                        }
                        else
                        {
                            if (!Directory.Exists(subPathFolderPhotoFinger))
                            {
                                Directory.CreateDirectory(subPathFolderPhotoFinger);
                            }

                            filePathIso = subPathFolderPhotoFinger + fileNameIso;
                            File.WriteAllText(filePathIso, isoEncrypted);
                        }
                    }

                    if (photoFingerData != null)
                    {
                        //photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        //{
                        //    CreatedById = photoFingerData.CreatedById,
                        //    CreatedByNpp = photoFingerData.CreatedByNpp,
                        //    CreatedByUid = photoFingerData.CreatedByUid,
                        //    CreatedByUnit = photoFingerData.CreatedByUnit,
                        //    CreatedByUnitId = photoFingerData.CreatedByUnitId,
                        //    CreatedTime = photoFingerData.CreatedTime,
                        //    //FileJari = photoFingerData.FileJari,
                        //    FileJariISO = photoFingerData.FileJariISO,
                        //    FileName = photoFingerData.FileName,
                        //    FileNameISO = photoFingerData.FileNameISO,
                        //    Nik = photoFingerData.Nik,
                        //    PathFile = photoFingerData.PathFile,
                        //    PathFileISO = photoFingerData.PathFileISO,
                        //    TypeFinger = photoFingerData.TypeFinger
                        //});

                        exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            Id = photoFingerData.Id,
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = photoFingerData.IsActive,
                            IsDeleted = photoFingerData.IsDeleted,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,//
                            PathFileISO = photoFingerData.PathFileISO,//
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUID = photoFingerData.CreatedByUid,
                            CreatedTime = DateTime.Now,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            FileName = photoFingerData.FileName,//
                            FileNameISO = photoFingerData.FileNameISO,//
                            FileJariISO = photoFingerData.FileJariISO,
                            TypeFinger = photoFingerData.TypeFinger,
                            UpdatedById = photoFingerData.UpdatedById,
                            UpdatedByNpp = photoFingerData.UpdatedByNpp,
                            UpdatedByUID = photoFingerData.UpdatedByUid,
                            UpdatedByUnit = photoFingerData.UpdatedByUnit,
                            UpdatedTime = photoFingerData.UpdatedTime,
                            NoPengajuan = PengajuanID
                        });
                    }

                    photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                    {
                        CreatedById = Id,
                        IsActive = true,
                        IsDeleted = false,
                        Nik = enroll.KtpNIK,
                        PathFile = filePath,//
                        PathFileISO = filePathIso,//
                        CreatedByNpp = npp,
                        CreatedByUID = enroll.UID,
                        CreatedTime = DateTime.Now,
                        FileName = fileName,//
                        FileNameISO = fileNameIso,//
                        FileJariISO = isoEncrypted,//
                        TypeFinger = enroll.KtpTypeJariKiri,
                        IsApprove = false,
                        NoPengajuan = PengajuanID
                    });

                    if (isEmployee)
                    {
                        photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,//
                            PathFileISO = filePathIso,//
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            FileName = fileName,//
                            FileNameISO = fileNameIso,//
                            FileJariISO = isoEncrypted,//
                            TypeFinger = enroll.KtpTypeJariKiri,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        });
                    }
                }

                // to do: alat reader log
                var dataReader = await _dataReaderRepository.GetDatareaderUid(enroll.UID).ConfigureAwait(false);

                var dataReaderLog = new Tbl_MasterAlatReaderLog();

                if (dataReader != null)
                {
                    dataReaderLog = new Tbl_MasterAlatReaderLog
                    {
                        CreatedBy_Id = Id,
                        CreatedTime = DateTime.Now,
                        IsActive = true,
                        IsDeleted = false,
                        Nik = enroll.KtpNIK,
                        PegawaiId = Id,
                        Serial_Number = dataReader.SN_Unit,
                        Type = "Enroll No Matching",
                        Uid = enroll.UID,
                        UnitId = unitId
                    };
                }

                var inboxTemp = new Tbl_Inbox_Enrollment_Temp()
                {
                    CreatedById = Id,
                    CreatedByNpp = npp,
                    CreatedByUnitCode = unitCode,
                    CreatedByUnitId = unitId,
                    CreatedTime = DateTime.Now,
                    ApprovedStatus = 1,
                    Status = 1,
                    NoPengajuan = PengajuanID,
                    ApprovedByEmployeeId = enroll.ApprovedByEmployeeId,
                    ApprovedByEmployeeId2 = enroll.ApprovedByEmployeeId2

                };

                var inboxTempDetail = new Tbl_Inbox_Enrollment_Temp_Detail()
                {
                    Notes = enroll.Notes,
                    SubmitById = Id,
                    SubmitByNpp = npp,
                    SubmitedByUnitCode = unitCode,
                    SubmitedByUnitId = unitId,
                    CreatedTime = DateTime.Now,
                    ApprovedStatus = 1,
                    Status = 1,
                    NoPengajuan = PengajuanID
                };

                var mappingIKD = new Tbl_Enrollment_IKD() {
                    NIK = enroll.KtpNIK,
                    CreatedById = Id,
                    CreatedByNpp = npp,
                    CreatedByUnitId = unitId,
                    CreatedTime = DateTime.Now
                };

                var (result, msg) = await _enrollmentKTPRepository.InsertEnrollFlowNoMatchingIKD(mappingIKD,dataDemografis, dataDemografisLog, photoKtp, photoKtpLog, photoSignature, photoSignatureLog,
                    photoCam, photoCamLog, photoFingers, photoFingerLogs, exPhotoKtp, exPhotoSignature, exPhotoCam, exPhotoFinger, dataNpp, dataReaderLog, photoFingersEmployee, exPhotoFingerEmployee, inboxTemp, inboxTempDetail);

                await _alatReaderRepository.CreateLogActivity2(new Tbl_MasterAlatReaderLogActvity
                {
                    CreatedBy_Id = Id,
                    IsActive = true,
                    IsDeleted = false,
                    KodeUnit = unitCode,
                    LastIP = enroll.IpAddress,
                    NIK = enroll.KtpNIK,
                    CreatedTime = DateTime.Now,
                    NppPegawai = npp,
                    PegawaiId = Id,
                    Type = "Enroll",
                    UID = enroll.UID,
                    UnitId = unitId
                });
            }

            if (IsNasabah)
            {
                return (_SuccessMessageConfig.NasabahSuksesEnrollNasabah, (int)EnrollStatus.Nasabah_Berhasil_di_enroll, cekKTP?.CIF);
            }
            else
            {
                return (_SuccessMessageConfig.NasabahSuksesEnrollNonNasabah, (int)EnrollStatus.Nasabah_Berhasil_di_enroll, cekKTP?.CIF);
            }
        }

        public async Task<(string msg, int code, string cif)> ReSubmitEnrollmentFingerEncryptedOnlyNoMatchingIKD(bool isHitSOA, ApiSOA ReqSoa, EnrollKTPNoMatching enroll, int Id, string npp,
            string unitCode, int unitId)
        {
            var PengajuanID = Guid.NewGuid().ToString();
            var dataDemografis = new Tbl_DataKTP_Demografis_Temp();
            #region check data is employee or not
            bool isEmployee = false;
            var _empData = await _enrollmentKTPRepository.IsEmployee(enroll.KtpNIK);
            if (_empData != null)
            {
                isEmployee = true;
            }
            #endregion

            #region check UID
            var dataReader = await _dataReaderRepository.GetDatareaderUid(enroll.UID).ConfigureAwait(false);

            var dataReaderLog = new Tbl_MasterAlatReaderLog();
            var dataReaderActivityLog = new Tbl_MasterAlatReaderLogActvity();
            var dataNpp = new Tbl_Mapping_Pegawai_KTP();

            if (dataReader != null)
            {
                dataReaderLog = new Tbl_MasterAlatReaderLog
                {
                    CreatedBy_Id = Id,
                    CreatedTime = DateTime.Now,
                    IsActive = true,
                    IsDeleted = false,
                    Nik = enroll.KtpNIK,
                    PegawaiId = Id,
                    Serial_Number = dataReader.SN_Unit,
                    Type = "Updates Enroll",
                    Uid = enroll.UID
                };

                dataReaderActivityLog = new Tbl_MasterAlatReaderLogActvity
                {
                    CreatedBy_Id = Id,
                    IsActive = true,
                    IsDeleted = false,
                    KodeUnit = unitCode,
                    LastIP = enroll.IpAddress,
                    NIK = enroll.KtpNIK,
                    CreatedTime = DateTime.Now,
                    NppPegawai = npp,
                    PegawaiId = Id,
                    Type = "Updates Enroll",
                    UID = enroll.UID,
                    UnitId = unitId
                };
            }
            #endregion

            string JamServer = DateTime.Now.ToString("ddMMyyyyHHmmss");

            if (enroll.KtpTanggalLahir != null)
            {
                enroll.KtpTanggalLahir = enroll.KtpTanggalLahir.Replace(".", "");
                if (enroll.KtpTanggalLahir.Contains("/"))
                {
                    enroll.KtpTanggalLahir = enroll.KtpTanggalLahir.Replace("/", "-");
                }
                string[] arrayTanggl = enroll.KtpTanggalLahir.Split("-");
                string hari = "";
                string bulan = "";
                string tahun = "";

                if (arrayTanggl != null)
                {
                    if (arrayTanggl[0] != null)
                    {
                        if (arrayTanggl[0].Length != 2)
                        {
                            hari = "0" + arrayTanggl[0];

                        }
                        else
                        {
                            hari = arrayTanggl[0];

                        }
                    }

                    if (arrayTanggl[1] != null)
                    {
                        if (arrayTanggl[1].Length != 2)
                        {
                            bulan = "0" + arrayTanggl[1];

                        }
                        else
                        {
                            bulan = arrayTanggl[1];

                        }
                    }

                    if (arrayTanggl[2] != null)
                    {
                        tahun = arrayTanggl[2];
                    }
                }

                enroll.KtpTanggalLahir = hari + "-" + bulan + "-" + tahun;
            }

            var cekKTP = await _profileRepository.GetDataDemografis(enroll.KtpNIK)
                .ConfigureAwait(false);

            #region update data ktp
            if (cekKTP != null)
            {
                #region update demografi
                var logDemografi = new Tbl_DataKTP_Demografis_Log
                {
                    Agama = cekKTP.Agama,
                    Alamat = cekKTP.Alamat,
                    AlamatGoogle = cekKTP.AlamatGoogle,
                    AlamatLengkap = cekKTP.AlamatLengkap,
                    CreatedById = cekKTP.CreatedById,
                    CreatedByUID = cekKTP.CreatedByUID,
                    CreatedByUnitId = cekKTP.CreatedByUnitId,
                    CreatedTime = cekKTP.CreatedTime,
                    Desa = cekKTP.Desa,
                    GolonganDarah = cekKTP.GolonganDarah,
                    JenisKelamin = cekKTP.JenisKelamin,
                    Kecamatan = cekKTP.Kecamatan,
                    Kelurahan = cekKTP.Kelurahan,
                    Kewarganegaraan = cekKTP.Kewarganegaraan,
                    KodePos = cekKTP.KodePos,
                    Kota = cekKTP.Kota,
                    Latitude = cekKTP.Latitude,
                    Longitude = cekKTP.Longitude,
                    MasaBerlaku = cekKTP.MasaBerlaku,
                    Nama = cekKTP.Nama,
                    NIK = cekKTP.NIK,
                    Pekerjaan = cekKTP.Pekerjaan,
                    Provinsi = cekKTP.Provinsi,
                    RT = cekKTP.RT,
                    RW = cekKTP.RW,
                    StatusPerkawinan = cekKTP.StatusPerkawinan,
                    TanggalLahir = cekKTP.TanggalLahir,
                    TempatLahir = cekKTP.TempatLahir,
                    CIF = cekKTP.CIF,
                    CreatedByNpp = cekKTP.CreatedByNpp
                };

                var stringPerubahan = "";

                if (cekKTP.Nama != enroll.KtpNama)
                {
                    stringPerubahan = stringPerubahan + "NAMA : " + cekKTP.Nama + " -> " + enroll.KtpNama + " <br/>";
                    cekKTP.Nama = enroll.KtpNama;
                }

                if (cekKTP.TempatLahir != enroll.KtpTempatLahir)
                {
                    stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTP.TempatLahir + " -> " + enroll.KtpTempatLahir + " <br/>";
                    cekKTP.TempatLahir = enroll.KtpTempatLahir;
                }

                if (enroll.KtpTanggalLahir != null)
                {
                    if (cekKTP.TempatLahir != enroll.KtpTempatLahir)
                    {
                        stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTP.TanggalLahir + " -> " + enroll.KtpTanggalLahir + " <br/>";
                        cekKTP.TanggalLahir = DateTime.ParseExact(enroll.KtpTanggalLahir, "dd-MM-yyyy", CultureInfo.InvariantCulture);
                    }
                }

                if (cekKTP.JenisKelamin != enroll.KtpJanisKelamin)
                {
                    stringPerubahan = stringPerubahan + "JENIS KELAMIN : " + cekKTP.JenisKelamin + " -> " + enroll.KtpJanisKelamin + " <br/>";
                    cekKTP.JenisKelamin = enroll.KtpJanisKelamin;
                }

                if (cekKTP.GolonganDarah != enroll.KtpGolonganDarah)
                {
                    stringPerubahan = stringPerubahan + "GOLONGAN DARAH : " + cekKTP.GolonganDarah + " -> " + enroll.KtpGolonganDarah + " <br/>";
                    cekKTP.GolonganDarah = enroll.KtpGolonganDarah;
                }

                if (cekKTP.Alamat != enroll.KtpAlamat)
                {
                    stringPerubahan = stringPerubahan + "ALAMAT : " + cekKTP.Alamat + " -> " + enroll.KtpAlamat + " <br/>";
                    cekKTP.Alamat = enroll.KtpAlamat;
                }

                if (cekKTP.RT != enroll.KtpRT)
                {
                    stringPerubahan = stringPerubahan + "RT : " + cekKTP.RT + " -> " + enroll.KtpRT + " <br/>";
                    cekKTP.RT = enroll.KtpRT;
                }

                if (cekKTP.RW != enroll.KtpRW)
                {
                    stringPerubahan = stringPerubahan + "RW : " + cekKTP.RW + " -> " + enroll.KtpRW + " <br/>";
                    cekKTP.RW = enroll.KtpRW;
                }

                if (cekKTP.Kelurahan != enroll.KtpKelurahan)
                {
                    stringPerubahan = stringPerubahan + "KELURAHAN : " + cekKTP.Kelurahan + " -> " + enroll.KtpKelurahan + " <br/>";
                    cekKTP.Kelurahan = enroll.KtpKelurahan;
                }

                if (cekKTP.Kecamatan != enroll.KtpKecamatan)
                {
                    stringPerubahan = stringPerubahan + "KECAMATAN : " + cekKTP.Kecamatan + " -> " + enroll.KtpKecamatan + " <br/>";
                    cekKTP.Kecamatan = enroll.KtpKecamatan;
                }

                if (cekKTP.Kota != enroll.KtpKota)
                {
                    stringPerubahan = stringPerubahan + "KOTA/KABUPATEN : " + cekKTP.Kota + " -> " + enroll.KtpKota + " <br/>";
                    cekKTP.Kota = enroll.KtpKota;
                }

                if (cekKTP.Provinsi != enroll.KtpProvinsi)
                {
                    stringPerubahan = stringPerubahan + "PROVINSI  : " + cekKTP.Provinsi + " -> " + enroll.KtpProvinsi + " <br/>";
                    cekKTP.Provinsi = enroll.KtpProvinsi;
                }

                if (cekKTP.Agama != enroll.KtpAgama)
                {
                    stringPerubahan = stringPerubahan + "AGAMA  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTP.Agama = enroll.KtpAgama;
                }

                if (cekKTP.StatusPerkawinan != enroll.KtpStatusPerkawinan)
                {
                    stringPerubahan = stringPerubahan + "STATUS PERKAWINAN  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTP.StatusPerkawinan = enroll.KtpStatusPerkawinan;
                }

                if (cekKTP.Pekerjaan != enroll.KtpPekerjaan)
                {
                    stringPerubahan = stringPerubahan + "PEKERJAAN  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTP.Pekerjaan = enroll.KtpPekerjaan;
                }

                if (cekKTP.Kewarganegaraan != enroll.KtpKewarganegaraan)
                {
                    stringPerubahan = stringPerubahan + "KEWARGANEGARAAN  : " + cekKTP.Kewarganegaraan + " -> " + enroll.KtpKewarganegaraan + " <br/>";
                    cekKTP.Kewarganegaraan = enroll.KtpKewarganegaraan;
                }
                if (cekKTP.MasaBerlaku != enroll.KtpMasaBerlaku)
                {
                    stringPerubahan = stringPerubahan + "MASA BERLAKU  : " + cekKTP.MasaBerlaku + " -> " + enroll.KtpMasaBerlaku + " <br/>";
                    cekKTP.MasaBerlaku = enroll.KtpMasaBerlaku;
                }
                if (cekKTP.CIF == null)
                {
                    var cifData = new ApiSOAResponse();
                    #region Hit SOA And Loggging it
                    if (isHitSOA == true)
                    {
                        cifData = await _cifService.GetSOAByCif(ReqSoa)
                        .ConfigureAwait(false);

                        var _status = 0;
                        if (cifData.cif != null)
                        {
                            _status = 1;
                        }

                        var _log = new Tbl_ThirdPartyLog
                        {
                            FeatureName = "ReSubmitEnrollmentFingerEncryptedNoMatching",
                            HostUrl = ReqSoa.host,
                            Request = Newtonsoft.Json.JsonConvert.SerializeObject(ReqSoa),
                            Status = _status,
                            Response = Newtonsoft.Json.JsonConvert.SerializeObject(cifData),
                            CreatedDate = System.DateTime.Now,
                            CreatedBy = npp
                        };

                        _ = _enrollmentKTPRepository.CreateThirdPartyLog(_log);
                    }
                    else
                    {
                        try
                        {
                            var res = await _cifService.GetCIF(new NikDto { Nik = enroll.KtpNIK },
                            new NikDtoUrl { baseUrl = ReqSoa.baseUrlNonSoa, endpoint = ReqSoa.UrlEndPointNonSoa });
                            if (res.Data == null)
                            {
                                cifData.cif = null;
                            }
                            else
                            {
                                cifData.cif = res.Data.Cif;
                            };
                        }
                        catch (Exception ex)
                        {
                            cifData.cif = null;
                        }
                    }
                    #endregion

                    if (!String.IsNullOrEmpty(cifData.cif))
                    {
                        cifData.cif = cifData.cif.Trim();
                    }

                    stringPerubahan = stringPerubahan + "CIF  : " + cekKTP.CIF + " -> " + cifData.cif + " <br/>";
                    cekKTP.CIF = cifData.cif;
                }

                cekKTP.UpdatedTime = DateTime.Now;
                cekKTP.UpdatedById = Id;
                cekKTP.UpdatedByUID = enroll.UID;
                cekKTP.UpdatedByUnitCode = unitCode;
                cekKTP.UpdatedByUnitId = unitId;
                cekKTP.UpdatedByNpp = npp;

                var tanggalLahirNew = DateTime.ParseExact(cekKTP.TanggalLahir?.ToString("dd-MM-yyyy"), "dd-MM-yyyy", CultureInfo.InvariantCulture);

                dataDemografis = new Tbl_DataKTP_Demografis_Temp
                {
                    Agama = cekKTP.Agama,
                    Alamat = cekKTP.Alamat,
                    AlamatGoogle = cekKTP.AlamatGoogle,
                    AlamatLengkap = cekKTP.AlamatLengkap,
                    CIF = cekKTP.CIF,
                    NIK = cekKTP.NIK,
                    CreatedById = Id,
                    IsActive = true,
                    IsDeleted = false,
                    JenisKelamin = cekKTP.JenisKelamin,
                    Kecamatan = cekKTP.Kecamatan,
                    Kelurahan = cekKTP.Kelurahan,
                    CreatedByUID = enroll.UID,
                    CreatedTime = DateTime.Now,
                    GolonganDarah = cekKTP.GolonganDarah,
                    Kewarganegaraan = cekKTP.Kewarganegaraan,
                    KodePos = cekKTP.KodePos,
                    Kota = cekKTP.Kota,
                    Latitude = cekKTP.Latitude,
                    Longitude = cekKTP.Longitude,
                    MasaBerlaku = cekKTP.MasaBerlaku,
                    Nama = cekKTP.Nama,
                    Pekerjaan = cekKTP.Pekerjaan,
                    Provinsi = cekKTP.Provinsi,
                    RT = cekKTP.RT,
                    RW = cekKTP.RW,
                    StatusPerkawinan = cekKTP.StatusPerkawinan,
                    TanggalLahir = string.IsNullOrWhiteSpace(cekKTP.TanggalLahir.ToString()) ? null : DateTime.ParseExact(cekKTP.TanggalLahir?.ToString("dd-MM-yyyy"), "dd-MM-yyyy", CultureInfo.InvariantCulture),
                    TempatLahir = cekKTP.TempatLahir,
                    CreatedByNpp = npp,
                    CreatedByUnitCode = unitCode,
                    CreatedByUnitId = unitId,
                    IsVerified = false,
                    IsNasabahTemp = string.IsNullOrWhiteSpace(cekKTP.CIF),
                    IsApprove = false,
                    NoPengajuan = PengajuanID
                };

                if (string.IsNullOrWhiteSpace(stringPerubahan))
                {
                    stringPerubahan = stringPerubahan + "Data Demografi tidak ada perubahan" + " <br/>";
                }
                #endregion

                if (isEmployee)
                {
                    var _mappingData = await _enrollmentKTPRepository.MappingNppNikByNik(enroll.KtpNIK);
                    if (_mappingData == null)
                    {
                        dataNpp = new Tbl_Mapping_Pegawai_KTP
                        {
                            CreatedById = Id,
                            NIK = enroll.KtpNIK,
                            Npp = _empData.Npp,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            CreatedByUnit = unitCode,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            UpdatedTime = DateTime.Now,
                        };
                    }
                    else
                    {
                        dataNpp = _mappingData;
                        dataNpp.UpdatedByNpp = npp;
                        dataNpp.UpdatedByUID = enroll.UID;
                        dataNpp.UpdatedByUnit = unitCode;
                        dataNpp.UpdatedTime = DateTime.Now;
                    }
                }

                var sysPathFolder = await _sysParameterRepository.GetPathFolder("PathFolderData");
                string pathFolder = sysPathFolder.Value;

                var photoKtpLog = new Tbl_DataKTP_Photo_Log();
                var photoKTPData = await _profileRepository.GetPhotoKtp(enroll.KtpNIK)
                        .ConfigureAwait(false);
                //var exPhotoKtp = photoKTPData;

                var exPhotoKtp = new Tbl_DataKTP_Photo_Temp();

                var photoKtp = new Tbl_DataKTP_Photo_Temp();

                #region update Photo KTP
                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoKTP))
                {
                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpPhotoKTP);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderPhoto")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderFoto = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "Foto_" + enroll.KtpNIK + "_" + JamServer + ".jpg";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderFoto, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderFoto))
                        {
                            Directory.CreateDirectory(subPathFolderFoto);
                        }

                        filePath = subPathFolderFoto + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoKTPData == null)
                    {
                        photoKtp = new Tbl_DataKTP_Photo_Temp
                        {
                            PathFile = filePath,
                            Nik = enroll.KtpNIK,
                            FileName = fileName,
                            IsActive = true,
                            IsDeleted = false,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            UpdatedTime = DateTime.Now,
                            CreatedById = Id,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedByUnit = unitCode,
                            CreatedTime = DateTime.Now,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        };
                    }
                    else
                    {
                        //photoKtpLog.CreatedById = photoKTPData.CreatedById;
                        //photoKtpLog.CreatedByNpp = photoKTPData.CreatedByNpp;
                        //photoKtpLog.CreatedByUid = photoKTPData.CreatedByUid;
                        //photoKtpLog.CreatedByUnit = photoKTPData.CreatedByUnit;
                        //photoKtpLog.CreatedTime = photoKTPData.CreatedTime;
                        //photoKtpLog.FileName = photoKTPData.FileName;
                        //photoKtpLog.Nik = photoKTPData.Nik;
                        //photoKtpLog.PathFile = photoKTPData.PathFile;

                        //exPhotoKtp = new Tbl_DataKTP_Photo_Temp
                        //{
                        //    PathFile = photoKTPData.PathFile,
                        //    Nik = photoKTPData.Nik,
                        //    FileName = photoKTPData.FileName,
                        //    IsActive = photoKTPData.IsActive,
                        //    IsDeleted = photoKTPData.IsDeleted,
                        //    CreatedById = photoKTPData.CreatedById,
                        //    CreatedByNpp = photoKTPData.CreatedByNpp,
                        //    CreatedByUID = photoKTPData.CreatedByUid,
                        //    CreatedTime = photoKTPData.CreatedTime,
                        //    CreatedByUnit = photoKTPData.CreatedByUnit,
                        //    UpdatedById = photoKTPData.UpdatedById,
                        //    UpdatedByNpp = photoKTPData.UpdatedByNpp,
                        //    UpdatedByUID = photoKTPData.UpdatedByUid,
                        //    UpdatedByUnit = photoKTPData.UpdatedByUnit,
                        //    UpdatedTime = photoKTPData.UpdatedTime,
                        //    Id = photoKTPData.Id,
                        //    NoPengajuan = PengajuanID
                        //};

                        photoKtp.PathFile = filePath;
                        photoKtp.Nik = enroll.KtpNIK;
                        photoKtp.FileName = fileName;
                        photoKtp.IsActive = true;
                        photoKtp.IsDeleted = false;
                        photoKtp.UpdatedById = Id;
                        photoKtp.UpdatedByNpp = npp;
                        photoKtp.UpdatedByUID = enroll.UID;
                        photoKtp.UpdatedByUnit = unitCode;
                        photoKtp.UpdatedTime = DateTime.Now;
                        photoKtp.NoPengajuan = PengajuanID;
                        photoKtp.IsApprove = false;
                    }
                }
                else
                {
                    stringPerubahan = stringPerubahan + "Request Payload Photo Tidak Ditemukan" + " <br/>";
                }
                #endregion

                var photoSignatureLog = new Tbl_DataKTP_Signature_Log();
                var photoSignatureData = await _profileRepository.GetPhotoSignature(enroll.KtpNIK)
                        .ConfigureAwait(false);
                //var exphotoSignatureData = photoSignatureData;

                var exPhotoSignature = new Tbl_DataKTP_Signature_Temp();
                var photoSignature = new Tbl_DataKTP_Signature_Temp();

                #region update signature
                if (!string.IsNullOrWhiteSpace(enroll.KtpSignature))
                {
                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpSignature);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderSignature")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderSignature = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "Signature_" + enroll.KtpNIK + "_" + JamServer + ".jpg";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderSignature, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderSignature))
                        {
                            Directory.CreateDirectory(subPathFolderSignature);
                        }

                        filePath = subPathFolderSignature + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoSignatureData == null)
                    {
                        photoSignature = new Tbl_DataKTP_Signature_Temp
                        {
                            CreatedById = Id,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            CreatedByUnit = unitCode,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedTime = DateTime.Now,
                            UpdatedByUnit = unitCode,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            FileName = fileName,
                            PathFile = filePath,
                            NoPengajuan = PengajuanID,
                            IsApprove = false
                        };
                    }
                    else
                    {
                        //photoSignatureLog.CreatedById = photoSignatureData.CreatedById;
                        //photoSignatureLog.CreatedByNpp = photoSignatureData.CreatedByNpp;
                        //photoSignatureLog.CreatedByUid = photoSignatureData.CreatedByUid;
                        //photoSignatureLog.CreatedByUnit = photoSignatureData.CreatedByUnit;
                        //photoSignatureLog.CreatedTime = photoSignatureData.CreatedTime;
                        //photoSignatureLog.FileName = photoSignatureData.FileName;
                        //photoSignatureLog.Nik = photoSignatureData.Nik;
                        //photoSignatureLog.PathFile = photoSignatureData.PathFile;

                        //exPhotoSignature = new Tbl_DataKTP_Signature_Temp
                        //{
                        //    CreatedById = photoSignatureData.CreatedById,
                        //    CreatedByNpp = photoSignatureData.CreatedByNpp,
                        //    IsActive = photoSignatureData.IsActive,
                        //    IsDeleted = photoSignatureData.IsDeleted,
                        //    Nik = photoSignatureData.Nik,
                        //    FileName = photoSignatureData.FileName,
                        //    CreatedByUID = photoSignatureData.CreatedByUid,
                        //    CreatedTime = photoSignatureData.CreatedTime,
                        //    PathFile = photoSignatureData.PathFile,
                        //    CreatedByUnit = photoSignatureData.CreatedByUnit,
                        //    UpdatedById = photoSignatureData.UpdatedById,
                        //    UpdatedByNpp = photoSignatureData.UpdatedByNpp,
                        //    UpdatedByUID = photoSignatureData.UpdatedByUid,
                        //    UpdatedByUnit = photoSignatureData.UpdatedByUnit,
                        //    UpdatedTime = photoSignatureData.UpdatedTime,
                        //    Id = photoSignatureData.Id,
                        //    NoPengajuan = PengajuanID
                        //};

                        photoSignature.UpdatedById = Id;
                        photoSignature.UpdatedByNpp = npp;
                        photoSignature.UpdatedByUID = enroll.UID;
                        photoSignature.UpdatedTime = DateTime.Now;
                        photoSignature.IsActive = true;
                        photoSignature.IsDeleted = false;
                        photoSignature.Nik = enroll.KtpNIK;
                        photoSignature.FileName = fileName;
                        photoSignature.PathFile = filePath;
                        photoSignature.NoPengajuan = PengajuanID;
                        photoSignature.IsApprove = false;
                    }
                }
                else
                {
                    stringPerubahan = stringPerubahan + "Request Payload Signature Tidak Ditemukan" + " <br/>";
                }
                #endregion

                var photoCamLog = new Tbl_DataKTP_PhotoCam_Log();
                var photoCamData = await _profileRepository.GetPhotoCam(enroll.KtpNIK)
                        .ConfigureAwait(false);
                //var exphotoCamData = photoCamData;

                var exPhotoCam = new Tbl_DataKTP_PhotoCam_Temp();
                var photoCam = new Tbl_DataKTP_PhotoCam_Temp();
                #region update photo cam
                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoCam))
                {
                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpPhotoCam);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderWebcam")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string SubPathFolderPhotoCam = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "PhotoCam_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(SubPathFolderPhotoCam, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(SubPathFolderPhotoCam))
                        {
                            Directory.CreateDirectory(SubPathFolderPhotoCam);
                        }

                        filePath = SubPathFolderPhotoCam + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoCamData == null)
                    {


                        photoCam = new Tbl_DataKTP_PhotoCam_Temp
                        {
                            PathFile = filePath,
                            Nik = enroll.KtpNIK,
                            FileName = fileName,
                            CreatedTime = DateTime.Now,
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedByUnit = unitCode,
                            IsApprove = false,
                            NoPengajuan = PengajuanID,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedTime = DateTime.Now,
                            UpdatedByUnit = unitCode
                        };

                    }
                    else
                    {
                        //photoCamLog.CreatedById = photoCamData.CreatedById;
                        //photoCamLog.CreatedByNpp = photoCamData.CreatedByNpp;
                        //photoCamLog.CreatedByUid = photoCamData.CreatedByUid;
                        //photoCamLog.CreatedByUnit = photoCamData.CreatedByUnit;
                        //photoCamLog.CreatedTime = photoCamData.CreatedTime;
                        //photoCamLog.FileName = photoCamData.FileName;
                        //photoCamLog.Nik = photoCamData.Nik;
                        //photoCamLog.PathFile = photoCamData.PathFile;

                        //exPhotoCam = new Tbl_DataKTP_PhotoCam_Temp
                        //{
                        //    Id = photoCamData.Id,
                        //    PathFile = photoCamData.PathFile,//
                        //    Nik = photoCamData.Nik,
                        //    FileName = photoCamData.FileName,//
                        //    CreatedTime = photoCamData.CreatedTime,
                        //    CreatedById = photoCamData.CreatedById,
                        //    IsActive = photoCamData.IsActive,
                        //    IsDeleted = photoCamData.IsDeleted,
                        //    CreatedByNpp = photoCamData.CreatedByNpp,
                        //    CreatedByUID = photoCamData.CreatedByUid,
                        //    CreatedByUnit = photoCamData.CreatedByUnit,
                        //    UpdatedById = photoCamData.UpdatedById,
                        //    UpdatedByNpp = photoCamData.UpdatedByNpp,
                        //    UpdatedByUID = photoCamData.UpdatedByUid,
                        //    UpdatedByUnit = photoCamData.UpdatedByUnit,
                        //    UpdatedTime = photoCamData.UpdatedTime,
                        //    NoPengajuan = PengajuanID
                        //};

                        photoCam.PathFile = filePath;
                        photoCam.Nik = enroll.KtpNIK;
                        photoCam.FileName = fileName;
                        photoCam.IsActive = true;
                        photoCam.IsDeleted = false;
                        photoCam.UpdatedById = Id;
                        photoCam.UpdatedByNpp = npp;
                        photoCam.UpdatedByUID = enroll.UID;
                        photoCam.UpdatedTime = DateTime.Now;
                        photoCam.NoPengajuan = PengajuanID;
                        photoCam.IsApprove = false;
                    }
                }
                else
                {
                    stringPerubahan = stringPerubahan + "Request Payload Photo Cam Tidak Ditemukan" + " <br/>";
                }
                #endregion

                #region finger
                var exPhotoFinger = new List<Tbl_DataKTP_Finger_Temp>();

                var exPhotoFingerEmployee = new List<Tbl_DataKTP_Finger_Employee_Temp>();

                var photoFingerLogs = new List<Tbl_DataKTP_Finger_Log>();

                var photoFingers = new List<Tbl_DataKTP_Finger_Temp>();

                var photoFingersEmployee = new List<Tbl_DataKTP_Finger_Employee_Temp>();

                var photoFingersEmployeeLogs = new List<Tbl_DataKTP_Finger_Employee_Log>();

                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKanan))
                {

                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);

                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                    }

                    string imageEncrypted = enroll.KtpFingerKanan.Encrypt(Phrase.FileEncryption);

                    string filePath = "";
                    string filePathIso = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKanan.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";
                    string fileNameIso = "";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    string isoEncrypted = "";

                    if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKananIso))
                    {
                        isoEncrypted = enroll.KtpFingerKananIso.Encrypt(Phrase.FileEncryption);
                        fileNameIso = "PhotoFingerISO_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                        if (_sftpConfig.IsActive)
                        {
                            using var stream = new MemoryStream(Encoding.ASCII.GetBytes(isoEncrypted));

                            (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileNameIso, _sftpConfig.Host,
                                _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                            filePathIso = fPath;
                        }
                        else
                        {
                            if (!Directory.Exists(subPathFolderPhotoFinger))
                            {
                                Directory.CreateDirectory(subPathFolderPhotoFinger);
                            }

                            filePathIso = subPathFolderPhotoFinger + fileNameIso;
                            File.WriteAllText(filePathIso, isoEncrypted);
                        }
                    }

                    if (photoFingerData == null)
                    {
                        photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = unitId,
                            CreatedByUnit = unitCode,
                            FileJariISO = isoEncrypted,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            TypeFinger = enroll.KtpTypeJariKanan,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        });
                    }
                    else
                    {
                        //photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        //{
                        //    CreatedById = photoFingerData.CreatedById,
                        //    CreatedByNpp = photoFingerData.CreatedByNpp,
                        //    CreatedByUid = photoFingerData.CreatedByUid,
                        //    CreatedByUnit = photoFingerData.CreatedByUnit,
                        //    CreatedByUnitId = photoFingerData.CreatedByUnitId,
                        //    CreatedTime = photoFingerData.CreatedTime,
                        //    //FileJari = photoFingerData.FileJari,
                        //    FileJariISO = photoFingerData.FileJariISO,
                        //    FileName = photoFingerData.FileName,
                        //    FileNameISO = photoFingerData.FileNameISO,
                        //    Nik = photoFingerData.Nik,
                        //    PathFile = photoFingerData.PathFile,
                        //    PathFileISO = photoFingerData.PathFileISO,
                        //    TypeFinger = photoFingerData.TypeFinger
                        //});

                        //exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        //{
                        //    Id = photoFingerData.Id,
                        //    CreatedById = photoFingerData.CreatedById,
                        //    IsActive = photoFingerData.IsActive,
                        //    IsDeleted = photoFingerData.IsDeleted,
                        //    Nik = photoFingerData.Nik,
                        //    PathFile = photoFingerData.PathFile,//
                        //    PathFileISO = photoFingerData.PathFileISO,//
                        //    CreatedByNpp = photoFingerData.CreatedByNpp,
                        //    CreatedByUID = photoFingerData.CreatedByUid,
                        //    CreatedTime = DateTime.Now,
                        //    CreatedByUnit = photoFingerData.CreatedByUnit,
                        //    CreatedByUnitId = photoFingerData.CreatedByUnitId,
                        //    FileName = photoFingerData.FileName,//
                        //    FileNameISO = photoFingerData.FileNameISO,//
                        //    FileJariISO = photoFingerData.FileJariISO,
                        //    TypeFinger = photoFingerData.TypeFinger,
                        //    UpdatedById = photoFingerData.UpdatedById,
                        //    UpdatedByNpp = photoFingerData.UpdatedByNpp,
                        //    UpdatedByUID = photoFingerData.UpdatedByUid,
                        //    UpdatedByUnit = photoFingerData.UpdatedByUnit,
                        //    UpdatedTime = photoFingerData.UpdatedTime,
                        //    NoPengajuan = PengajuanID
                        //});

                        photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = unitId,
                            CreatedByUnit = unitCode,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            FileJariISO = isoEncrypted,
                            TypeFinger = enroll.KtpTypeJariKanan,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        });
                    }

                    if (isEmployee)
                    {
                        if (photoFingerDataEmployee == null)
                        {
                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = Id,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                PathFileISO = filePathIso,
                                CreatedByNpp = npp,
                                CreatedByUID = enroll.UID,
                                CreatedTime = DateTime.Now,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUID = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = unitId,
                                CreatedByUnit = unitCode,
                                FileJariISO = isoEncrypted,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKanan,
                                IsApprove = false,
                                NoPengajuan = PengajuanID
                            });
                        }
                        else
                        {
                            //photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            //{
                            //    CreatedById = photoFingerDataEmployee.CreatedById,
                            //    CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                            //    CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                            //    CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                            //    CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                            //    CreatedTime = photoFingerDataEmployee.CreatedTime,
                            //    FileJariISO = photoFingerDataEmployee.FileJariISO,
                            //    FileName = photoFingerDataEmployee.FileName,
                            //    FileNameISO = photoFingerDataEmployee.FileNameISO,
                            //    Nik = photoFingerDataEmployee.Nik,
                            //    PathFile = photoFingerDataEmployee.PathFile,
                            //    PathFileISO = photoFingerDataEmployee.PathFileISO,
                            //    TypeFinger = photoFingerDataEmployee.TypeFinger
                            //});

                            //exPhotoFingerEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp {
                            //    CreatedById = photoFingerDataEmployee.CreatedById,
                            //    IsActive = photoFingerDataEmployee.IsActive,
                            //    IsDeleted = photoFingerDataEmployee.IsDeleted,
                            //    Nik = photoFingerDataEmployee.Nik,
                            //    PathFile = photoFingerDataEmployee.PathFile,
                            //    PathFileISO = photoFingerDataEmployee.PathFileISO,
                            //    CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                            //    CreatedByUID = photoFingerDataEmployee.CreatedByUid,
                            //    CreatedTime = photoFingerDataEmployee.CreatedTime,
                            //    UpdatedById = photoFingerDataEmployee.UpdatedById,
                            //    UpdatedByNpp = photoFingerDataEmployee.UpdatedByNpp,
                            //    UpdatedByUID = photoFingerDataEmployee.UpdatedByUid,
                            //    UpdatedByUnit = photoFingerDataEmployee.UpdatedByUnit,
                            //    CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                            //    CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                            //    FileJariISO = photoFingerDataEmployee.FileJariISO,
                            //    UpdatedTime = photoFingerDataEmployee.UpdatedTime,
                            //    FileName = photoFingerDataEmployee.FileName,
                            //    FileNameISO = photoFingerDataEmployee.FileNameISO,
                            //    TypeFinger = photoFingerDataEmployee.TypeFinger

                            //});
                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                PathFileISO = filePathIso,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUID = photoFingerDataEmployee.CreatedByUid,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUID = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                FileJariISO = isoEncrypted,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKanan,
                                IsApprove = false,
                                NoPengajuan = PengajuanID
                            });
                        }
                    }
                }
                else
                {
                    #region get data if no payload but we have to replace all data with no data
                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                    if (photoFingerData != null)
                    {
                        //exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        //{
                        //    CreatedById = photoFingerData.CreatedById,
                        //    IsActive = photoFingerData.IsActive,
                        //    IsDeleted = photoFingerData.IsDeleted,
                        //    Nik = photoFingerData.Nik,
                        //    PathFile = photoFingerData.PathFile,
                        //    PathFileISO = photoFingerData.PathFileISO,
                        //    CreatedByNpp = photoFingerData.CreatedByNpp,
                        //    CreatedByUID = photoFingerData.CreatedByUid,
                        //    CreatedTime = photoFingerData.CreatedTime,
                        //    UpdatedById = photoFingerData.UpdatedById,
                        //    UpdatedByNpp = photoFingerData.UpdatedByNpp,
                        //    UpdatedByUID = photoFingerData.UpdatedByUid,
                        //    UpdatedByUnit = photoFingerData.UpdatedByUnit,
                        //    CreatedByUnitId = photoFingerData.CreatedByUnitId,
                        //    CreatedByUnit = photoFingerData.CreatedByUnit,
                        //    FileJariISO = photoFingerData.FileJariISO,
                        //    UpdatedTime = photoFingerData.UpdatedTime,
                        //    FileName = photoFingerData.FileName,
                        //    FileNameISO = photoFingerData.FileNameISO,
                        //    TypeFinger = photoFingerData.TypeFinger

                        //});

                        //photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        //{
                        //    CreatedById = photoFingerData.CreatedById,
                        //    CreatedByNpp = photoFingerData.CreatedByNpp,
                        //    CreatedByUid = photoFingerData.CreatedByUid,
                        //    CreatedByUnit = photoFingerData.CreatedByUnit,
                        //    CreatedByUnitId = photoFingerData.CreatedByUnitId,
                        //    CreatedTime = photoFingerData.CreatedTime,
                        //    FileName = photoFingerData.FileName,
                        //    FileNameISO = photoFingerData.FileNameISO,
                        //    Nik = photoFingerData.Nik,
                        //    PathFile = photoFingerData.PathFile,
                        //    TypeFinger = photoFingerData.TypeFinger
                        //});
                    }

                    if (isEmployee)
                    {
                        var photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                        if (photoFingerDataEmployee != null)
                        {
                            //exPhotoFingerEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            //{
                            //    CreatedById = photoFingerDataEmployee.CreatedById,
                            //    IsActive = photoFingerDataEmployee.IsActive,
                            //    IsDeleted = photoFingerDataEmployee.IsDeleted,
                            //    Nik = photoFingerDataEmployee.Nik,
                            //    PathFile = photoFingerDataEmployee.PathFile,
                            //    PathFileISO = photoFingerDataEmployee.PathFileISO,
                            //    CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                            //    CreatedByUID = photoFingerDataEmployee.CreatedByUid,
                            //    CreatedTime = photoFingerDataEmployee.CreatedTime,
                            //    UpdatedById = photoFingerDataEmployee.UpdatedById,
                            //    UpdatedByNpp = photoFingerDataEmployee.UpdatedByNpp,
                            //    UpdatedByUID = photoFingerDataEmployee.UpdatedByUid,
                            //    UpdatedByUnit = photoFingerDataEmployee.UpdatedByUnit,
                            //    CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                            //    CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                            //    FileJariISO = photoFingerDataEmployee.FileJariISO,
                            //    UpdatedTime = photoFingerDataEmployee.UpdatedTime,
                            //    FileName = photoFingerDataEmployee.FileName,
                            //    FileNameISO = photoFingerDataEmployee.FileNameISO,
                            //    TypeFinger = photoFingerDataEmployee.TypeFinger

                            //});

                            //photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            //{
                            //    CreatedById = photoFingerDataEmployee.CreatedById,
                            //    CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                            //    CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                            //    CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                            //    CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                            //    CreatedTime = photoFingerDataEmployee.CreatedTime,
                            //    //FileJari = photoFingerDataEmployee.FileJari,
                            //    FileName = photoFingerDataEmployee.FileName,
                            //    FileNameISO = photoFingerDataEmployee.FileNameISO,
                            //    Nik = photoFingerDataEmployee.Nik,
                            //    PathFile = photoFingerDataEmployee.PathFile,
                            //    PathFileISO = photoFingerDataEmployee.PathFileISO,
                            //    TypeFinger = photoFingerDataEmployee.TypeFinger
                            //});
                        }
                    }
                    #endregion

                    stringPerubahan = stringPerubahan + "Request Payload Finger Kanan Tidak Ditemukan" + " <br/>";
                }

                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKiri))
                {
                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);

                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                    }

                    string imageEncrypted = enroll.KtpFingerKiri.Encrypt(Phrase.FileEncryption);

                    string filePath = "";
                    string filePathIso = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKiri.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";
                    string fileNameIso = "";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    string isoEncrypted = "";

                    if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKiriIso))
                    {
                        isoEncrypted = enroll.KtpFingerKiriIso.Encrypt(Phrase.FileEncryption);
                        fileNameIso = "PhotoFingerISO_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                        if (_sftpConfig.IsActive)
                        {
                            using var stream = new MemoryStream(Encoding.ASCII.GetBytes(isoEncrypted));

                            (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileNameIso, _sftpConfig.Host,
                                _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                            filePathIso = fPath;
                        }
                        else
                        {
                            if (!Directory.Exists(subPathFolderPhotoFinger))
                            {
                                Directory.CreateDirectory(subPathFolderPhotoFinger);
                            }

                            filePathIso = subPathFolderPhotoFinger + fileNameIso;
                            File.WriteAllText(filePathIso, isoEncrypted);
                        }
                    }

                    if (photoFingerData == null)
                    {
                        photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = unitId,
                            CreatedByUnit = unitCode,
                            FileJariISO = isoEncrypted,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            TypeFinger = enroll.KtpTypeJariKanan,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        });
                    }
                    else
                    {
                        //photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        //{
                        //    CreatedById = photoFingerData.CreatedById,
                        //    CreatedByNpp = photoFingerData.CreatedByNpp,
                        //    CreatedByUid = photoFingerData.CreatedByUid,
                        //    CreatedByUnit = photoFingerData.CreatedByUnit,
                        //    CreatedByUnitId = photoFingerData.CreatedByUnitId,
                        //    CreatedTime = photoFingerData.CreatedTime,
                        //    //FileJari = photoFingerData.FileJari,
                        //    FileJariISO = photoFingerData.FileJariISO,
                        //    FileName = photoFingerData.FileName,
                        //    FileNameISO = photoFingerData.FileNameISO,
                        //    Nik = photoFingerData.Nik,
                        //    PathFile = photoFingerData.PathFile,
                        //    PathFileISO = photoFingerData.PathFileISO,
                        //    TypeFinger = photoFingerData.TypeFinger
                        //});

                        //exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        //{
                        //    Id = photoFingerData.Id,
                        //    CreatedById = photoFingerData.CreatedById,
                        //    IsActive = photoFingerData.IsActive,
                        //    IsDeleted = photoFingerData.IsDeleted,
                        //    Nik = photoFingerData.Nik,
                        //    PathFile = photoFingerData.PathFile,//
                        //    PathFileISO = photoFingerData.PathFileISO,//
                        //    CreatedByNpp = photoFingerData.CreatedByNpp,
                        //    CreatedByUID = photoFingerData.CreatedByUid,
                        //    CreatedTime = photoFingerData.CreatedTime,
                        //    CreatedByUnit = photoFingerData.CreatedByUnit,
                        //    CreatedByUnitId = photoFingerData.CreatedByUnitId,
                        //    FileName = photoFingerData.FileName,//
                        //    FileNameISO = photoFingerData.FileNameISO,//
                        //    FileJariISO = photoFingerData.FileJariISO,
                        //    TypeFinger = photoFingerData.TypeFinger,
                        //    UpdatedById = photoFingerData.UpdatedById,
                        //    UpdatedByNpp = photoFingerData.UpdatedByNpp,
                        //    UpdatedByUID = photoFingerData.UpdatedByUid,
                        //    UpdatedByUnit = photoFingerData.UpdatedByUnit,
                        //    UpdatedTime = photoFingerData.UpdatedTime,
                        //    NoPengajuan = PengajuanID
                        //});

                        photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = unitId,
                            CreatedByUnit = unitCode,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            FileJariISO = isoEncrypted,
                            TypeFinger = enroll.KtpTypeJariKiri,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        });
                    }

                    if (isEmployee)
                    {
                        if (photoFingerDataEmployee == null)
                        {
                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = Id,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                PathFileISO = filePathIso,
                                CreatedByNpp = npp,
                                CreatedByUID = enroll.UID,
                                CreatedTime = DateTime.Now,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUID = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = unitId,
                                CreatedByUnit = unitCode,
                                FileJariISO = isoEncrypted,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKiri,
                                IsApprove = false,
                                NoPengajuan = PengajuanID
                            });
                        }
                        else
                        {
                            //photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            //{
                            //    CreatedById = photoFingerDataEmployee.CreatedById,
                            //    CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                            //    CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                            //    CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                            //    CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                            //    CreatedTime = photoFingerDataEmployee.CreatedTime,
                            //    FileJariISO = photoFingerDataEmployee.FileJariISO,
                            //    FileName = photoFingerDataEmployee.FileName,
                            //    FileNameISO = photoFingerDataEmployee.FileNameISO,
                            //    Nik = photoFingerDataEmployee.Nik,
                            //    PathFile = photoFingerDataEmployee.PathFile,
                            //    PathFileISO = photoFingerDataEmployee.PathFileISO,
                            //    TypeFinger = photoFingerDataEmployee.TypeFinger
                            //});

                            //exPhotoFingerEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            //{
                            //    CreatedById = photoFingerDataEmployee.CreatedById,
                            //    IsActive = photoFingerDataEmployee.IsActive,
                            //    IsDeleted = photoFingerDataEmployee.IsDeleted,
                            //    Nik = photoFingerDataEmployee.Nik,
                            //    PathFile = photoFingerDataEmployee.PathFile,
                            //    PathFileISO = photoFingerDataEmployee.PathFileISO,
                            //    CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                            //    CreatedByUID = photoFingerDataEmployee.CreatedByUid,
                            //    CreatedTime = photoFingerDataEmployee.CreatedTime,
                            //    UpdatedById = photoFingerDataEmployee.UpdatedById,
                            //    UpdatedByNpp = photoFingerDataEmployee.UpdatedByNpp,
                            //    UpdatedByUID = photoFingerDataEmployee.UpdatedByUid,
                            //    UpdatedByUnit = photoFingerDataEmployee.UpdatedByUnit,
                            //    CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                            //    CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                            //    FileJariISO = photoFingerDataEmployee.FileJariISO,
                            //    UpdatedTime = photoFingerDataEmployee.UpdatedTime,
                            //    FileName = photoFingerDataEmployee.FileName,
                            //    FileNameISO = photoFingerDataEmployee.FileNameISO,
                            //    TypeFinger = photoFingerDataEmployee.TypeFinger

                            //});
                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                PathFileISO = filePathIso,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUID = photoFingerDataEmployee.CreatedByUid,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUID = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                FileJariISO = isoEncrypted,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKiri,
                                IsApprove = false,
                                NoPengajuan = PengajuanID
                            });
                        }
                    }
                }
                else
                {
                    #region get data if no payload but we have to replace all data with no data
                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                    if (photoFingerData != null)
                    {
                        exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = photoFingerData.IsActive,
                            IsDeleted = photoFingerData.IsDeleted,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            PathFileISO = photoFingerData.PathFileISO,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUID = photoFingerData.CreatedByUid,
                            CreatedTime = photoFingerData.CreatedTime,
                            UpdatedById = photoFingerData.UpdatedById,
                            UpdatedByNpp = photoFingerData.UpdatedByNpp,
                            UpdatedByUID = photoFingerData.UpdatedByUid,
                            UpdatedByUnit = photoFingerData.UpdatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            FileJariISO = photoFingerData.FileJariISO,
                            UpdatedTime = photoFingerData.UpdatedTime,
                            FileName = photoFingerData.FileName,
                            FileNameISO = photoFingerData.FileNameISO,
                            TypeFinger = photoFingerData.TypeFinger

                        });

                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUid,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            FileName = photoFingerData.FileName,
                            FileNameISO = photoFingerData.FileNameISO,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            TypeFinger = photoFingerData.TypeFinger
                        });
                    }
                    if (isEmployee)
                    {
                        var photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                        if (photoFingerDataEmployee != null)
                        {
                            //exPhotoFingerEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            //{
                            //    CreatedById = photoFingerDataEmployee.CreatedById,
                            //    IsActive = photoFingerDataEmployee.IsActive,
                            //    IsDeleted = photoFingerDataEmployee.IsDeleted,
                            //    Nik = photoFingerDataEmployee.Nik,
                            //    PathFile = photoFingerDataEmployee.PathFile,
                            //    PathFileISO = photoFingerDataEmployee.PathFileISO,
                            //    CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                            //    CreatedByUID = photoFingerDataEmployee.CreatedByUid,
                            //    CreatedTime = photoFingerDataEmployee.CreatedTime,
                            //    UpdatedById = photoFingerDataEmployee.UpdatedById,
                            //    UpdatedByNpp = photoFingerDataEmployee.UpdatedByNpp,
                            //    UpdatedByUID = photoFingerDataEmployee.UpdatedByUid,
                            //    UpdatedByUnit = photoFingerDataEmployee.UpdatedByUnit,
                            //    CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                            //    CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                            //    FileJariISO = photoFingerDataEmployee.FileJariISO,
                            //    UpdatedTime = photoFingerDataEmployee.UpdatedTime,
                            //    FileName = photoFingerDataEmployee.FileName,
                            //    FileNameISO = photoFingerDataEmployee.FileNameISO,
                            //    TypeFinger = photoFingerDataEmployee.TypeFinger

                            //});

                            //photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            //{
                            //    CreatedById = photoFingerDataEmployee.CreatedById,
                            //    CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                            //    CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                            //    CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                            //    CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                            //    CreatedTime = photoFingerDataEmployee.CreatedTime,
                            //    //FileJari = photoFingerDataEmployee.FileJari,
                            //    FileName = photoFingerDataEmployee.FileName,
                            //    FileNameISO = photoFingerDataEmployee.FileNameISO,
                            //    Nik = photoFingerDataEmployee.Nik,
                            //    PathFile = photoFingerDataEmployee.PathFile,
                            //    PathFileISO = photoFingerDataEmployee.PathFileISO,
                            //    TypeFinger = photoFingerDataEmployee.TypeFinger
                            //});
                        }
                    }
                    #endregion

                    stringPerubahan = stringPerubahan + "Request Payload Finger Kanan Tidak Ditemukan" + " <br/>";
                }
                #endregion

                var inboxTemp = new Tbl_Inbox_Enrollment_Temp()
                {
                    CreatedById = Id,
                    CreatedByNpp = npp,
                    CreatedByUnitCode = unitCode,
                    CreatedByUnitId = unitId,
                    CreatedTime = DateTime.Now,
                    ApprovedStatus = 1,
                    Status = 1,
                    NoPengajuan = PengajuanID,
                    ApprovedByEmployeeId = enroll.ApprovedByEmployeeId,
                    ApprovedByEmployeeId2 = enroll.ApprovedByEmployeeId2

                };

                var inboxTempDetail = new Tbl_Inbox_Enrollment_Temp_Detail()
                {
                    Notes = enroll.Notes,
                    SubmitById = Id,
                    SubmitByNpp = npp,
                    SubmitedByUnitCode = unitCode,
                    SubmitedByUnitId = unitId,
                    CreatedTime = DateTime.Now,
                    ApprovedStatus = 1,
                    Status = 1,
                    NoPengajuan = PengajuanID
                };

                var mappingIKD = new Tbl_Enrollment_IKD()
                {
                    NIK = enroll.KtpNIK,
                    CreatedById = Id,
                    CreatedByNpp = npp,
                    CreatedByUnitId = unitId,
                    CreatedTime = DateTime.Now
                };

                var (status, msg) = await _enrollmentKTPRepository.InsertEnrollFlowNoMatchingIKD(mappingIKD, dataDemografis, logDemografi, photoKtp, photoKtpLog, photoSignature, photoSignatureLog,
                    photoCam, photoCamLog, photoFingers, photoFingerLogs, exPhotoKtp, exPhotoSignature, exPhotoCam, exPhotoFinger, dataNpp, dataReaderLog, photoFingersEmployee, exPhotoFingerEmployee, inboxTemp, inboxTempDetail);

                #region Logging Reader Activity
                _ = _alatReaderRepository.CreateLogActivity2(dataReaderActivityLog);
                _ = _alatReaderRepository.CreateAlatReaderLog(dataReaderLog);
                #endregion

                if (status)
                {
                    return (_SuccessMessageConfig.NasabahSuksesUpdate, (int)ServiceResponseStatus.SUKSES, cekKTP.CIF);
                }
                else
                {
                    return (_ErrorMessageConfig.DemografiGagalEnroll, (int)ServiceResponseStatus.ERROR, msg + " " + stringPerubahan);
                }
            }
            else
            {

                var cekKTPTemp = await _profileRepository.GetDataDemografisTemp(enroll.KtpNIK)
                .ConfigureAwait(false);

                if (cekKTPTemp == null) return (_ErrorMessageConfig.DemografiTidakDitemukan, (int)ServiceResponseStatus.Data_Empty, "");


                #region update demografi
                var logDemografi = new Tbl_DataKTP_Demografis_Log
                {
                    Agama = cekKTPTemp.Agama,
                    Alamat = cekKTPTemp.Alamat,
                    AlamatGoogle = cekKTPTemp.AlamatGoogle,
                    AlamatLengkap = cekKTPTemp.AlamatLengkap,
                    CreatedById = cekKTPTemp.CreatedById,
                    CreatedByUID = cekKTPTemp.CreatedByUID,
                    CreatedByUnitId = cekKTPTemp.CreatedByUnitId,
                    CreatedTime = cekKTPTemp.CreatedTime,
                    Desa = cekKTPTemp.Desa,
                    GolonganDarah = cekKTPTemp.GolonganDarah,
                    JenisKelamin = cekKTPTemp.JenisKelamin,
                    Kecamatan = cekKTPTemp.Kecamatan,
                    Kelurahan = cekKTPTemp.Kelurahan,
                    Kewarganegaraan = cekKTPTemp.Kewarganegaraan,
                    KodePos = cekKTPTemp.KodePos,
                    Kota = cekKTPTemp.Kota,
                    Latitude = cekKTPTemp.Latitude,
                    Longitude = cekKTPTemp.Longitude,
                    MasaBerlaku = cekKTPTemp.MasaBerlaku,
                    Nama = cekKTPTemp.Nama,
                    NIK = cekKTPTemp.NIK,
                    Pekerjaan = cekKTPTemp.Pekerjaan,
                    Provinsi = cekKTPTemp.Provinsi,
                    RT = cekKTPTemp.RT,
                    RW = cekKTPTemp.RW,
                    StatusPerkawinan = cekKTPTemp.StatusPerkawinan,
                    TanggalLahir = cekKTPTemp.TanggalLahir,
                    TempatLahir = cekKTPTemp.TempatLahir,
                    CIF = cekKTPTemp.CIF,
                    CreatedByNpp = cekKTPTemp.CreatedByNpp
                };

                var stringPerubahan = "";

                if (cekKTPTemp.Nama != enroll.KtpNama)
                {
                    stringPerubahan = stringPerubahan + "NAMA : " + cekKTPTemp.Nama + " -> " + enroll.KtpNama + " <br/>";
                    cekKTPTemp.Nama = enroll.KtpNama;
                }

                if (cekKTPTemp.TempatLahir != enroll.KtpTempatLahir)
                {
                    stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTPTemp.TempatLahir + " -> " + enroll.KtpTempatLahir + " <br/>";
                    cekKTPTemp.TempatLahir = enroll.KtpTempatLahir;
                }

                if (enroll.KtpTanggalLahir != null)
                {
                    if (cekKTPTemp.TempatLahir != enroll.KtpTempatLahir)
                    {
                        stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTPTemp.TanggalLahir + " -> " + enroll.KtpTanggalLahir + " <br/>";
                        cekKTPTemp.TanggalLahir = DateTime.ParseExact(enroll.KtpTanggalLahir, "dd-MM-yyyy", CultureInfo.InvariantCulture);
                    }
                }

                if (cekKTPTemp.JenisKelamin != enroll.KtpJanisKelamin)
                {
                    stringPerubahan = stringPerubahan + "JENIS KELAMIN : " + cekKTPTemp.JenisKelamin + " -> " + enroll.KtpJanisKelamin + " <br/>";
                    cekKTPTemp.JenisKelamin = enroll.KtpJanisKelamin;
                }

                if (cekKTPTemp.GolonganDarah != enroll.KtpGolonganDarah)
                {
                    stringPerubahan = stringPerubahan + "GOLONGAN DARAH : " + cekKTPTemp.GolonganDarah + " -> " + enroll.KtpGolonganDarah + " <br/>";
                    cekKTPTemp.GolonganDarah = enroll.KtpGolonganDarah;
                }

                if (cekKTPTemp.Alamat != enroll.KtpAlamat)
                {
                    stringPerubahan = stringPerubahan + "ALAMAT : " + cekKTPTemp.Alamat + " -> " + enroll.KtpAlamat + " <br/>";
                    cekKTPTemp.Alamat = enroll.KtpAlamat;
                }

                if (cekKTPTemp.RT != enroll.KtpRT)
                {
                    stringPerubahan = stringPerubahan + "RT : " + cekKTPTemp.RT + " -> " + enroll.KtpRT + " <br/>";
                    cekKTPTemp.RT = enroll.KtpRT;
                }

                if (cekKTPTemp.RW != enroll.KtpRW)
                {
                    stringPerubahan = stringPerubahan + "RW : " + cekKTPTemp.RW + " -> " + enroll.KtpRW + " <br/>";
                    cekKTPTemp.RW = enroll.KtpRW;
                }

                if (cekKTPTemp.Kelurahan != enroll.KtpKelurahan)
                {
                    stringPerubahan = stringPerubahan + "KELURAHAN : " + cekKTPTemp.Kelurahan + " -> " + enroll.KtpKelurahan + " <br/>";
                    cekKTPTemp.Kelurahan = enroll.KtpKelurahan;
                }

                if (cekKTPTemp.Kecamatan != enroll.KtpKecamatan)
                {
                    stringPerubahan = stringPerubahan + "KECAMATAN : " + cekKTPTemp.Kecamatan + " -> " + enroll.KtpKecamatan + " <br/>";
                    cekKTPTemp.Kecamatan = enroll.KtpKecamatan;
                }

                if (cekKTPTemp.Kota != enroll.KtpKota)
                {
                    stringPerubahan = stringPerubahan + "KOTA/KABUPATEN : " + cekKTPTemp.Kota + " -> " + enroll.KtpKota + " <br/>";
                    cekKTPTemp.Kota = enroll.KtpKota;
                }

                if (cekKTPTemp.Provinsi != enroll.KtpProvinsi)
                {
                    stringPerubahan = stringPerubahan + "PROVINSI  : " + cekKTPTemp.Provinsi + " -> " + enroll.KtpProvinsi + " <br/>";
                    cekKTPTemp.Provinsi = enroll.KtpProvinsi;
                }

                if (cekKTPTemp.Agama != enroll.KtpAgama)
                {
                    stringPerubahan = stringPerubahan + "AGAMA  : " + cekKTPTemp.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTPTemp.Agama = enroll.KtpAgama;
                }

                if (cekKTPTemp.StatusPerkawinan != enroll.KtpStatusPerkawinan)
                {
                    stringPerubahan = stringPerubahan + "STATUS PERKAWINAN  : " + cekKTPTemp.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTPTemp.StatusPerkawinan = enroll.KtpStatusPerkawinan;
                }

                if (cekKTPTemp.Pekerjaan != enroll.KtpPekerjaan)
                {
                    stringPerubahan = stringPerubahan + "PEKERJAAN  : " + cekKTPTemp.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTPTemp.Pekerjaan = enroll.KtpPekerjaan;
                }

                if (cekKTPTemp.Kewarganegaraan != enroll.KtpKewarganegaraan)
                {
                    stringPerubahan = stringPerubahan + "KEWARGANEGARAAN  : " + cekKTPTemp.Kewarganegaraan + " -> " + enroll.KtpKewarganegaraan + " <br/>";
                    cekKTPTemp.Kewarganegaraan = enroll.KtpKewarganegaraan;
                }
                if (cekKTPTemp.MasaBerlaku != enroll.KtpMasaBerlaku)
                {
                    stringPerubahan = stringPerubahan + "MASA BERLAKU  : " + cekKTPTemp.MasaBerlaku + " -> " + enroll.KtpMasaBerlaku + " <br/>";
                    cekKTPTemp.MasaBerlaku = enroll.KtpMasaBerlaku;
                }
                if (cekKTPTemp.CIF == null)
                {
                    var cifData = new ApiSOAResponse();
                    #region Hit SOA And Loggging it
                    if (isHitSOA == true)
                    {
                        cifData = await _cifService.GetSOAByCif(ReqSoa)
                        .ConfigureAwait(false);

                        var _status = 0;
                        if (cifData.cif != null)
                        {
                            _status = 1;
                        }

                        var _log = new Tbl_ThirdPartyLog
                        {
                            FeatureName = "ReSubmitEnrollmentFingerEncryptedNoMatching",
                            HostUrl = ReqSoa.host,
                            Request = Newtonsoft.Json.JsonConvert.SerializeObject(ReqSoa),
                            Status = _status,
                            Response = Newtonsoft.Json.JsonConvert.SerializeObject(cifData),
                            CreatedDate = System.DateTime.Now,
                            CreatedBy = npp
                        };

                        _ = _enrollmentKTPRepository.CreateThirdPartyLog(_log);
                    }
                    else
                    {
                        try
                        {
                            var res = await _cifService.GetCIF(new NikDto { Nik = enroll.KtpNIK },
                            new NikDtoUrl { baseUrl = ReqSoa.baseUrlNonSoa, endpoint = ReqSoa.UrlEndPointNonSoa });
                            if (res.Data == null)
                            {
                                cifData.cif = null;
                            }
                            else
                            {
                                cifData.cif = res.Data.Cif;
                            };
                        }
                        catch (Exception ex)
                        {
                            cifData.cif = null;
                        }
                    }
                    #endregion

                    if (!String.IsNullOrEmpty(cifData.cif))
                    {
                        cifData.cif = cifData.cif.Trim();
                    }

                    stringPerubahan = stringPerubahan + "CIF  : " + cekKTPTemp.CIF + " -> " + cifData.cif + " <br/>";
                    cekKTPTemp.CIF = cifData.cif;
                }

                cekKTPTemp.UpdatedTime = DateTime.Now;
                cekKTPTemp.UpdatedById = Id;
                cekKTPTemp.UpdatedByUID = enroll.UID;
                cekKTPTemp.UpdatedByUnitCode = unitCode;
                cekKTPTemp.UpdatedByUnitId = unitId;
                cekKTPTemp.UpdatedByNpp = npp;

                dataDemografis = new Tbl_DataKTP_Demografis_Temp
                {
                    Agama = cekKTPTemp.Agama,
                    Alamat = cekKTPTemp.Alamat,
                    AlamatGoogle = cekKTPTemp.AlamatGoogle,
                    AlamatLengkap = cekKTPTemp.AlamatLengkap,
                    CIF = cekKTPTemp.CIF,
                    NIK = cekKTPTemp.NIK,
                    CreatedById = Id,
                    IsActive = true,
                    IsDeleted = false,
                    JenisKelamin = cekKTPTemp.JenisKelamin,
                    Kecamatan = cekKTPTemp.Kecamatan,
                    Kelurahan = cekKTPTemp.Kelurahan,
                    CreatedByUID = enroll.UID,
                    CreatedTime = DateTime.Now,
                    GolonganDarah = cekKTPTemp.GolonganDarah,
                    Kewarganegaraan = cekKTPTemp.Kewarganegaraan,
                    KodePos = cekKTPTemp.KodePos,
                    Kota = cekKTPTemp.Kota,
                    Latitude = cekKTPTemp.Latitude,
                    Longitude = cekKTPTemp.Longitude,
                    MasaBerlaku = cekKTPTemp.MasaBerlaku,
                    Nama = cekKTPTemp.Nama,
                    Pekerjaan = cekKTPTemp.Pekerjaan,
                    Provinsi = cekKTPTemp.Provinsi,
                    RT = cekKTPTemp.RT,
                    RW = cekKTPTemp.RW,
                    StatusPerkawinan = cekKTPTemp.StatusPerkawinan,
                    TanggalLahir = string.IsNullOrWhiteSpace(cekKTPTemp.TanggalLahir.ToString()) ? null : DateTime.ParseExact(cekKTPTemp.TanggalLahir.ToString(), "dd-MM-yyyy", CultureInfo.InvariantCulture),
                    TempatLahir = cekKTPTemp.TempatLahir,
                    CreatedByNpp = npp,
                    CreatedByUnitCode = unitCode,
                    CreatedByUnitId = unitId,
                    IsVerified = false,
                    IsNasabahTemp = string.IsNullOrWhiteSpace(cekKTPTemp.CIF),
                    IsApprove = false,
                    NoPengajuan = PengajuanID,
                    Id = cekKTPTemp.Id
                };

                if (string.IsNullOrWhiteSpace(stringPerubahan))
                {
                    stringPerubahan = stringPerubahan + "Data Demografi tidak ada perubahan" + " <br/>";
                }
                #endregion

                if (isEmployee)
                {
                    var _mappingData = await _enrollmentKTPRepository.MappingNppNikByNik(enroll.KtpNIK);
                    if (_mappingData == null)
                    {
                        dataNpp = new Tbl_Mapping_Pegawai_KTP
                        {
                            CreatedById = Id,
                            NIK = enroll.KtpNIK,
                            Npp = _empData.Npp,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            CreatedByUnit = unitCode,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            UpdatedTime = DateTime.Now,
                        };
                    }
                    else
                    {
                        dataNpp = _mappingData;
                        dataNpp.UpdatedByNpp = npp;
                        dataNpp.UpdatedByUID = enroll.UID;
                        dataNpp.UpdatedByUnit = unitCode;
                        dataNpp.UpdatedTime = DateTime.Now;
                    }
                }

                var sysPathFolder = await _sysParameterRepository.GetPathFolder("PathFolderData");
                string pathFolder = sysPathFolder.Value;

                var photoKtpLog = new Tbl_DataKTP_Photo_Log();
                var photoKTPData = await _profileRepository.GetPhotoKtpTemp(enroll.KtpNIK)
                        .ConfigureAwait(false);
                var exPhotoKtp = photoKTPData;

                //var exPhotoKtp = new Tbl_DataKTP_Photo_Temp();

                var photoKtp = new Tbl_DataKTP_Photo_Temp();

                #region update Photo KTP
                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoKTP))
                {
                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpPhotoKTP);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderPhoto")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderFoto = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "Foto_" + enroll.KtpNIK + "_" + JamServer + ".jpg";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderFoto, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderFoto))
                        {
                            Directory.CreateDirectory(subPathFolderFoto);
                        }

                        filePath = subPathFolderFoto + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoKTPData == null)
                    {
                        photoKtp = new Tbl_DataKTP_Photo_Temp
                        {
                            PathFile = filePath,
                            Nik = enroll.KtpNIK,
                            FileName = fileName,
                            IsActive = true,
                            IsDeleted = false,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            UpdatedTime = DateTime.Now,
                            CreatedById = Id,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedByUnit = unitCode,
                            CreatedTime = DateTime.Now,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        };
                    }
                    else
                    {
                        photoKtpLog.CreatedById = photoKTPData.CreatedById;
                        photoKtpLog.CreatedByNpp = photoKTPData.CreatedByNpp;
                        photoKtpLog.CreatedByUid = photoKTPData.CreatedByUID;
                        photoKtpLog.CreatedByUnit = photoKTPData.CreatedByUnit;
                        photoKtpLog.CreatedTime = photoKTPData.CreatedTime;
                        photoKtpLog.FileName = photoKTPData.FileName;
                        photoKtpLog.Nik = photoKTPData.Nik;
                        photoKtpLog.PathFile = photoKTPData.PathFile;

                        photoKTPData.PathFile = filePath;
                        photoKTPData.Nik = enroll.KtpNIK;
                        photoKTPData.FileName = fileName;
                        photoKTPData.IsActive = true;
                        photoKTPData.IsDeleted = false;
                        photoKTPData.UpdatedById = Id;
                        photoKTPData.UpdatedByNpp = npp;
                        photoKTPData.UpdatedByUID = enroll.UID;
                        photoKTPData.UpdatedByUnit = unitCode;
                        photoKTPData.UpdatedTime = DateTime.Now;
                        photoKTPData.NoPengajuan = PengajuanID;
                        photoKTPData.IsApprove = false;
                    }
                }
                else
                {
                    stringPerubahan = stringPerubahan + "Request Payload Photo Tidak Ditemukan" + " <br/>";
                }
                #endregion

                var photoSignatureLog = new Tbl_DataKTP_Signature_Log();
                var photoSignatureData = await _profileRepository.GetPhotoSignatureTemp(enroll.KtpNIK)
                        .ConfigureAwait(false);
                var exphotoSignatureData = photoSignatureData;

                //var exPhotoSignature = new Tbl_DataKTP_Signature_Temp();
                var photoSignature = new Tbl_DataKTP_Signature_Temp();

                #region update signature
                if (!string.IsNullOrWhiteSpace(enroll.KtpSignature))
                {
                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpSignature);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderSignature")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderSignature = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "Signature_" + enroll.KtpNIK + "_" + JamServer + ".jpg";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderSignature, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderSignature))
                        {
                            Directory.CreateDirectory(subPathFolderSignature);
                        }

                        filePath = subPathFolderSignature + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoSignatureData == null)
                    {
                        photoSignature = new Tbl_DataKTP_Signature_Temp
                        {
                            CreatedById = Id,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            CreatedByUnit = unitCode,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedTime = DateTime.Now,
                            UpdatedByUnit = unitCode,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            FileName = fileName,
                            PathFile = filePath,
                            NoPengajuan = PengajuanID,
                            IsApprove = false
                        };
                    }
                    else
                    {
                        photoSignatureLog.CreatedById = photoSignatureData.CreatedById;
                        photoSignatureLog.CreatedByNpp = photoSignatureData.CreatedByNpp;
                        photoSignatureLog.CreatedByUid = photoSignatureData.CreatedByUID;
                        photoSignatureLog.CreatedByUnit = photoSignatureData.CreatedByUnit;
                        photoSignatureLog.CreatedTime = photoSignatureData.CreatedTime;
                        photoSignatureLog.FileName = photoSignatureData.FileName;
                        photoSignatureLog.Nik = photoSignatureData.Nik;
                        photoSignatureLog.PathFile = photoSignatureData.PathFile;

                        photoSignatureData.UpdatedById = Id;
                        photoSignatureData.UpdatedByNpp = npp;
                        photoSignatureData.UpdatedByUID = enroll.UID;
                        photoSignatureData.UpdatedTime = DateTime.Now;
                        photoSignatureData.IsActive = true;
                        photoSignatureData.IsDeleted = false;
                        photoSignatureData.Nik = enroll.KtpNIK;
                        photoSignatureData.FileName = fileName;
                        photoSignatureData.PathFile = filePath;
                        photoSignatureData.NoPengajuan = PengajuanID;
                        photoSignatureData.IsApprove = false;

                    }
                }
                else
                {
                    stringPerubahan = stringPerubahan + "Request Payload Signature Tidak Ditemukan" + " <br/>";
                }
                #endregion

                var photoCamLog = new Tbl_DataKTP_PhotoCam_Log();
                var photoCamData = await _profileRepository.GetPhotoCamTemp(enroll.KtpNIK)
                        .ConfigureAwait(false);
                var exphotoCamData = photoCamData;

                //var exPhotoCam = new Tbl_DataKTP_PhotoCam_Temp();
                var photoCam = new Tbl_DataKTP_PhotoCam_Temp();
                #region update photo cam
                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoCam))
                {
                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpPhotoCam);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderWebcam")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string SubPathFolderPhotoCam = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "PhotoCam_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(SubPathFolderPhotoCam, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(SubPathFolderPhotoCam))
                        {
                            Directory.CreateDirectory(SubPathFolderPhotoCam);
                        }

                        filePath = SubPathFolderPhotoCam + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoCamData == null)
                    {
                        photoCam = new Tbl_DataKTP_PhotoCam_Temp
                        {
                            PathFile = filePath,
                            Nik = enroll.KtpNIK,
                            FileName = fileName,
                            CreatedTime = DateTime.Now,
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedByUnit = unitCode,
                            IsApprove = false,
                            NoPengajuan = PengajuanID,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedTime = DateTime.Now,
                            UpdatedByUnit = unitCode
                        };

                    }
                    else
                    {
                        photoCamLog.CreatedById = photoCamData.CreatedById;
                        photoCamLog.CreatedByNpp = photoCamData.CreatedByNpp;
                        photoCamLog.CreatedByUid = photoCamData.CreatedByUID;
                        photoCamLog.CreatedByUnit = photoCamData.CreatedByUnit;
                        photoCamLog.CreatedTime = photoCamData.CreatedTime;
                        photoCamLog.FileName = photoCamData.FileName;
                        photoCamLog.Nik = photoCamData.Nik;
                        photoCamLog.PathFile = photoCamData.PathFile;

                        photoCamData.PathFile = filePath;
                        photoCamData.Nik = enroll.KtpNIK;
                        photoCamData.FileName = fileName;
                        photoCamData.IsActive = true;
                        photoCamData.IsDeleted = false;
                        photoCamData.UpdatedById = Id;
                        photoCamData.UpdatedByNpp = npp;
                        photoCamData.UpdatedByUID = enroll.UID;
                        photoCamData.UpdatedTime = DateTime.Now;
                        photoCamData.NoPengajuan = PengajuanID;
                        photoCamData.IsApprove = false;

                    }
                }
                else
                {
                    stringPerubahan = stringPerubahan + "Request Payload Photo Cam Tidak Ditemukan" + " <br/>";
                }
                #endregion

                #region finger
                var exPhotoFinger = new List<Tbl_DataKTP_Finger_Temp>();

                var exPhotoFingerEmployee = new List<Tbl_DataKTP_Finger_Employee_Temp>();

                var photoFingerLogs = new List<Tbl_DataKTP_Finger_Log>();

                var photoFingers = new List<Tbl_DataKTP_Finger_Temp>();

                var photoFingersEmployee = new List<Tbl_DataKTP_Finger_Employee_Temp>();

                var photoFingersEmployeeLogs = new List<Tbl_DataKTP_Finger_Employee_Log>();

                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKanan))
                {

                    var photoFingerData = await _profileRepository.GetPhotoFingerTemp(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);

                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee_Temp();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployeeTemp(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                    }

                    string imageEncrypted = enroll.KtpFingerKanan.Encrypt(Phrase.FileEncryption);

                    string filePath = "";
                    string filePathIso = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKanan.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";
                    string fileNameIso = "";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    string isoEncrypted = "";

                    if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKananIso))
                    {
                        isoEncrypted = enroll.KtpFingerKananIso.Encrypt(Phrase.FileEncryption);
                        fileNameIso = "PhotoFingerISO_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                        if (_sftpConfig.IsActive)
                        {
                            using var stream = new MemoryStream(Encoding.ASCII.GetBytes(isoEncrypted));

                            (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileNameIso, _sftpConfig.Host,
                                _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                            filePathIso = fPath;
                        }
                        else
                        {
                            if (!Directory.Exists(subPathFolderPhotoFinger))
                            {
                                Directory.CreateDirectory(subPathFolderPhotoFinger);
                            }

                            filePathIso = subPathFolderPhotoFinger + fileNameIso;
                            File.WriteAllText(filePathIso, isoEncrypted);
                        }
                    }

                    if (photoFingerData == null)
                    {
                        photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = unitId,
                            CreatedByUnit = unitCode,
                            FileJariISO = isoEncrypted,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            TypeFinger = enroll.KtpTypeJariKanan,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        });
                    }
                    else
                    {
                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUID,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            //FileJari = photoFingerData.FileJari,
                            FileJariISO = photoFingerData.FileJariISO,
                            FileName = photoFingerData.FileName,
                            FileNameISO = photoFingerData.FileNameISO,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            PathFileISO = photoFingerData.PathFileISO,
                            TypeFinger = photoFingerData.TypeFinger
                        });

                        exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            Id = photoFingerData.Id,
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = photoFingerData.IsActive,
                            IsDeleted = photoFingerData.IsDeleted,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,//
                            PathFileISO = photoFingerData.PathFileISO,//
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUID = photoFingerData.CreatedByUID,
                            CreatedTime = DateTime.Now,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            FileName = photoFingerData.FileName,//
                            FileNameISO = photoFingerData.FileNameISO,//
                            FileJariISO = photoFingerData.FileJariISO,
                            TypeFinger = photoFingerData.TypeFinger,
                            UpdatedById = photoFingerData.UpdatedById,
                            UpdatedByNpp = photoFingerData.UpdatedByNpp,
                            UpdatedByUID = photoFingerData.UpdatedByUID,
                            UpdatedByUnit = photoFingerData.UpdatedByUnit,
                            UpdatedTime = photoFingerData.UpdatedTime,
                            NoPengajuan = PengajuanID
                        });

                        photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = unitId,
                            CreatedByUnit = unitCode,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            FileJariISO = isoEncrypted,
                            TypeFinger = enroll.KtpTypeJariKanan,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        });
                    }

                    if (isEmployee)
                    {
                        if (photoFingerDataEmployee == null)
                        {
                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = Id,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                PathFileISO = filePathIso,
                                CreatedByNpp = npp,
                                CreatedByUID = enroll.UID,
                                CreatedTime = DateTime.Now,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUID = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = unitId,
                                CreatedByUnit = unitCode,
                                FileJariISO = isoEncrypted,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKanan,
                                IsApprove = false,
                                NoPengajuan = PengajuanID
                            });
                        }
                        else
                        {
                            photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUID,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                FileJariISO = photoFingerDataEmployee.FileJariISO,
                                FileName = photoFingerDataEmployee.FileName,
                                FileNameISO = photoFingerDataEmployee.FileNameISO,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                PathFileISO = photoFingerDataEmployee.PathFileISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger
                            });

                            exPhotoFingerEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = photoFingerDataEmployee.IsActive,
                                IsDeleted = photoFingerDataEmployee.IsDeleted,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                PathFileISO = photoFingerDataEmployee.PathFileISO,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUID = photoFingerDataEmployee.CreatedByUID,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = photoFingerDataEmployee.UpdatedById,
                                UpdatedByNpp = photoFingerDataEmployee.UpdatedByNpp,
                                UpdatedByUID = photoFingerDataEmployee.UpdatedByUID,
                                UpdatedByUnit = photoFingerDataEmployee.UpdatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                FileJariISO = photoFingerDataEmployee.FileJariISO,
                                UpdatedTime = photoFingerDataEmployee.UpdatedTime,
                                FileName = photoFingerDataEmployee.FileName,
                                FileNameISO = photoFingerDataEmployee.FileNameISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger

                            });
                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                PathFileISO = filePathIso,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUID = photoFingerDataEmployee.CreatedByUID,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUID = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                FileJariISO = isoEncrypted,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKanan,
                                IsApprove = false,
                                NoPengajuan = PengajuanID
                            });
                        }
                    }
                }
                else
                {
                    #region get data if no payload but we have to replace all data with no data
                    var photoFingerData = await _profileRepository.GetPhotoFingerTemp(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                    if (photoFingerData != null)
                    {
                        exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = photoFingerData.IsActive,
                            IsDeleted = photoFingerData.IsDeleted,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            PathFileISO = photoFingerData.PathFileISO,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUID = photoFingerData.CreatedByUID,
                            CreatedTime = photoFingerData.CreatedTime,
                            UpdatedById = photoFingerData.UpdatedById,
                            UpdatedByNpp = photoFingerData.UpdatedByNpp,
                            UpdatedByUID = photoFingerData.UpdatedByUID,
                            UpdatedByUnit = photoFingerData.UpdatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            FileJariISO = photoFingerData.FileJariISO,
                            UpdatedTime = photoFingerData.UpdatedTime,
                            FileName = photoFingerData.FileName,
                            FileNameISO = photoFingerData.FileNameISO,
                            TypeFinger = photoFingerData.TypeFinger

                        });

                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUID,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            FileName = photoFingerData.FileName,
                            FileNameISO = photoFingerData.FileNameISO,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            TypeFinger = photoFingerData.TypeFinger
                        });
                    }

                    if (isEmployee)
                    {
                        var photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployeeTemp(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                        if (photoFingerDataEmployee != null)
                        {
                            exPhotoFingerEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = photoFingerDataEmployee.IsActive,
                                IsDeleted = photoFingerDataEmployee.IsDeleted,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                PathFileISO = photoFingerDataEmployee.PathFileISO,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUID = photoFingerDataEmployee.CreatedByUID,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = photoFingerDataEmployee.UpdatedById,
                                UpdatedByNpp = photoFingerDataEmployee.UpdatedByNpp,
                                UpdatedByUID = photoFingerDataEmployee.UpdatedByUID,
                                UpdatedByUnit = photoFingerDataEmployee.UpdatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                FileJariISO = photoFingerDataEmployee.FileJariISO,
                                UpdatedTime = photoFingerDataEmployee.UpdatedTime,
                                FileName = photoFingerDataEmployee.FileName,
                                FileNameISO = photoFingerDataEmployee.FileNameISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger

                            });

                            photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUID,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                //FileJari = photoFingerDataEmployee.FileJari,
                                FileName = photoFingerDataEmployee.FileName,
                                FileNameISO = photoFingerDataEmployee.FileNameISO,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                PathFileISO = photoFingerDataEmployee.PathFileISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger
                            });
                        }
                    }
                    #endregion

                    stringPerubahan = stringPerubahan + "Request Payload Finger Kanan Tidak Ditemukan" + " <br/>";
                }

                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKiri))
                {
                    var photoFingerData = await _profileRepository.GetPhotoFingerTemp(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);

                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee_Temp();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployeeTemp(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                    }

                    string imageEncrypted = enroll.KtpFingerKiri.Encrypt(Phrase.FileEncryption);

                    string filePath = "";
                    string filePathIso = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKiri.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";
                    string fileNameIso = "";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    string isoEncrypted = "";

                    if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKiriIso))
                    {
                        isoEncrypted = enroll.KtpFingerKiriIso.Encrypt(Phrase.FileEncryption);
                        fileNameIso = "PhotoFingerISO_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                        if (_sftpConfig.IsActive)
                        {
                            using var stream = new MemoryStream(Encoding.ASCII.GetBytes(isoEncrypted));

                            (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileNameIso, _sftpConfig.Host,
                                _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                            filePathIso = fPath;
                        }
                        else
                        {
                            if (!Directory.Exists(subPathFolderPhotoFinger))
                            {
                                Directory.CreateDirectory(subPathFolderPhotoFinger);
                            }

                            filePathIso = subPathFolderPhotoFinger + fileNameIso;
                            File.WriteAllText(filePathIso, isoEncrypted);
                        }
                    }

                    if (photoFingerData == null)
                    {
                        photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = unitId,
                            CreatedByUnit = unitCode,
                            FileJariISO = isoEncrypted,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            TypeFinger = enroll.KtpTypeJariKanan,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        });
                    }
                    else
                    {
                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUID,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            //FileJari = photoFingerData.FileJari,
                            FileJariISO = photoFingerData.FileJariISO,
                            FileName = photoFingerData.FileName,
                            FileNameISO = photoFingerData.FileNameISO,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            PathFileISO = photoFingerData.PathFileISO,
                            TypeFinger = photoFingerData.TypeFinger
                        });

                        exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            Id = photoFingerData.Id,
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = photoFingerData.IsActive,
                            IsDeleted = photoFingerData.IsDeleted,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,//
                            PathFileISO = photoFingerData.PathFileISO,//
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUID = photoFingerData.CreatedByUID,
                            CreatedTime = photoFingerData.CreatedTime,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            FileName = photoFingerData.FileName,//
                            FileNameISO = photoFingerData.FileNameISO,//
                            FileJariISO = photoFingerData.FileJariISO,
                            TypeFinger = photoFingerData.TypeFinger,
                            UpdatedById = photoFingerData.UpdatedById,
                            UpdatedByNpp = photoFingerData.UpdatedByNpp,
                            UpdatedByUID = photoFingerData.UpdatedByUID,
                            UpdatedByUnit = photoFingerData.UpdatedByUnit,
                            UpdatedTime = photoFingerData.UpdatedTime,
                            NoPengajuan = PengajuanID
                        });

                        photoFingers.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            PathFileISO = filePathIso,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = unitId,
                            CreatedByUnit = unitCode,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            FileNameISO = fileNameIso,
                            FileJariISO = isoEncrypted,
                            TypeFinger = enroll.KtpTypeJariKiri,
                            IsApprove = false,
                            NoPengajuan = PengajuanID
                        });
                    }

                    if (isEmployee)
                    {
                        if (photoFingerDataEmployee == null)
                        {
                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = Id,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                PathFileISO = filePathIso,
                                CreatedByNpp = npp,
                                CreatedByUID = enroll.UID,
                                CreatedTime = DateTime.Now,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUID = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = unitId,
                                CreatedByUnit = unitCode,
                                FileJariISO = isoEncrypted,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKiri,
                                IsApprove = false,
                                NoPengajuan = PengajuanID
                            });
                        }
                        else
                        {
                            photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUID,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                FileJariISO = photoFingerDataEmployee.FileJariISO,
                                FileName = photoFingerDataEmployee.FileName,
                                FileNameISO = photoFingerDataEmployee.FileNameISO,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                PathFileISO = photoFingerDataEmployee.PathFileISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger
                            });

                            exPhotoFingerEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = photoFingerDataEmployee.IsActive,
                                IsDeleted = photoFingerDataEmployee.IsDeleted,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                PathFileISO = photoFingerDataEmployee.PathFileISO,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUID = photoFingerDataEmployee.CreatedByUID,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = photoFingerDataEmployee.UpdatedById,
                                UpdatedByNpp = photoFingerDataEmployee.UpdatedByNpp,
                                UpdatedByUID = photoFingerDataEmployee.UpdatedByUID,
                                UpdatedByUnit = photoFingerDataEmployee.UpdatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                FileJariISO = photoFingerDataEmployee.FileJariISO,
                                UpdatedTime = photoFingerDataEmployee.UpdatedTime,
                                FileName = photoFingerDataEmployee.FileName,
                                FileNameISO = photoFingerDataEmployee.FileNameISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger

                            });
                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                PathFileISO = filePathIso,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUID = photoFingerDataEmployee.CreatedByUID,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUID = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                FileJariISO = isoEncrypted,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKiri,
                                IsApprove = false,
                                NoPengajuan = PengajuanID
                            });
                        }
                    }
                }
                else
                {
                    #region get data if no payload but we have to replace all data with no data
                    var photoFingerData = await _profileRepository.GetPhotoFingerTemp(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                    if (photoFingerData != null)
                    {
                        exPhotoFinger.Add(new Tbl_DataKTP_Finger_Temp
                        {
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = photoFingerData.IsActive,
                            IsDeleted = photoFingerData.IsDeleted,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            PathFileISO = photoFingerData.PathFileISO,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUID = photoFingerData.CreatedByUID,
                            CreatedTime = photoFingerData.CreatedTime,
                            UpdatedById = photoFingerData.UpdatedById,
                            UpdatedByNpp = photoFingerData.UpdatedByNpp,
                            UpdatedByUID = photoFingerData.UpdatedByUID,
                            UpdatedByUnit = photoFingerData.UpdatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            FileJariISO = photoFingerData.FileJariISO,
                            UpdatedTime = photoFingerData.UpdatedTime,
                            FileName = photoFingerData.FileName,
                            FileNameISO = photoFingerData.FileNameISO,
                            TypeFinger = photoFingerData.TypeFinger

                        });

                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUID,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            FileName = photoFingerData.FileName,
                            FileNameISO = photoFingerData.FileNameISO,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            TypeFinger = photoFingerData.TypeFinger
                        });
                    }
                    if (isEmployee)
                    {
                        var photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployeeTemp(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                        if (photoFingerDataEmployee != null)
                        {
                            exPhotoFingerEmployee.Add(new Tbl_DataKTP_Finger_Employee_Temp
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = photoFingerDataEmployee.IsActive,
                                IsDeleted = photoFingerDataEmployee.IsDeleted,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                PathFileISO = photoFingerDataEmployee.PathFileISO,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUID = photoFingerDataEmployee.CreatedByUID,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = photoFingerDataEmployee.UpdatedById,
                                UpdatedByNpp = photoFingerDataEmployee.UpdatedByNpp,
                                UpdatedByUID = photoFingerDataEmployee.UpdatedByUID,
                                UpdatedByUnit = photoFingerDataEmployee.UpdatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                FileJariISO = photoFingerDataEmployee.FileJariISO,
                                UpdatedTime = photoFingerDataEmployee.UpdatedTime,
                                FileName = photoFingerDataEmployee.FileName,
                                FileNameISO = photoFingerDataEmployee.FileNameISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger

                            });

                            photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUID,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                //FileJari = photoFingerDataEmployee.FileJari,
                                FileName = photoFingerDataEmployee.FileName,
                                FileNameISO = photoFingerDataEmployee.FileNameISO,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                PathFileISO = photoFingerDataEmployee.PathFileISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger
                            });
                        }
                    }
                    #endregion

                    stringPerubahan = stringPerubahan + "Request Payload Finger Kanan Tidak Ditemukan" + " <br/>";
                }
                #endregion

                var inboxTemp = new Tbl_Inbox_Enrollment_Temp()
                {
                    CreatedById = Id,
                    CreatedByNpp = npp,
                    CreatedByUnitCode = unitCode,
                    CreatedByUnitId = unitId,
                    CreatedTime = DateTime.Now,
                    ApprovedStatus = 1,
                    Status = 1,
                    NoPengajuan = PengajuanID,
                    ApprovedByEmployeeId = enroll.ApprovedByEmployeeId,
                    ApprovedByEmployeeId2 = enroll.ApprovedByEmployeeId2

                };

                var inboxTempDetail = new Tbl_Inbox_Enrollment_Temp_Detail()
                {
                    Notes = enroll.Notes,
                    SubmitById = Id,
                    SubmitByNpp = npp,
                    SubmitedByUnitCode = unitCode,
                    SubmitedByUnitId = unitId,
                    CreatedTime = DateTime.Now,
                    ApprovedStatus = 1,
                    Status = 1,
                    NoPengajuan = PengajuanID
                };
                var mappingIKD = new Tbl_Enrollment_IKD()
                {
                    NIK = enroll.KtpNIK,
                    CreatedById = Id,
                    CreatedByNpp = npp,
                    CreatedByUnitId = unitId,
                    CreatedTime = DateTime.Now
                };
                var (status, msg) = await _enrollmentKTPRepository.InsertEnrollFlowNoMatchingIKD(mappingIKD, dataDemografis, logDemografi, photoKtp, photoKtpLog, photoSignature, photoSignatureLog,
                    photoCam, photoCamLog, photoFingers, photoFingerLogs, exPhotoKtp, exphotoSignatureData, exphotoCamData, exPhotoFinger, dataNpp, dataReaderLog, photoFingersEmployee, exPhotoFingerEmployee, inboxTemp, inboxTempDetail);

                #region Logging Reader Activity
                _ = _alatReaderRepository.CreateLogActivity2(dataReaderActivityLog);
                _ = _alatReaderRepository.CreateAlatReaderLog(dataReaderLog);
                #endregion

                if (status)
                {
                    return (_SuccessMessageConfig.NasabahSuksesUpdate, (int)ServiceResponseStatus.SUKSES, cekKTP.CIF);
                }
                else
                {
                    return (_ErrorMessageConfig.DemografiGagalEnroll, (int)ServiceResponseStatus.ERROR, msg + " " + stringPerubahan);
                }

            }
            #endregion
        }
        #endregion

        public async Task<(string msg, int code, string cif)> ReSubmitEnrollmentFingerEncryptedOnly(bool isHitSOA, ApiSOA ReqSoa, EnrollKTP enroll, int Id, string npp,
            string unitCode, int unitId)
        {
            #region check data is employee or not
            bool isEmployee = false;
            var _empData = await _enrollmentKTPRepository.IsEmployee(enroll.KtpNIK);
            if (_empData != null)
            {
                isEmployee = true;
            }
            #endregion

            #region check UID
            var dataReader = await _dataReaderRepository.GetDatareaderUid(enroll.UID).ConfigureAwait(false);

            var dataReaderLog = new Tbl_MasterAlatReaderLog();
            var dataReaderActivityLog = new Tbl_MasterAlatReaderLogActvity();
            var dataNpp = new Tbl_Mapping_Pegawai_KTP();

            if (dataReader != null)
            {
                dataReaderLog = new Tbl_MasterAlatReaderLog
                {
                    CreatedBy_Id = Id,
                    CreatedTime = DateTime.Now,
                    IsActive = true,
                    IsDeleted = false,
                    Nik = enroll.KtpNIK,
                    PegawaiId = Id,
                    Serial_Number = dataReader.SN_Unit,
                    Type = "Updates Enroll",
                    Uid = enroll.UID
                };

                dataReaderActivityLog = new Tbl_MasterAlatReaderLogActvity
                {
                    CreatedBy_Id = Id,
                    IsActive = true,
                    IsDeleted = false,
                    KodeUnit = unitCode,
                    LastIP = enroll.IpAddress,
                    NIK = enroll.KtpNIK,
                    CreatedTime = DateTime.Now,
                    NppPegawai = npp,
                    PegawaiId = Id,
                    Type = "Updates Enroll",
                    UID = enroll.UID,
                    UnitId = unitId
                };
            }
            #endregion

            string JamServer = DateTime.Now.ToString("ddMMyyyyHHmmss");

            if (enroll.KtpTanggalLahir != null)
            {
                enroll.KtpTanggalLahir = enroll.KtpTanggalLahir.Replace(".", "");
                if (enroll.KtpTanggalLahir.Contains("/"))
                {
                    enroll.KtpTanggalLahir = enroll.KtpTanggalLahir.Replace("/", "-");
                }
                string[] arrayTanggl = enroll.KtpTanggalLahir.Split("-");
                string hari = "";
                string bulan = "";
                string tahun = "";

                if (arrayTanggl != null)
                {
                    if (arrayTanggl[0] != null)
                    {
                        if (arrayTanggl[0].Length != 2)
                        {
                            hari = "0" + arrayTanggl[0];

                        }
                        else
                        {
                            hari = arrayTanggl[0];

                        }
                    }

                    if (arrayTanggl[1] != null)
                    {
                        if (arrayTanggl[1].Length != 2)
                        {
                            bulan = "0" + arrayTanggl[1];

                        }
                        else
                        {
                            bulan = arrayTanggl[1];

                        }
                    }

                    if (arrayTanggl[2] != null)
                    {
                        tahun = arrayTanggl[2];
                    }
                }

                enroll.KtpTanggalLahir = hari + "-" + bulan + "-" + tahun;
            }

            var cekKTP = await _profileRepository.GetDataDemografis(enroll.KtpNIK)
                .ConfigureAwait(false);

            #region update data ktp
            if (cekKTP != null)
            {
                #region update demografi
                var logDemografi = new Tbl_DataKTP_Demografis_Log
                {
                    Agama = cekKTP.Agama,
                    Alamat = cekKTP.Alamat,
                    AlamatGoogle = cekKTP.AlamatGoogle,
                    AlamatLengkap = cekKTP.AlamatLengkap,
                    CreatedById = cekKTP.CreatedById,
                    CreatedByUID = cekKTP.CreatedByUID,
                    CreatedByUnitId = cekKTP.CreatedByUnitId,
                    CreatedTime = cekKTP.CreatedTime,
                    Desa = cekKTP.Desa,
                    GolonganDarah = cekKTP.GolonganDarah,
                    JenisKelamin = cekKTP.JenisKelamin,
                    Kecamatan = cekKTP.Kecamatan,
                    Kelurahan = cekKTP.Kelurahan,
                    Kewarganegaraan = cekKTP.Kewarganegaraan,
                    KodePos = cekKTP.KodePos,
                    Kota = cekKTP.Kota,
                    Latitude = cekKTP.Latitude,
                    Longitude = cekKTP.Longitude,
                    MasaBerlaku = cekKTP.MasaBerlaku,
                    Nama = cekKTP.Nama,
                    NIK = cekKTP.NIK,
                    Pekerjaan = cekKTP.Pekerjaan,
                    Provinsi = cekKTP.Provinsi,
                    RT = cekKTP.RT,
                    RW = cekKTP.RW,
                    StatusPerkawinan = cekKTP.StatusPerkawinan,
                    TanggalLahir = cekKTP.TanggalLahir,
                    TempatLahir = cekKTP.TempatLahir,
                    CIF = cekKTP.CIF,
                    CreatedByNpp = cekKTP.CreatedByNpp
                };

                var stringPerubahan = "";

                if (cekKTP.Nama != enroll.KtpNama)
                {
                    stringPerubahan = stringPerubahan + "NAMA : " + cekKTP.Nama + " -> " + enroll.KtpNama + " <br/>";
                    cekKTP.Nama = enroll.KtpNama;
                }

                if (cekKTP.TempatLahir != enroll.KtpTempatLahir)
                {
                    stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTP.TempatLahir + " -> " + enroll.KtpTempatLahir + " <br/>";
                    cekKTP.TempatLahir = enroll.KtpTempatLahir;
                }

                if (enroll.KtpTanggalLahir != null)
                {
                    if (cekKTP.TempatLahir != enroll.KtpTempatLahir)
                    {
                        stringPerubahan = stringPerubahan + "TEMPAT LAHIR : " + cekKTP.TanggalLahir + " -> " + enroll.KtpTanggalLahir + " <br/>";
                        cekKTP.TanggalLahir = DateTime.ParseExact(enroll.KtpTanggalLahir, "dd-MM-yyyy", CultureInfo.InvariantCulture);
                    }
                }

                if (cekKTP.JenisKelamin != enroll.KtpJanisKelamin)
                {
                    stringPerubahan = stringPerubahan + "JENIS KELAMIN : " + cekKTP.JenisKelamin + " -> " + enroll.KtpJanisKelamin + " <br/>";
                    cekKTP.JenisKelamin = enroll.KtpJanisKelamin;
                }

                if (cekKTP.GolonganDarah != enroll.KtpGolonganDarah)
                {
                    stringPerubahan = stringPerubahan + "GOLONGAN DARAH : " + cekKTP.GolonganDarah + " -> " + enroll.KtpGolonganDarah + " <br/>";
                    cekKTP.GolonganDarah = enroll.KtpGolonganDarah;
                }

                if (cekKTP.Alamat != enroll.KtpAlamat)
                {
                    stringPerubahan = stringPerubahan + "ALAMAT : " + cekKTP.Alamat + " -> " + enroll.KtpAlamat + " <br/>";
                    cekKTP.Alamat = enroll.KtpAlamat;
                }

                if (cekKTP.RT != enroll.KtpRT)
                {
                    stringPerubahan = stringPerubahan + "RT : " + cekKTP.RT + " -> " + enroll.KtpRT + " <br/>";
                    cekKTP.RT = enroll.KtpRT;
                }

                if (cekKTP.RW != enroll.KtpRW)
                {
                    stringPerubahan = stringPerubahan + "RW : " + cekKTP.RW + " -> " + enroll.KtpRW + " <br/>";
                    cekKTP.RW = enroll.KtpRW;
                }

                if (cekKTP.Kelurahan != enroll.KtpKelurahan)
                {
                    stringPerubahan = stringPerubahan + "KELURAHAN : " + cekKTP.Kelurahan + " -> " + enroll.KtpKelurahan + " <br/>";
                    cekKTP.Kelurahan = enroll.KtpKelurahan;
                }

                if (cekKTP.Kecamatan != enroll.KtpKecamatan)
                {
                    stringPerubahan = stringPerubahan + "KECAMATAN : " + cekKTP.Kecamatan + " -> " + enroll.KtpKecamatan + " <br/>";
                    cekKTP.Kecamatan = enroll.KtpKecamatan;
                }

                if (cekKTP.Kota != enroll.KtpKota)
                {
                    stringPerubahan = stringPerubahan + "KOTA/KABUPATEN : " + cekKTP.Kota + " -> " + enroll.KtpKota + " <br/>";
                    cekKTP.Kota = enroll.KtpKota;
                }

                if (cekKTP.Provinsi != enroll.KtpProvinsi)
                {
                    stringPerubahan = stringPerubahan + "PROVINSI  : " + cekKTP.Provinsi + " -> " + enroll.KtpProvinsi + " <br/>";
                    cekKTP.Provinsi = enroll.KtpProvinsi;
                }

                if (cekKTP.Agama != enroll.KtpAgama)
                {
                    stringPerubahan = stringPerubahan + "AGAMA  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTP.Agama = enroll.KtpAgama;
                }

                if (cekKTP.StatusPerkawinan != enroll.KtpStatusPerkawinan)
                {
                    stringPerubahan = stringPerubahan + "STATUS PERKAWINAN  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTP.StatusPerkawinan = enroll.KtpStatusPerkawinan;
                }

                if (cekKTP.Pekerjaan != enroll.KtpPekerjaan)
                {
                    stringPerubahan = stringPerubahan + "PEKERJAAN  : " + cekKTP.Agama + " -> " + enroll.KtpAgama + " <br/>";
                    cekKTP.Pekerjaan = enroll.KtpPekerjaan;
                }

                if (cekKTP.Kewarganegaraan != enroll.KtpKewarganegaraan)
                {
                    stringPerubahan = stringPerubahan + "KEWARGANEGARAAN  : " + cekKTP.Kewarganegaraan + " -> " + enroll.KtpKewarganegaraan + " <br/>";
                    cekKTP.Kewarganegaraan = enroll.KtpKewarganegaraan;
                }
                if (cekKTP.MasaBerlaku != enroll.KtpMasaBerlaku)
                {
                    stringPerubahan = stringPerubahan + "MASA BERLAKU  : " + cekKTP.MasaBerlaku + " -> " + enroll.KtpMasaBerlaku + " <br/>";
                    cekKTP.MasaBerlaku = enroll.KtpMasaBerlaku;
                }
                if (cekKTP.CIF == null)
                {
                    var cifData = new ApiSOAResponse();
                    #region Hit SOA And Loggging it
                    if (isHitSOA == true)
                    {
                        cifData = await _cifService.GetSOAByCif(ReqSoa)
                        .ConfigureAwait(false);

                        var _status = 0;
                        if (cifData.cif != null)
                        {
                            _status = 1;
                        }

                        var _log = new Tbl_ThirdPartyLog
                        {
                            FeatureName = "ReSubmitEnrollmentFingerEncryptedOnly",
                            HostUrl = ReqSoa.host,
                            Request = Newtonsoft.Json.JsonConvert.SerializeObject(ReqSoa),
                            Status = _status,
                            Response = Newtonsoft.Json.JsonConvert.SerializeObject(cifData),
                            CreatedDate = System.DateTime.Now,
                            CreatedBy = npp
                        };

                        _ = _enrollmentKTPRepository.CreateThirdPartyLog(_log);
                    }
                    else
                    {
                        var res = await _cifService.GetCIF(new NikDto { Nik = enroll.KtpNIK },
                            new NikDtoUrl { baseUrl = ReqSoa.baseUrlNonSoa, endpoint = ReqSoa.UrlEndPointNonSoa });
                        if (res.Data == null)
                        {
                            cifData.cif = null;
                        }
                        else
                        {
                            cifData.cif = res.Data.Cif;
                        };
                    }
                    #endregion

                    if (!String.IsNullOrEmpty(cifData.cif))
                    {
                        cifData.cif = cifData.cif.Trim();
                    }

                    stringPerubahan = stringPerubahan + "CIF  : " + cekKTP.CIF + " -> " + cifData.cif + " <br/>";
                    cekKTP.CIF = cifData.cif;
                }

                cekKTP.UpdatedTime = DateTime.Now;
                cekKTP.UpdatedById = Id;
                cekKTP.UpdatedByUID = enroll.UID;
                cekKTP.UpdatedByUnitCode = unitCode;
                cekKTP.UpdatedByUnitId = unitId;
                cekKTP.UpdatedByNpp = npp;

                if (string.IsNullOrWhiteSpace(stringPerubahan))
                {
                    stringPerubahan = stringPerubahan + "Data Demografi tidak ada perubahan" + " <br/>";
                }
                #endregion

                if (isEmployee)
                {
                    var _mappingData = await _enrollmentKTPRepository.MappingNppNikByNik(enroll.KtpNIK);
                    if (_mappingData == null)
                    {
                        dataNpp = new Tbl_Mapping_Pegawai_KTP
                        {
                            CreatedById = Id,
                            NIK = enroll.KtpNIK,
                            Npp = _empData.Npp,
                            CreatedByNpp = npp,
                            CreatedByUID = enroll.UID,
                            CreatedTime = DateTime.Now,
                            CreatedByUnit = unitCode,
                            UpdatedByNpp = npp,
                            UpdatedByUID = enroll.UID,
                            UpdatedByUnit = unitCode,
                            UpdatedTime = DateTime.Now,
                        };
                    }
                    else
                    {
                        dataNpp = _mappingData;
                        dataNpp.UpdatedByNpp = npp;
                        dataNpp.UpdatedByUID = enroll.UID;
                        dataNpp.UpdatedByUnit = unitCode;
                        dataNpp.UpdatedTime = DateTime.Now;
                    }
                }

                var sysPathFolder = await _sysParameterRepository.GetPathFolder("PathFolderData");
                string pathFolder = sysPathFolder.Value;

                var photoKtpLog = new Tbl_DataKTP_Photo_Log();
                var photoKTPData = await _profileRepository.GetPhotoKtp(enroll.KtpNIK)
                        .ConfigureAwait(false);
                var exPhotoKtp = photoKTPData;

                #region update Photo KTP
                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoKTP))
                {
                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpPhotoKTP);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderPhoto")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderFoto = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "Foto_" + enroll.KtpNIK + "_" + JamServer + ".jpg";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderFoto, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderFoto))
                        {
                            Directory.CreateDirectory(subPathFolderFoto);
                        }

                        filePath = subPathFolderFoto + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoKTPData == null)
                    {
                        photoKTPData = new Tbl_DataKTP_Photo
                        {
                            PathFile = filePath,
                            Nik = enroll.KtpNIK,
                            FileName = fileName,
                            IsActive = true,
                            IsDeleted = false,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUid = enroll.UID,
                            UpdatedByUnit = unitCode,
                            UpdatedTime = DateTime.Now,
                            CreatedById = Id,
                            CreatedByNpp = npp,
                            CreatedByUid = enroll.UID,
                            CreatedByUnit = unitCode,
                            CreatedTime = DateTime.Now,
                        };
                    }
                    else
                    {
                        photoKtpLog.CreatedById = photoKTPData.CreatedById;
                        photoKtpLog.CreatedByNpp = photoKTPData.CreatedByNpp;
                        photoKtpLog.CreatedByUid = photoKTPData.CreatedByUid;
                        photoKtpLog.CreatedByUnit = photoKTPData.CreatedByUnit;
                        photoKtpLog.CreatedTime = photoKTPData.CreatedTime;
                        photoKtpLog.FileName = photoKTPData.FileName;
                        photoKtpLog.Nik = photoKTPData.Nik;
                        photoKtpLog.PathFile = photoKTPData.PathFile;

                        photoKTPData.PathFile = filePath;
                        photoKTPData.Nik = enroll.KtpNIK;
                        photoKTPData.FileName = fileName;
                        photoKTPData.IsActive = true;
                        photoKTPData.IsDeleted = false;
                        photoKTPData.UpdatedById = Id;
                        photoKTPData.UpdatedByNpp = npp;
                        photoKTPData.UpdatedByUid = enroll.UID;
                        photoKTPData.UpdatedByUnit = unitCode;
                        photoKTPData.UpdatedTime = DateTime.Now;
                    }
                }
                else
                {
                    stringPerubahan = stringPerubahan + "Request Payload Photo Tidak Ditemukan" + " <br/>";
                }
                #endregion

                var photoSignatureLog = new Tbl_DataKTP_Signature_Log();
                var photoSignatureData = await _profileRepository.GetPhotoSignature(enroll.KtpNIK)
                        .ConfigureAwait(false);
                var exphotoSignatureData = photoSignatureData;

                #region update signature
                if (!string.IsNullOrWhiteSpace(enroll.KtpSignature))
                {
                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpSignature);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderSignature")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderSignature = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "Signature_" + enroll.KtpNIK + "_" + JamServer + ".jpg";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderSignature, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderSignature))
                        {
                            Directory.CreateDirectory(subPathFolderSignature);
                        }

                        filePath = subPathFolderSignature + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoSignatureData == null)
                    {
                        photoSignatureData = new Tbl_DataKTP_Signature();
                        photoSignatureData.UpdatedById = Id;
                        photoSignatureData.UpdatedByNpp = npp;
                        photoSignatureData.UpdatedByUid = enroll.UID;
                        photoSignatureData.UpdatedTime = DateTime.Now;
                        photoSignatureData.UpdatedByUnit = unitCode;
                        photoSignatureData.IsActive = true;
                        photoSignatureData.IsDeleted = false;
                        photoSignatureData.Nik = enroll.KtpNIK;
                        photoSignatureData.FileName = fileName;
                        photoSignatureData.PathFile = filePath;
                        photoSignatureData.CreatedById = Id;
                        photoSignatureData.CreatedByNpp = npp;
                        photoSignatureData.CreatedByUid = enroll.UID;
                        photoSignatureData.CreatedByUnit = unitCode;
                        photoSignatureData.CreatedTime = DateTime.Now;
                    }
                    else
                    {
                        photoSignatureLog.CreatedById = photoSignatureData.CreatedById;
                        photoSignatureLog.CreatedByNpp = photoSignatureData.CreatedByNpp;
                        photoSignatureLog.CreatedByUid = photoSignatureData.CreatedByUid;
                        photoSignatureLog.CreatedByUnit = photoSignatureData.CreatedByUnit;
                        photoSignatureLog.CreatedTime = photoSignatureData.CreatedTime;
                        photoSignatureLog.FileName = photoSignatureData.FileName;
                        photoSignatureLog.Nik = photoSignatureData.Nik;
                        photoSignatureLog.PathFile = photoSignatureData.PathFile;

                        photoSignatureData.UpdatedById = Id;
                        photoSignatureData.UpdatedByNpp = npp;
                        photoSignatureData.UpdatedByUid = enroll.UID;
                        photoSignatureData.UpdatedTime = DateTime.Now;
                        photoSignatureData.IsActive = true;
                        photoSignatureData.IsDeleted = false;
                        photoSignatureData.Nik = enroll.KtpNIK;
                        photoSignatureData.FileName = fileName;
                        photoSignatureData.PathFile = filePath;
                    }
                }
                else
                {
                    stringPerubahan = stringPerubahan + "Request Payload Signature Tidak Ditemukan" + " <br/>";
                }
                #endregion

                var photoCamLog = new Tbl_DataKTP_PhotoCam_Log();
                var photoCamData = await _profileRepository.GetPhotoCam(enroll.KtpNIK)
                        .ConfigureAwait(false);
                var exphotoCamData = photoCamData;

                #region update photo cam
                if (!string.IsNullOrWhiteSpace(enroll.KtpPhotoCam))
                {
                    byte[] imgBytes = Convert.FromBase64String(enroll.KtpPhotoCam);

                    string filePath = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderWebcam")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string SubPathFolderPhotoCam = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string fileName = "PhotoCam_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(imgBytes);

                        (var fname, var fPath) = await stream.UploadToFTPServer(SubPathFolderPhotoCam, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(SubPathFolderPhotoCam))
                        {
                            Directory.CreateDirectory(SubPathFolderPhotoCam);
                        }

                        filePath = SubPathFolderPhotoCam + fileName;
                        File.WriteAllBytes(filePath, imgBytes);
                    }

                    if (photoCamData == null)
                    {
                        photoCamData = new Tbl_DataKTP_PhotoCam();
                        photoCamData.PathFile = filePath;
                        photoCamData.Nik = enroll.KtpNIK;
                        photoCamData.FileName = fileName;
                        photoCamData.IsActive = true;
                        photoCamData.IsDeleted = false;
                        photoCamData.UpdatedById = Id;
                        photoCamData.UpdatedByNpp = npp;
                        photoCamData.UpdatedByUid = enroll.UID;
                        photoCamData.UpdatedTime = DateTime.Now;
                        photoCamData.UpdatedByUnit = unitCode;
                        photoCamLog.CreatedById = photoCamData.CreatedById;
                        photoCamLog.CreatedByNpp = photoCamData.CreatedByNpp;
                        photoCamLog.CreatedByUid = photoCamData.CreatedByUid;
                        photoCamLog.CreatedByUnit = photoCamData.CreatedByUnit;
                        photoCamLog.CreatedTime = photoCamData.CreatedTime;
                    }
                    else
                    {
                        photoCamLog.CreatedById = photoCamData.CreatedById;
                        photoCamLog.CreatedByNpp = photoCamData.CreatedByNpp;
                        photoCamLog.CreatedByUid = photoCamData.CreatedByUid;
                        photoCamLog.CreatedByUnit = photoCamData.CreatedByUnit;
                        photoCamLog.CreatedTime = photoCamData.CreatedTime;
                        photoCamLog.FileName = photoCamData.FileName;
                        photoCamLog.Nik = photoCamData.Nik;
                        photoCamLog.PathFile = photoCamData.PathFile;

                        photoCamData.PathFile = filePath;
                        photoCamData.Nik = enroll.KtpNIK;
                        photoCamData.FileName = fileName;
                        photoCamData.IsActive = true;
                        photoCamData.IsDeleted = false;
                        photoCamData.UpdatedById = Id;
                        photoCamData.UpdatedByNpp = npp;
                        photoCamData.UpdatedByUid = enroll.UID;
                        photoCamData.UpdatedTime = DateTime.Now;
                    }
                }
                else
                {
                    stringPerubahan = stringPerubahan + "Request Payload Photo Cam Tidak Ditemukan" + " <br/>";
                }
                #endregion

                #region finger
                var exPhotoFinger = new List<Tbl_DataKTP_Finger>();

                var exPhotoFingerEmployee = new List<Tbl_DataKTP_Finger_Employee>();

                var photoFingerLogs = new List<Tbl_DataKTP_Finger_Log>();

                var photoFingers = new List<Tbl_DataKTP_Finger>();

                var photoFingersEmployee = new List<Tbl_DataKTP_Finger_Employee>();

                var photoFingersEmployeeLogs = new List<Tbl_DataKTP_Finger_Employee_Log>();

                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKanan))
                {

                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);

                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                    }

                    string imageEncrypted = enroll.KtpFingerKanan.Encrypt(Phrase.FileEncryption);

                    string filePath = "";
                    string filePathIso = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKanan.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";
                    string fileNameIso = "";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    //if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKananIso))
                    //{
                    //    string isoEncrypted = enroll.KtpFingerKananIso.Encrypt(Phrase.FileEncryption);
                    //    fileNameIso = "PhotoFingerISO_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                    //    if (_sftpConfig.IsActive)
                    //    {
                    //        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(isoEncrypted));

                    //        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileNameIso, _sftpConfig.Host,
                    //            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                    //        filePathIso = fPath;
                    //    }
                    //    else
                    //    {
                    //        if (!Directory.Exists(subPathFolderPhotoFinger))
                    //        {
                    //            Directory.CreateDirectory(subPathFolderPhotoFinger);
                    //        }

                    //        filePathIso = subPathFolderPhotoFinger + fileNameIso;
                    //        File.WriteAllText(filePathIso, isoEncrypted);
                    //    }
                    //}

                    if (photoFingerData == null)
                    {
                        photoFingerData = new Tbl_DataKTP_Finger
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            //PathFileISO = filePathIso,
                            CreatedByNpp = npp,
                            CreatedByUid = enroll.UID,
                            CreatedTime = DateTime.Now,
                            CreatedByUnit = unitCode,
                            FileName = fileName,
                            //FileNameISO = fileNameIso,
                            //FileJariISO = enroll.KtpFingerKananIso,
                            TypeFinger = enroll.KtpTypeJariKanan
                        };

                        photoFingers.Add(new Tbl_DataKTP_Finger
                        {
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            //PathFileISO = filePathIso,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUid,
                            CreatedTime = photoFingerData.CreatedTime,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUid = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            //FileJari = photoFingerData.FileJari,
                            //FileJariISO = photoFingerData.FileJariISO,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            //FileNameISO = fileNameIso,
                            TypeFinger = enroll.KtpTypeJariKanan
                        });
                    }
                    else
                    {
                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUid,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            //FileJari = photoFingerData.FileJari,
                            //FileJariISO = photoFingerData.FileJariISO,
                            //FileName = photoFingerData.FileName,
                            //FileNameISO = photoFingerData.FileNameISO,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            PathFileISO = photoFingerData.PathFileISO,
                            TypeFinger = photoFingerData.TypeFinger
                        });

                        exPhotoFinger.Add(photoFingerData);

                        photoFingers.Add(new Tbl_DataKTP_Finger
                        {
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            //PathFileISO = filePathIso,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUid,
                            CreatedTime = photoFingerData.CreatedTime,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUid = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            //FileJari = enroll.KtpFingerKanan,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            //FileNameISO = fileNameIso,
                            //FileJariISO = enroll.KtpFingerKananIso,
                            TypeFinger = enroll.KtpTypeJariKanan
                        });
                    }

                    if (isEmployee)
                    {
                        if (photoFingerDataEmployee == null)
                        {
                            photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee
                            {
                                CreatedById = Id,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,//
                                //PathFileISO = filePathIso,//
                                CreatedByNpp = npp,
                                CreatedByUid = enroll.UID,
                                CreatedTime = DateTime.Now,
                                FileName = fileName,//
                                //FileNameISO = fileNameIso,//
                                //FileJariISO = enroll.KtpFingerKananIso,
                                TypeFinger = enroll.KtpTypeJariKanan
                            };

                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                //PathFileISO = filePathIso,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUid = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                //FileJari = photoFingerDataEmployee.FileJari,
                                //FileJariISO = photoFingerDataEmployee.FileJariISO,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                //FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKanan
                            });
                        }
                        else
                        {
                            photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                //FileJari = photoFingerDataEmployee.FileJari,
                                //FileJariISO = photoFingerDataEmployee.FileJariISO,
                                FileName = photoFingerDataEmployee.FileName,
                                //FileNameISO = photoFingerDataEmployee.FileNameISO,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                //PathFileISO = photoFingerDataEmployee.PathFileISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger
                            });

                            exPhotoFingerEmployee.Add(photoFingerDataEmployee);

                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                //PathFileISO = filePathIso,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUid = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                //FileJari = enroll.KtpFingerKanan,
                                //FileJariISO = enroll.KtpFingerKananIso,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                //FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKanan
                            });
                        }
                    }
                }
                else
                {
                    #region get data if no payload but we have to replace all data with no data
                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                    if (photoFingerData != null)
                    {
                        exPhotoFinger.Add(photoFingerData);

                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUid,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            //FileJari = photoFingerData.FileJari,
                            FileName = photoFingerData.FileName,
                            //FileNameISO = photoFingerData.FileNameISO,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            TypeFinger = photoFingerData.TypeFinger
                        });
                    }

                    if (isEmployee)
                    {
                        var photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKanan)
                        .ConfigureAwait(false);
                        if (photoFingerDataEmployee != null)
                        {
                            exPhotoFingerEmployee.Add(photoFingerDataEmployee);

                            photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                //FileJari = photoFingerDataEmployee.FileJari,
                                FileName = photoFingerDataEmployee.FileName,
                                //FileNameISO = photoFingerDataEmployee.FileNameISO,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                //PathFileISO = photoFingerDataEmployee.PathFileISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger
                            });
                        }
                    }
                    #endregion

                    stringPerubahan = stringPerubahan + "Request Payload Finger Kanan Tidak Ditemukan" + " <br/>";
                }

                if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKiri))
                {
                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);

                    var photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee();

                    if (isEmployee)
                    {
                        photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                    }

                    string imageEncrypted = enroll.KtpFingerKiri.Encrypt(Phrase.FileEncryption);

                    string filePath = "";
                    string filePathIso = "";

                    var systemParameterPath = await _sysParameterRepository.GetPathFolder("FolderFinger")
                                                .ConfigureAwait(false);
                    string pathFolderFoto = systemParameterPath.Value;

                    string subPathFolderPhotoFinger = pathFolder + "/" + pathFolderFoto + "/" + enroll.KtpNIK + "/";

                    string JenisJari = enroll.KtpTypeJariKiri.Replace(" ", "");
                    string fileName = "PhotoFinger_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";
                    string fileNameIso = "";

                    if (_sftpConfig.IsActive)
                    {
                        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(imageEncrypted));

                        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileName, _sftpConfig.Host,
                            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                        filePath = fPath;
                    }
                    else
                    {
                        if (!Directory.Exists(subPathFolderPhotoFinger))
                        {
                            Directory.CreateDirectory(subPathFolderPhotoFinger);
                        }

                        filePath = subPathFolderPhotoFinger + fileName;
                        File.WriteAllText(filePath, imageEncrypted);
                    }

                    //if (!string.IsNullOrWhiteSpace(enroll.KtpFingerKiriIso))
                    //{
                    //    string isoEncrypted = enroll.KtpFingerKiriIso.Encrypt(Phrase.FileEncryption);
                    //    fileNameIso = "PhotoFingerISO_" + JenisJari + "_" + enroll.KtpNIK + "_" + JamServer + ".txt";

                    //    if (_sftpConfig.IsActive)
                    //    {
                    //        using var stream = new MemoryStream(Encoding.ASCII.GetBytes(isoEncrypted));

                    //        (var fname, var fPath) = await stream.UploadToFTPServer(subPathFolderPhotoFinger, fileNameIso, _sftpConfig.Host,
                    //            _sftpConfig.Username, _sftpConfig.Password, _sftpConfig.RootDirectory, _sftpConfig.Url).ConfigureAwait(false);

                    //        filePathIso = fPath;
                    //    }
                    //    else
                    //    {
                    //        if (!Directory.Exists(subPathFolderPhotoFinger))
                    //        {
                    //            Directory.CreateDirectory(subPathFolderPhotoFinger);
                    //        }

                    //        filePathIso = subPathFolderPhotoFinger + fileNameIso;
                    //        File.WriteAllText(filePathIso, isoEncrypted);
                    //    }
                    //}

                    if (photoFingerData == null)
                    {
                        photoFingerData = new Tbl_DataKTP_Finger
                        {
                            CreatedById = Id,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            //PathFileISO = filePathIso,
                            CreatedByNpp = npp,
                            CreatedByUid = enroll.UID,
                            CreatedTime = DateTime.Now,
                            FileName = fileName,
                            //FileNameISO = fileNameIso,
                            //FileJariISO = enroll.KtpFingerKiriIso,
                            TypeFinger = enroll.KtpTypeJariKiri
                        };

                        photoFingers.Add(new Tbl_DataKTP_Finger
                        {
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            //PathFileISO = filePathIso,
                            //FileNameISO = fileNameIso,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUid,
                            CreatedTime = photoFingerData.CreatedTime,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUid = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            //FileJari = photoFingerData.FileJari,
                            //FileJariISO = photoFingerData.FileJariISO,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            TypeFinger = enroll.KtpTypeJariKiri
                        });
                    }
                    else
                    {
                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUid,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            //FileJari = photoFingerData.FileJari,
                            //FileJariISO = photoFingerData.FileJariISO,
                            FileName = photoFingerData.FileName,
                            //PathFileISO = photoFingerData.PathFileISO,
                            //FileNameISO = photoFingerData.FileNameISO,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            TypeFinger = photoFingerData.TypeFinger
                        });

                        exPhotoFinger.Add(photoFingerData);

                        photoFingers.Add(new Tbl_DataKTP_Finger
                        {
                            CreatedById = photoFingerData.CreatedById,
                            IsActive = true,
                            IsDeleted = false,
                            Nik = enroll.KtpNIK,
                            PathFile = filePath,
                            //PathFileISO = filePathIso,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUid,
                            CreatedTime = photoFingerData.CreatedTime,
                            UpdatedById = Id,
                            UpdatedByNpp = npp,
                            UpdatedByUid = enroll.UID,
                            UpdatedByUnit = unitCode,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            //FileJari = enroll.KtpFingerKiri,
                            //FileJariISO = enroll.KtpFingerKiriIso,
                            UpdatedTime = DateTime.Now,
                            FileName = fileName,
                            //FileNameISO = fileNameIso,
                            TypeFinger = enroll.KtpTypeJariKiri
                        });
                    }

                    if (isEmployee)
                    {
                        if (photoFingerDataEmployee == null)
                        {
                            photoFingerDataEmployee = new Tbl_DataKTP_Finger_Employee
                            {
                                CreatedById = Id,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,//
                                //PathFileISO = filePathIso,//
                                CreatedByNpp = npp,
                                CreatedByUid = enroll.UID,
                                CreatedTime = DateTime.Now,
                                FileName = fileName,//
                                //FileNameISO = fileNameIso,//
                                //FileJariISO = enroll.KtpFingerKiriIso,
                                //FileJari = enroll.KtpFingerKiri,
                                TypeFinger = enroll.KtpTypeJariKiri
                            };

                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                //PathFileISO = filePathIso,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUid = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                //FileJari = photoFingerDataEmployee.FileJari,
                                //FileJariISO = photoFingerDataEmployee.FileJariISO,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                //FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKiri
                            });
                        }
                        else
                        {
                            photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                //FileJari = photoFingerDataEmployee.FileJari,
                                //FileJariISO = photoFingerDataEmployee.FileJariISO,
                                FileName = photoFingerDataEmployee.FileName,
                                //FileNameISO = photoFingerDataEmployee.FileNameISO,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                //PathFileISO = photoFingerDataEmployee.PathFileISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger
                            });

                            exPhotoFingerEmployee.Add(photoFingerDataEmployee);

                            photoFingersEmployee.Add(new Tbl_DataKTP_Finger_Employee
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                IsActive = true,
                                IsDeleted = false,
                                Nik = enroll.KtpNIK,
                                PathFile = filePath,
                                //PathFileISO = filePathIso,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                UpdatedById = Id,
                                UpdatedByNpp = npp,
                                UpdatedByUid = enroll.UID,
                                UpdatedByUnit = unitCode,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                //FileJari = enroll.KtpFingerKiri,
                                //FileJariISO = enroll.KtpFingerKiriIso,
                                UpdatedTime = DateTime.Now,
                                FileName = fileName,
                                //FileNameISO = fileNameIso,
                                TypeFinger = enroll.KtpTypeJariKiri
                            });
                        }
                    }
                }
                else
                {
                    #region get data if no payload but we have to replace all data with no data
                    var photoFingerData = await _profileRepository.GetPhotoFinger(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                    if (photoFingerData != null)
                    {
                        exPhotoFinger.Add(photoFingerData);

                        photoFingerLogs.Add(new Tbl_DataKTP_Finger_Log
                        {
                            CreatedById = photoFingerData.CreatedById,
                            CreatedByNpp = photoFingerData.CreatedByNpp,
                            CreatedByUid = photoFingerData.CreatedByUid,
                            CreatedByUnit = photoFingerData.CreatedByUnit,
                            CreatedByUnitId = photoFingerData.CreatedByUnitId,
                            CreatedTime = photoFingerData.CreatedTime,
                            //FileJari = photoFingerData.FileJari,
                            FileName = photoFingerData.FileName,
                            //FileNameISO = photoFingerData.FileNameISO,
                            Nik = photoFingerData.Nik,
                            PathFile = photoFingerData.PathFile,
                            //PathFileISO = photoFingerData.PathFileISO,
                            TypeFinger = photoFingerData.TypeFinger
                        });
                    }
                    if (isEmployee)
                    {
                        var photoFingerDataEmployee = await _profileRepository.GetPhotoFingerEmployee(enroll.KtpNIK, enroll.KtpTypeJariKiri)
                        .ConfigureAwait(false);
                        if (photoFingerDataEmployee != null)
                        {
                            exPhotoFingerEmployee.Add(photoFingerDataEmployee);

                            photoFingersEmployeeLogs.Add(new Tbl_DataKTP_Finger_Employee_Log
                            {
                                CreatedById = photoFingerDataEmployee.CreatedById,
                                CreatedByNpp = photoFingerDataEmployee.CreatedByNpp,
                                CreatedByUid = photoFingerDataEmployee.CreatedByUid,
                                CreatedByUnit = photoFingerDataEmployee.CreatedByUnit,
                                CreatedByUnitId = photoFingerDataEmployee.CreatedByUnitId,
                                CreatedTime = photoFingerDataEmployee.CreatedTime,
                                //FileJari = photoFingerDataEmployee.FileJari,
                                FileName = photoFingerDataEmployee.FileName,
                                //FileNameISO = photoFingerDataEmployee.FileNameISO,
                                Nik = photoFingerDataEmployee.Nik,
                                PathFile = photoFingerDataEmployee.PathFile,
                                //PathFileISO = photoFingerDataEmployee.PathFileISO,
                                TypeFinger = photoFingerDataEmployee.TypeFinger
                            });
                        }
                    }
                    #endregion

                    stringPerubahan = stringPerubahan + "Request Payload Finger Kanan Tidak Ditemukan" + " <br/>";
                }
                #endregion

                var (status, msg) = await _enrollmentKTPRepository.InsertEnrollFlow2(cekKTP, logDemografi, photoKTPData, photoKtpLog, photoSignatureData,
                    photoSignatureLog, photoCamData, photoCamLog, photoFingers, photoFingersEmployee, photoFingerLogs, photoFingersEmployeeLogs, exPhotoKtp, exphotoSignatureData, exphotoCamData, exPhotoFinger, exPhotoFingerEmployee, dataReaderLog, dataNpp);

                #region Logging Reader Activity
                _ = _alatReaderRepository.CreateLogActivity2(dataReaderActivityLog);
                _ = _alatReaderRepository.CreateAlatReaderLog(dataReaderLog);
                #endregion

                if (status)
                {
                    return (_SuccessMessageConfig.NasabahSuksesUpdate, (int)ServiceResponseStatus.SUKSES, cekKTP.CIF);
                }
                else
                {
                    return (_ErrorMessageConfig.DemografiGagalEnroll, (int)ServiceResponseStatus.ERROR, msg + " " + stringPerubahan);
                }
            }
            else
            {
                #region Logging Reader Activity
                _ = _alatReaderRepository.CreateLogActivity2(dataReaderActivityLog);
                _ = _alatReaderRepository.CreateAlatReaderLog(dataReaderLog);
                #endregion

                return (_ErrorMessageConfig.DemografiTidakDitemukan, (int)ServiceResponseStatus.Data_Empty, "");
            }
            #endregion
        }

        public async Task<string> VerifyEnrollment(string nik, string npp, string comment)
        {
            var prof = await _profileRepository.GetDataDemografis(nik).ConfigureAwait(false);

            if (prof == null) return "data empty";

            prof.IsVerified = true;
            prof.VerifiedByNpp = npp;
            prof.VerifyComment = comment;

            await _profileRepository.UpdateDataDemografis(prof).ConfigureAwait(false);

            return "SUKSES";
        }

        public async Task<string> ConfirmSubmission(ConfirmEnrollSubmissionVM req)
        {
            var prof = await _profileRepository.GetDataDemografis(req.NIK).ConfigureAwait(false);

            if (prof == null) return "data empty";

            prof.IsVerified = req.IsVerified;
            prof.VerifiedByNpp = req.VerifiedByNpp;
            prof.VerifyComment = req.VerifyComment;
            prof.UpdatedTime = DateTime.Now;
            prof.UpdatedById = req.UpdatedById;

            await _profileRepository.UpdateDataDemografis(prof).ConfigureAwait(false);

            Tbl_LogHistoryPengajuan tbl_LogHistoryPengajuan = new Tbl_LogHistoryPengajuan();
            tbl_LogHistoryPengajuan.IsVerified = req.IsVerified;
            tbl_LogHistoryPengajuan.DataKTPNIK = req.NIK;
            tbl_LogHistoryPengajuan.DataKTPId = prof.Id;
            tbl_LogHistoryPengajuan.CreatedTime = DateTime.Now;
            tbl_LogHistoryPengajuan.CreatedBy_Id = req.UpdatedById;
            tbl_LogHistoryPengajuan.ConfirmedByNpp = req.VerifiedByNpp;
            tbl_LogHistoryPengajuan.Comment = req.VerifyComment;

            _profileRepository.InsertHistoryPengajuan(tbl_LogHistoryPengajuan);

            return "SUKSES";
        }

        public async Task<List<FingerISOVM>> GetISO(string nik)
        {
            var resp = new List<FingerISOVM>();
            try
            {
                var _emp = await _enrollmentKTPRepository.IsEmployee(nik);

                if (_emp == null)
                {
                    var res = await _enrollmentKTPRepository.GetISO(nik);

                    if (res == null)
                    {
                        return null;
                    }

                    foreach (var item in res)
                    {
                        if (item.FileNameISO == null || item.PathFileISO == null)
                        {
                            return null;
                        }
                        var (stats, _decrypt) = await ConvertUrlToB64(item.PathFileISO);

                        resp.Add(new FingerISOVM
                        {
                            TypeFinger = item.TypeFinger,
                            Base64Iso = stats ? _decrypt : ""
                        });
                    }
                    return resp;
                }
                else
                {
                    var res = await _enrollmentKTPRepository.GetISOEmp(nik);
                    if (res == null)
                    {
                        return null;
                    }

                    foreach (var item in res)
                    {
                        if (item.FileNameISO == null || item.PathFileISO == null)
                        {
                            return null;
                        }
                        var (stats, _decrypt) = await ConvertUrlToB64(item.PathFileISO);

                        resp.Add(new FingerISOVM
                        {
                            TypeFinger = item.TypeFinger,
                            Base64Iso = stats ? _decrypt : ""
                        });
                    }

                    return resp;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        public async Task<(bool status, string msg)> ConvertUrlToB64(string path)
        {
            try
            {
                using WebClient webClient = new();

                var b64 = webClient.DownloadData(path ?? "");

                var b64String = "";

                using (var r = new StreamReader(new MemoryStream(b64)))
                {
                    var text = r.ReadToEnd();
                    b64String = text.Decrypt(Phrase.FileEncryption);
                }

                return (true, b64String);
            }
            catch (Exception ex)
            {
                return (false, ex.Message.ToString());
            }
        }

        public async Task UpdateEnrollNoMatchingStatusAsync(EnrollNoMatchingStatusRequest req, int updatedById, string npp, string unitCode, int unitId, int roleid)
        {
            await _enrollmentKTPRepository.UpdateEnrollNoMatchingStatusAsync(req, updatedById, npp,unitCode, unitId, roleid);

            await _enrollmentKTPRepository.InsertEnrollNoMatchingLogAsync(new Tbl_Inbox_Enrollment_Temp_Detail
            {
                InboxEnrollmentTempId = req.Id,
                Notes = req.Alasan,
                SubmitById = updatedById,
                SubmitByNpp = npp,
                SubmitedByUnitId = unitId,
                SubmitedByUnitCode = unitCode,
                ApprovedStatus = req.Status,
                Status = req.Status,
                NoPengajuan = req.NoPengajuan
            });

            if (req.Status == (int)EnrollmentNoMatchingStatus.TelahDisetujui) {

                var NIK = await _profileRepository.GetNikNoMatchingByIdPengajuan(req.Id).ConfigureAwait(false);

                //if (NIK == "")
                //{
                //    await _enrollmentKTPRepository.MoveTempDataToMainTable(req);

                //}
                //else { 
                //var existingDemo = await _profileRepository.GetDataDemografis(NIK).ConfigureAwait(false);

                //}

                var existingDemo = await _profileRepository.GetDataDemografis(NIK).ConfigureAwait(false);
                if (existingDemo != null)
                {
                    await _enrollmentKTPRepository.UpdateTempDataToMainTable(req, NIK);
                }
                else {
                    await _enrollmentKTPRepository.MoveTempDataToMainTable(req);
                }

            }
            else if (req.Status == (int)EnrollmentNoMatchingStatus.DitolakPenyelia || req.Status == (int)EnrollmentNoMatchingStatus.DitolakPemimpin) {
                await _enrollmentKTPRepository.UpdateIsactiveTempTable(req);
            }
        }

        public async Task<FaceRecogResponse> MatchImageBase64ToBase64(FaceRecogRequest req, UrlRequestRecognitionFR UrlReq)
        {
            var data = new FaceRecogResponse();

            try
            {
                data = await _httpRequestService.SendPostRequestAsync<FaceRecogResponse, FaceRecogRequest>(
                UrlReq.EndPoint,
                SendMethodByContentType.RAW,
                UrlReq.BaseUrl,
                req
                );

                if (data.httpResponseCode != 200) {

                    var log = new Tbl_LogError_FaceRecognition() {
                        payload = System.Text.Json.JsonSerializer.Serialize(req),
                        response = System.Text.Json.JsonSerializer.Serialize(data),
                        createdTime = DateTime.Now

                    };
                    _ = _enrollmentKTPRepository.InsertLogFacerecognition(log);
                }

                return data;
            }
            catch (Exception Ex)
            {
                var log = new Tbl_LogError_FaceRecognition()
                {
                    payload = System.Text.Json.JsonSerializer.Serialize(req),
                    response = Ex.Message.ToString(),
                    createdTime = DateTime.Now

                };

                _ = _enrollmentKTPRepository.InsertLogFacerecognition(log);

                if (UrlReq.Env)
                {
                    data = new FaceRecogResponse()
                    {
                        verificationResult = false,
                        uid = req.idNum,
                        transactionId = req.transactionId,
                        matchScore = "0",
                        httpResponseCode = 500
                    };
                }
                else {
                    data = new FaceRecogResponse()
                    {
                        httpResponseCode = 200,
                        matchScore = "10.421674728393555",
                        transactionId = req.transactionId,
                        uid = req.idNum,
                        verificationResult = true
                    };
                }

                


                return data;

            }

        }
        
        public async Task<FaceRecogResponseV2> MatchImageBase64ToBase64FRV2(FaceRecogRequestV2 req, UrlRequestRecognitionFR UrlReq)
        {
            var data = new FaceRecogResponseV2();

            try
            {
                data = await _httpRequestService.SendPostRequestAsync<FaceRecogResponseV2, FaceRecogRequestV2>(
                UrlReq.EndPoint,
                SendMethodByContentType.RAW,
                UrlReq.BaseUrl,
                req
                );

                if (data.status != "True" || !String.IsNullOrEmpty(data.errorCode)) {

                    var log = new Tbl_LogError_FaceRecognition() {
                        payload = System.Text.Json.JsonSerializer.Serialize(req),
                        response = System.Text.Json.JsonSerializer.Serialize(data),
                        createdTime = DateTime.Now
                    };
                    _ = _enrollmentKTPRepository.InsertLogFacerecognition(log);
                }

                return data;
            }
            catch (Exception Ex)
            {
                var log = new Tbl_LogError_FaceRecognition()
                {
                    payload = System.Text.Json.JsonSerializer.Serialize(req),
                    response = Ex.Message.ToString(),
                    createdTime = DateTime.Now
                };

                _ = _enrollmentKTPRepository.InsertLogFacerecognition(log);

                if (UrlReq.Env)
                {
                    data = new FaceRecogResponseV2()
                    {
                        status = "False",
                        trx_id = req.trx_id,
                        channel = req.channel,
                        selfie_photo = "0",
                        errorMessage = "Gagal!"
                    };
                }
                else {
                    data = new FaceRecogResponseV2()
                    {
                        status = "True",
                        trx_id = req.trx_id,
                        channel = req.channel,
                        selfie_photo = "10.467424392700195",
                        errorMessage = "",
                        errorCode = ""
                    };
                }

                return data;

            }

        }

        public async Task<CrawlingSubContent> CrawlingDukcapilHIT(CrawlingRequest req, UrlRequestCrawlingDukcapil UrlReq)
        {
            var data = new CrawlingSubContent();


            try {
                
                if (UrlReq.Env)
                {
                    data = await _httpRequestService.SendPostRequestCrawlingAsync<CrawlingSubContent, CrawlingRequest>(
                    UrlReq.EndPoint,
                    SendMethodByContentType.RAW,
                    UrlReq.BaseUrl,
                    req,
                    UrlReq.HeaderName,
                    UrlReq.HeaderValue
                );
                }
                else
                {
                    data = await _httpRequestService.SendPostRequestCrawlingAsync<CrawlingSubContent, CrawlingRequest>(
                    UrlReq.EndPointDEV,
                    SendMethodByContentType.RAW,
                    UrlReq.BaseUrlDEV,
                    req,
                    UrlReq.HeaderName,
                    UrlReq.HeaderValueDev
                );
                }

                return data;
            }
            catch (Exception ex) {
                var err = new Tbl_LogError
                {
                    InnerException = ex.InnerException?.Message ?? "",
                    CreatedAt = DateTime.Now,
                    Message = "Failed hit service crawling dukcapil",
                    Payload = JsonConvert.SerializeObject(req.ToString()),
                    Source = ex.Source,
                    StackTrace = ex.StackTrace,
                    SystemName = "Crawling Dukcapil"
                };

                var numb = _errorLogRepository.CreateErrorLog(err);

                return new CrawlingSubContent() { status = "FAILED"};
            }
        }

        public Task<FaceRecogResponse> MatchUrlImagesToBase64Json(FaceRecogRequest req, UrlRequestRecognitionFR UrlReq)
        {
            return _httpRequestService.SendPostRequestAsync<FaceRecogResponse, FaceRecogRequest>(
                UrlReq.EndPoint,
                SendMethodByContentType.RAW,
                UrlReq.BaseUrl,
                req
                );
        }

        public async Task<ScanResponse> ScanQRIKD(ScanQRIKDV2Req req, UrlRequestRecognitionFR UrlReq)
        {
            var data = new ScanResponseV2();

            var response = new ScanResponse();

            try
            {
                data = await _httpRequestService.SendPostRequestIgnoreSSLAsync<ScanResponseV2, ScanQRIKDV2Req>(
                UrlReq.EndPoint,
                SendMethodByContentType.RAW,
                UrlReq.BaseUrl,
                req
                );

                if (data.responseCode.Contains("9"))
                {
                    data.err_code = int.Parse(data.responseCode);
                    data.err_msg = data.responseMessage;

                    data.data = null;

                    var err = new Tbl_LogError
                    {
                        InnerException = data.responseMessage,
                        CreatedAt = DateTime.Now,
                        Message = JsonConvert.SerializeObject(data),
                        Payload = JsonConvert.SerializeObject(req.ToString()),
                        Source = "ScanQRIKD",
                        StackTrace = "ScanQRIKD",
                        SystemName = "Scan QR IKD"
                    };

                    var numb = _errorLogRepository.CreateErrorLog(err);
                }

                response.err_msg = data.err_msg;
                response.err_code = data.err_code;
                response.obj = data.data;
                
                return response;
            }
            catch (Exception Ex)
            {
                var err = new Tbl_LogError
                {
                    InnerException = Ex.InnerException?.Message ?? "",
                    CreatedAt = DateTime.Now,
                    Message = Ex.Message,
                    Payload = JsonConvert.SerializeObject(req.ToString()),
                    Source = Ex.Source,
                    StackTrace = Ex.StackTrace,
                    SystemName = "Scan QR IKD"
                };

                var numb = _errorLogRepository.CreateErrorLog(err);

                return new ScanResponse() { err_code = 500, err_msg = "FAILED!" };
            }
        }

        public async Task<ScanResponse> ScanQRIKDV2(ScanQRIKDV2Req req, UrlRequestRecognitionFR UrlReq)
        {
            var data = new ScanResponseV2();
            var response = new ScanResponse();

            try
            {
                data = await _httpRequestService.SendPostRequestIgnoreSSLAsync<ScanResponseV2, ScanQRIKDV2Req>(
                UrlReq.EndPoint,
                SendMethodByContentType.RAW,
                UrlReq.BaseUrl,
                req
                );

               
                if (data.responseCode.Contains("9"))
                {
                    data.err_code = int.Parse(data.responseCode);
                    data.err_msg = data.responseMessage;
                    data.data = null;

                    var err = new Tbl_LogError
                    {
                        InnerException = data.responseMessage,
                        CreatedAt = DateTime.Now,
                        Message = JsonConvert.SerializeObject(data),
                        Payload = JsonConvert.SerializeObject(req.ToString()),
                        Source = "ScanQRIKDV2",
                        StackTrace = "ScanQRIKDV2",
                        SystemName = "Scan QR IKD"
                    };

                    var numb = _errorLogRepository.CreateErrorLog(err);
                }


                response.err_msg = data.err_msg;
                response.err_code = data.err_code;
                response.obj = data.data;

                return response;
            }
            catch (Exception Ex)
            {
                var err = new Tbl_LogError
                {
                    InnerException = Ex.InnerException?.Message ?? "",
                    CreatedAt = DateTime.Now,
                    Message = Ex.Message,
                    Payload = JsonConvert.SerializeObject(req.ToString()),
                    Source = Ex.Source,
                    StackTrace = Ex.StackTrace,
                    SystemName = "Scan QR IKD"
                };

                var numb = _errorLogRepository.CreateErrorLog(err);

                return new ScanResponse() { err_code = 500, err_msg = "FAILED!" };
            }
        }

        public async Task<ScanResponse> ScanQRIKDXML(ScanQRIKDReq req, UrlRequestRecognitionFR UrlReq)
        {
            var data = new ScanResponse();

            try
            {

                data = await _ikdService.ScanQRIKD(req, UrlReq);

                return data;
            }
            catch (Exception Ex)
            {
                var err = new Tbl_LogError
                {
                    InnerException = Ex.InnerException?.Message ?? "",
                    CreatedAt = DateTime.Now,
                    Message = "Failed hit service Scan QR IKD",
                    Payload = JsonConvert.SerializeObject(req.ToString()),
                    Source = Ex.Source,
                    StackTrace = Ex.StackTrace,
                    SystemName = "Scan QR IKD"
                };

                var numb = _errorLogRepository.CreateErrorLog(err);

                return new ScanResponse() { err_code = 500, err_msg = "FAILED!" };
            }
        }

        public async Task<ScanResponseEncrypt> ScanQRIKDLimit(ScanQRIKDV2Req req, UrlRequestRecognitionFR UrlReq, string NIK, int maxLimit, int timeLimit, int userId, int roleId, int unitId, string aesKey)
        {
            var data = new ScanResponseV2();

            //var response = new ScanResponse();
            var response = new ScanResponseEncrypt();

            try
            {
                var checkSession = await _enrollmentKTPRepository.CheckIKDSession(NIK);

                if (checkSession != null)
                {
                    int addedAttempt = checkSession.Attempt += 1;

                    if (addedAttempt > maxLimit)
                    {
                        var timeNow = DateTime.Now;
                        TimeSpan timeDiff = (TimeSpan)(timeNow - checkSession.LastAttempt);
                        int timeMs = (int)timeDiff.TotalMilliseconds;

                        if (timeMs >= timeLimit)
                        {
                            var updatedSession = new Tbl_ScanIKD_Session
                            { 
                                Id = checkSession.Id,
                                UserId = Convert.ToInt32(userId),
                                npp = NIK,
                                RoleId = Convert.ToInt32(roleId),
                                UnitId = Convert.ToInt32(unitId),
                                Attempt = 1,
                                LastActive = DateTime.Now,
                                LastAttempt = DateTime.Now
                            };

                            var updateAttempt = _enrollmentKTPRepository.UpdateIKDSession(updatedSession);

                            #region scan qr
                            try
                            {
                                data = await _httpRequestService.SendPostRequestIgnoreSSLAsync<ScanResponseV2, ScanQRIKDV2Req>(
                                                            UrlReq.EndPoint,
                                                            SendMethodByContentType.RAW,
                                                            UrlReq.BaseUrl,
                                                            req
                                                            );

                                if (data.responseCode.Contains("9"))
                                {
                                    data.err_code = int.Parse(data.responseCode);
                                    data.err_msg = data.responseMessage;

                                    data.data = null;

                                    var err = new Tbl_LogError
                                    {
                                        InnerException = data.responseMessage,
                                        CreatedAt = DateTime.Now,
                                        Message = JsonConvert.SerializeObject(data),
                                        Payload = JsonConvert.SerializeObject(req.ToString()),
                                        Source = "ScanQRIKD",
                                        StackTrace = "ScanQRIKD",
                                        SystemName = "Scan QR IKD"
                                    };

                                    var numb = _errorLogRepository.CreateErrorLog(err);
                                }
                                var dataEncrypt = JsonConvert.SerializeObject(data.data);
                                var jsonEncrypt = Aes256Encryption.Encrypt(dataEncrypt, aesKey);

                                response.err_msg = data.err_msg;
                                response.err_code = data.err_code;
                                response.obj = jsonEncrypt;

                                return response;
                            }
                            catch (Exception Ex)
                            {
                                var err = new Tbl_LogError
                                {
                                    InnerException = Ex.InnerException?.Message ?? "",
                                    CreatedAt = DateTime.Now,
                                    Message = Ex.Message,
                                    Payload = JsonConvert.SerializeObject(req.ToString()),
                                    Source = Ex.Source,
                                    StackTrace = Ex.StackTrace,
                                    SystemName = "Scan QR IKD"
                                };

                                var numb = _errorLogRepository.CreateErrorLog(err);

                                //return new ScanResponse() { err_code = 500, err_msg = "FAILED!" };
                                return new ScanResponseEncrypt() { err_code = 500, err_msg = "FAILED!" };
                            }
                            
                            #endregion
                        }
                        else
                        {
                            //return new ScanResponse() { err_code = 500, err_msg = "Anda harus menunggu beberapa saat untuk melakukan scan QR IKD kembali" };
                            return new ScanResponseEncrypt() { err_code = 500, err_msg = _ErrorMessageConfig.LimitScanReached };

                        }
                    }
                    else
                    {
                        var updatedSession = new Tbl_ScanIKD_Session
                        {
                            Id = checkSession.Id,
                            UserId = Convert.ToInt32(userId),
                            npp = NIK,
                            RoleId = Convert.ToInt32(roleId),
                            UnitId = Convert.ToInt32(unitId),
                            Attempt = addedAttempt,
                            LastActive = DateTime.Now,
                            LastAttempt = DateTime.Now
                        };

                        var updateAttempt = _enrollmentKTPRepository.UpdateIKDSession(updatedSession);

                        #region scan qr
                        try
                        {
                            data = await _httpRequestService.SendPostRequestIgnoreSSLAsync<ScanResponseV2, ScanQRIKDV2Req>(
                                                        UrlReq.EndPoint,
                                                        SendMethodByContentType.RAW,
                                                        UrlReq.BaseUrl,
                                                        req
                                                        );

                            if (data.responseCode.Contains("9"))
                            {
                                data.err_code = int.Parse(data.responseCode);
                                data.err_msg = data.responseMessage;

                                data.data = null;

                                var err = new Tbl_LogError
                                {
                                    InnerException = data.responseMessage,
                                    CreatedAt = DateTime.Now,
                                    Message = JsonConvert.SerializeObject(data),
                                    Payload = JsonConvert.SerializeObject(req.ToString()),
                                    Source = "ScanQRIKD",
                                    StackTrace = "ScanQRIKD",
                                    SystemName = "Scan QR IKD"
                                };

                                var numb = _errorLogRepository.CreateErrorLog(err);
                            }
                            var dataEncrypt = JsonConvert.SerializeObject(data.data);
                            var jsonEncrypt = Aes256Encryption.Encrypt(dataEncrypt, aesKey);

                            response.err_msg = data.err_msg;
                            response.err_code = data.err_code;
                            //response.obj = data.data;
                            response.obj = jsonEncrypt;

                            return response;
                        }
                        catch (Exception Ex)
                        {
                            var err = new Tbl_LogError
                            {
                                InnerException = Ex.InnerException?.Message ?? "",
                                CreatedAt = DateTime.Now,
                                Message = Ex.Message,
                                Payload = JsonConvert.SerializeObject(req.ToString()),
                                Source = Ex.Source,
                                StackTrace = Ex.StackTrace,
                                SystemName = "Scan QR IKD"
                            };

                            var numb = _errorLogRepository.CreateErrorLog(err);

                            //return new ScanResponse() { err_code = 500, err_msg = "FAILED!" };
                            return new ScanResponseEncrypt() { err_code = 500, err_msg = "FAILED!" };
                        }
                        #endregion
                    }
                }
                else
                {
                    var newSession = new Tbl_ScanIKD_Session
                    {
                        UserId = Convert.ToInt32(userId),
                        npp = NIK,
                        RoleId = Convert.ToInt32(roleId),
                        UnitId = Convert.ToInt32(unitId),
                        Attempt = 1,
                        LastActive = DateTime.Now,
                        LastAttempt = DateTime.Now,
                    };

                    var insertAttempt = _enrollmentKTPRepository.InsertNewIKDSession(newSession);

                    #region scan qr
                    try
                    {
                        data = await _httpRequestService.SendPostRequestIgnoreSSLAsync<ScanResponseV2, ScanQRIKDV2Req>(
                                                    UrlReq.EndPoint,
                                                    SendMethodByContentType.RAW,
                                                    UrlReq.BaseUrl,
                                                    req
                                                    );

                        if (data.responseCode.Contains("9"))
                        {
                            data.err_code = int.Parse(data.responseCode);
                            data.err_msg = data.responseMessage;

                            data.data = null;

                            var err = new Tbl_LogError
                            {
                                InnerException = data.responseMessage,
                                CreatedAt = DateTime.Now,
                                Message = JsonConvert.SerializeObject(data),
                                Payload = JsonConvert.SerializeObject(req.ToString()),
                                Source = "ScanQRIKD",
                                StackTrace = "ScanQRIKD",
                                SystemName = "Scan QR IKD"
                            };

                            var numb = _errorLogRepository.CreateErrorLog(err);
                        }

                        var dataEncrypt = JsonConvert.SerializeObject(data.data);
                        var jsonEncrypt = Aes256Encryption.Encrypt(dataEncrypt, aesKey);

                        response.err_msg = data.err_msg;
                        response.err_code = data.err_code;
                        //response.obj = data.data;
                        response.obj = jsonEncrypt;

                        return response;
                    }
                    catch (Exception Ex)
                    {
                        var err = new Tbl_LogError
                        {
                            InnerException = Ex.InnerException?.Message ?? "",
                            CreatedAt = DateTime.Now,
                            Message = Ex.Message,
                            Payload = JsonConvert.SerializeObject(req.ToString()),
                            Source = Ex.Source,
                            StackTrace = Ex.StackTrace,
                            SystemName = "Scan QR IKD"
                        };

                        var numb = _errorLogRepository.CreateErrorLog(err);

                        //return new ScanResponse() { err_code = 500, err_msg = "FAILED!" };
                        return new ScanResponseEncrypt() { err_code = 500, err_msg = "FAILED!" };
                    }
                    #endregion
                }
            }
            catch (Exception Ex)
            {
                var err = new Tbl_LogError
                {
                    InnerException = Ex.InnerException?.Message ?? "",
                    CreatedAt = DateTime.Now,
                    Message = Ex.Message,
                    Payload = JsonConvert.SerializeObject(req.ToString()),
                    Source = Ex.Source,
                    StackTrace = Ex.StackTrace,
                    SystemName = "Scan QR IKD"
                };

                var numb = _errorLogRepository.CreateErrorLog(err);

                //return new ScanResponse() { err_code = 500, err_msg = "FAILED!" };
                return new ScanResponseEncrypt() { err_code = 500, err_msg = "FAILED!" };
            }
        }

        public async Task<ScanResponse> ScanQRIKDLimitNotEncrypted(ScanQRIKDV2Req req, UrlRequestRecognitionFR UrlReq, string NIK, int maxLimit, int timeLimit, int userId, int roleId, int unitId)
        {
            var data = new ScanResponseV2();

            var response = new ScanResponse();
            //var response = new ScanResponseEncrypt();

            try
            {
                var checkSession = await _enrollmentKTPRepository.CheckIKDSession(NIK);

                if (checkSession != null)
                {
                    int addedAttempt = checkSession.Attempt += 1;

                    if (addedAttempt > maxLimit)
                    {
                        var timeNow = DateTime.Now;
                        TimeSpan timeDiff = (TimeSpan)(timeNow - checkSession.LastAttempt);
                        int timeMs = (int)timeDiff.TotalMilliseconds;

                        if (timeMs >= timeLimit)
                        {
                            var updatedSession = new Tbl_ScanIKD_Session
                            {
                                Id = checkSession.Id,
                                UserId = Convert.ToInt32(userId),
                                npp = NIK,
                                RoleId = Convert.ToInt32(roleId),
                                UnitId = Convert.ToInt32(unitId),
                                Attempt = 1,
                                LastActive = DateTime.Now,
                                LastAttempt = DateTime.Now
                            };

                            var updateAttempt = _enrollmentKTPRepository.UpdateIKDSession(updatedSession);

                            #region scan qr
                            try
                            {
                                data = await _httpRequestService.SendPostRequestIgnoreSSLAsync<ScanResponseV2, ScanQRIKDV2Req>(
                                                            UrlReq.EndPoint,
                                                            SendMethodByContentType.RAW,
                                                            UrlReq.BaseUrl,
                                                            req
                                                            );

                                if (data.responseCode.Contains("9"))
                                {
                                    data.err_code = int.Parse(data.responseCode);
                                    data.err_msg = data.responseMessage;

                                    data.data = null;

                                    var err = new Tbl_LogError
                                    {
                                        InnerException = data.responseMessage,
                                        CreatedAt = DateTime.Now,
                                        Message = JsonConvert.SerializeObject(data),
                                        Payload = JsonConvert.SerializeObject(req.ToString()),
                                        Source = "ScanQRIKD",
                                        StackTrace = "ScanQRIKD",
                                        SystemName = "Scan QR IKD"
                                    };

                                    var numb = _errorLogRepository.CreateErrorLog(err);
                                }
                                var dataEncrypt = JsonConvert.SerializeObject(data.data);
                                //var jsonEncrypt = Aes256Encryption.Encrypt(dataEncrypt, aesKey);

                                response.err_msg = data.err_msg;
                                response.err_code = data.err_code;
                                response.obj = data.data;
                                //response.obj = jsonEncrypt;

                                return response;
                            }
                            catch (Exception Ex)
                            {
                                var err = new Tbl_LogError
                                {
                                    InnerException = Ex.InnerException?.Message ?? "",
                                    CreatedAt = DateTime.Now,
                                    Message = Ex.Message,
                                    Payload = JsonConvert.SerializeObject(req.ToString()),
                                    Source = Ex.Source,
                                    StackTrace = Ex.StackTrace,
                                    SystemName = "Scan QR IKD"
                                };

                                var numb = _errorLogRepository.CreateErrorLog(err);

                                return new ScanResponse() { err_code = 500, err_msg = "FAILED!" };
                                //return new ScanResponseEncrypt() { err_code = 500, err_msg = "FAILED!" };
                            }

                            #endregion
                        }
                        else
                        {
                            return new ScanResponse() { err_code = 500, err_msg = _ErrorMessageConfig.LimitScanReached };
                            //return new ScanResponseEncrypt() { err_code = 500, err_msg = "Anda harus menunggu beberapa saat untuk melakukan scan QR IKD kembali" };
                        }
                    }
                    else
                    {
                        var updatedSession = new Tbl_ScanIKD_Session
                        {
                            Id = checkSession.Id,
                            UserId = Convert.ToInt32(userId),
                            npp = NIK,
                            RoleId = Convert.ToInt32(roleId),
                            UnitId = Convert.ToInt32(unitId),
                            Attempt = addedAttempt,
                            LastActive = DateTime.Now,
                            LastAttempt = DateTime.Now
                        };

                        var updateAttempt = _enrollmentKTPRepository.UpdateIKDSession(updatedSession);

                        #region scan qr
                        try
                        {
                            data = await _httpRequestService.SendPostRequestIgnoreSSLAsync<ScanResponseV2, ScanQRIKDV2Req>(
                                                        UrlReq.EndPoint,
                                                        SendMethodByContentType.RAW,
                                                        UrlReq.BaseUrl,
                                                        req
                                                        );

                            if (data.responseCode.Contains("9"))
                            {
                                data.err_code = int.Parse(data.responseCode);
                                data.err_msg = data.responseMessage;

                                data.data = null;

                                var err = new Tbl_LogError
                                {
                                    InnerException = data.responseMessage,
                                    CreatedAt = DateTime.Now,
                                    Message = JsonConvert.SerializeObject(data),
                                    Payload = JsonConvert.SerializeObject(req.ToString()),
                                    Source = "ScanQRIKD",
                                    StackTrace = "ScanQRIKD",
                                    SystemName = "Scan QR IKD"
                                };

                                var numb = _errorLogRepository.CreateErrorLog(err);
                            }
                            var dataEncrypt = JsonConvert.SerializeObject(data.data);
                            //var jsonEncrypt = Aes256Encryption.Encrypt(dataEncrypt, aesKey);

                            response.err_msg = data.err_msg;
                            response.err_code = data.err_code;
                            response.obj = data.data;
                            //response.obj = jsonEncrypt;

                            return response;
                        }
                        catch (Exception Ex)
                        {
                            var err = new Tbl_LogError
                            {
                                InnerException = Ex.InnerException?.Message ?? "",
                                CreatedAt = DateTime.Now,
                                Message = Ex.Message,
                                Payload = JsonConvert.SerializeObject(req.ToString()),
                                Source = Ex.Source,
                                StackTrace = Ex.StackTrace,
                                SystemName = "Scan QR IKD"
                            };

                            var numb = _errorLogRepository.CreateErrorLog(err);

                            return new ScanResponse() { err_code = 500, err_msg = "FAILED!" };
                           //return new ScanResponseEncrypt() { err_code = 500, err_msg = "FAILED!" };
                        }
                        #endregion
                    }
                }
                else
                {
                    var newSession = new Tbl_ScanIKD_Session
                    {
                        UserId = Convert.ToInt32(userId),
                        npp = NIK,
                        RoleId = Convert.ToInt32(roleId),
                        UnitId = Convert.ToInt32(unitId),
                        Attempt = 1,
                        LastActive = DateTime.Now,
                        LastAttempt = DateTime.Now,
                    };

                    var insertAttempt = _enrollmentKTPRepository.InsertNewIKDSession(newSession);

                    #region scan qr
                    try
                    {
                        data = await _httpRequestService.SendPostRequestIgnoreSSLAsync<ScanResponseV2, ScanQRIKDV2Req>(
                                                    UrlReq.EndPoint,
                                                    SendMethodByContentType.RAW,
                                                    UrlReq.BaseUrl,
                                                    req
                                                    );

                        if (data.responseCode.Contains("9"))
                        {
                            data.err_code = int.Parse(data.responseCode);
                            data.err_msg = data.responseMessage;

                            data.data = null;

                            var err = new Tbl_LogError
                            {
                                InnerException = data.responseMessage,
                                CreatedAt = DateTime.Now,
                                Message = JsonConvert.SerializeObject(data),
                                Payload = JsonConvert.SerializeObject(req.ToString()),
                                Source = "ScanQRIKD",
                                StackTrace = "ScanQRIKD",
                                SystemName = "Scan QR IKD"
                            };

                            var numb = _errorLogRepository.CreateErrorLog(err);
                        }

                        var dataEncrypt = JsonConvert.SerializeObject(data.data);
                        //var jsonEncrypt = Aes256Encryption.Encrypt(dataEncrypt, aesKey);

                        response.err_msg = data.err_msg;
                        response.err_code = data.err_code;
                        response.obj = data.data;
                        //response.obj = jsonEncrypt;

                        return response;
                    }
                    catch (Exception Ex)
                    {
                        var err = new Tbl_LogError
                        {
                            InnerException = Ex.InnerException?.Message ?? "",
                            CreatedAt = DateTime.Now,
                            Message = Ex.Message,
                            Payload = JsonConvert.SerializeObject(req.ToString()),
                            Source = Ex.Source,
                            StackTrace = Ex.StackTrace,
                            SystemName = "Scan QR IKD"
                        };

                        var numb = _errorLogRepository.CreateErrorLog(err);

                        return new ScanResponse() { err_code = 500, err_msg = "FAILED!" };
                        //return new ScanResponseEncrypt() { err_code = 500, err_msg = "FAILED!" };
                    }
                    #endregion
                }
            }
            catch (Exception Ex)
            {
                var err = new Tbl_LogError
                {
                    InnerException = Ex.InnerException?.Message ?? "",
                    CreatedAt = DateTime.Now,
                    Message = Ex.Message,
                    Payload = JsonConvert.SerializeObject(req.ToString()),
                    Source = Ex.Source,
                    StackTrace = Ex.StackTrace,
                    SystemName = "Scan QR IKD"
                };

                var numb = _errorLogRepository.CreateErrorLog(err);

                return new ScanResponse() { err_code = 500, err_msg = "FAILED!" };
                //return new ScanResponseEncrypt() { err_code = 500, err_msg = "FAILED!" };
            }
        }

        public async Task<ScanResponseEncrypt> ScanQRIKDEncrypt(ScanQRIKDV2Req req, UrlRequestRecognitionFR UrlReq, string aesKey)
        {
            var data = new ScanResponseV2();

            //var response = new ScanResponse();
            var response = new ScanResponseEncrypt();

            try
            {
                data = await _httpRequestService.SendPostRequestIgnoreSSLAsync<ScanResponseV2, ScanQRIKDV2Req>(
                UrlReq.EndPoint,
                SendMethodByContentType.RAW,
                UrlReq.BaseUrl,
                req
                );

                if (data.responseCode.Contains("9"))
                {
                    data.err_code = int.Parse(data.responseCode);
                    data.err_msg = data.responseMessage;

                    data.data = null;

                    var err = new Tbl_LogError
                    {
                        InnerException = data.responseMessage,
                        CreatedAt = DateTime.Now,
                        Message = JsonConvert.SerializeObject(data),
                        Payload = JsonConvert.SerializeObject(req.ToString()),
                        Source = "ScanQRIKD",
                        StackTrace = "ScanQRIKD",
                        SystemName = "Scan QR IKD"
                    };

                    var numb = _errorLogRepository.CreateErrorLog(err);
                }
                var dataEncrypt = JsonConvert.SerializeObject(data.data);
                var jsonEncrypt = Aes256Encryption.Encrypt(dataEncrypt, aesKey);

                response.err_msg = data.err_msg;
                response.err_code = data.err_code;
                //response.obj = data.data;
                response.obj = jsonEncrypt;

                return response;
            }
            catch (Exception Ex)
            {
                var err = new Tbl_LogError
                {
                    InnerException = Ex.InnerException?.Message ?? "",
                    CreatedAt = DateTime.Now,
                    Message = Ex.Message,
                    Payload = JsonConvert.SerializeObject(req.ToString()),
                    Source = Ex.Source,
                    StackTrace = Ex.StackTrace,
                    SystemName = "Scan QR IKD"
                };

                var numb = _errorLogRepository.CreateErrorLog(err);

                //return new ScanResponse() { err_code = 500, err_msg = "FAILED!" };
                return new ScanResponseEncrypt() { err_code = 500, err_msg = "FAILED!" };
            }
        }
    }
}
